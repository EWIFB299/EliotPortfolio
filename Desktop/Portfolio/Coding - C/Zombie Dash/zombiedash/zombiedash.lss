
zombiedash.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000114  00800100  000047ec  00004880  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000047ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000309  00800214  00800214  00004994  2**0
                  ALLOC
  3 .debug_aranges 00000210  00000000  00000000  00004994  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000059a  00000000  00000000  00004ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002236  00000000  00000000  0000513e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000df6  00000000  00000000  00007374  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001fe5  00000000  00000000  0000816a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000300  00000000  00000000  0000a150  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000684  00000000  00000000  0000a450  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000010f0  00000000  00000000  0000aad4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000200  00000000  00000000  0000bbc4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
		}
		draw_sprite(&zombies[i]);
	}
}

void sprite_angle_change(Sprite * sprite ) {
       0:	45 c1       	rjmp	.+650    	; 0x28c <__ctors_end>

volatile int stage = 0;
volatile int choice = 1;
volatile int chosen = 0;

void setup_teensy() {
       2:	00 00       	nop
	LCDWrite(LCD_C, 0x40); // Reset row to 0
	LCDWrite(LCD_C, 0x80); // Reset column to 0
}

// Simply blank out the memory of the LCD to clear the screen
void LCDClear(void) {
       4:	60 c1       	rjmp	.+704    	; 0x2c6 <__bad_interrupt>
       6:	00 00       	nop
       8:	5e c1       	rjmp	.+700    	; 0x2c6 <__bad_interrupt>
       a:	00 00       	nop
       c:	5c c1       	rjmp	.+696    	; 0x2c6 <__bad_interrupt>
       e:	00 00       	nop
      10:	5a c1       	rjmp	.+692    	; 0x2c6 <__bad_interrupt>
      12:	00 00       	nop
      14:	58 c1       	rjmp	.+688    	; 0x2c6 <__bad_interrupt>
      16:	00 00       	nop
      18:	56 c1       	rjmp	.+684    	; 0x2c6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	54 c1       	rjmp	.+680    	; 0x2c6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	52 c1       	rjmp	.+676    	; 0x2c6 <__bad_interrupt>
      22:	00 00       	nop
      24:	0c 94 df 0d 	jmp	0x1bbe	; 0x1bbe <__vector_9>
      28:	4e c1       	rjmp	.+668    	; 0x2c6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4c c1       	rjmp	.+664    	; 0x2c6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4a c1       	rjmp	.+660    	; 0x2c6 <__bad_interrupt>
      32:	00 00       	nop
      34:	48 c1       	rjmp	.+656    	; 0x2c6 <__bad_interrupt>
      36:	00 00       	nop
      38:	46 c1       	rjmp	.+652    	; 0x2c6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	44 c1       	rjmp	.+648    	; 0x2c6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	42 c1       	rjmp	.+644    	; 0x2c6 <__bad_interrupt>
      42:	00 00       	nop
      44:	40 c1       	rjmp	.+640    	; 0x2c6 <__bad_interrupt>
      46:	00 00       	nop
      48:	3e c1       	rjmp	.+636    	; 0x2c6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3c c1       	rjmp	.+632    	; 0x2c6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3a c1       	rjmp	.+628    	; 0x2c6 <__bad_interrupt>
      52:	00 00       	nop
      54:	38 c1       	rjmp	.+624    	; 0x2c6 <__bad_interrupt>
      56:	00 00       	nop
      58:	36 c1       	rjmp	.+620    	; 0x2c6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 0b 18 	jmp	0x3016	; 0x3016 <__vector_23>
      60:	32 c1       	rjmp	.+612    	; 0x2c6 <__bad_interrupt>
      62:	00 00       	nop
      64:	30 c1       	rjmp	.+608    	; 0x2c6 <__bad_interrupt>
      66:	00 00       	nop
      68:	2e c1       	rjmp	.+604    	; 0x2c6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2c c1       	rjmp	.+600    	; 0x2c6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2a c1       	rjmp	.+596    	; 0x2c6 <__bad_interrupt>
      72:	00 00       	nop
      74:	28 c1       	rjmp	.+592    	; 0x2c6 <__bad_interrupt>
      76:	00 00       	nop
      78:	26 c1       	rjmp	.+588    	; 0x2c6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	24 c1       	rjmp	.+584    	; 0x2c6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	22 c1       	rjmp	.+580    	; 0x2c6 <__bad_interrupt>
      82:	00 00       	nop
      84:	20 c1       	rjmp	.+576    	; 0x2c6 <__bad_interrupt>
      86:	00 00       	nop
      88:	1e c1       	rjmp	.+572    	; 0x2c6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	1c c1       	rjmp	.+568    	; 0x2c6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1a c1       	rjmp	.+564    	; 0x2c6 <__bad_interrupt>
      92:	00 00       	nop
      94:	18 c1       	rjmp	.+560    	; 0x2c6 <__bad_interrupt>
      96:	00 00       	nop
      98:	16 c1       	rjmp	.+556    	; 0x2c6 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	14 c1       	rjmp	.+552    	; 0x2c6 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	12 c1       	rjmp	.+548    	; 0x2c6 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	10 c1       	rjmp	.+544    	; 0x2c6 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0e c1       	rjmp	.+540    	; 0x2c6 <__bad_interrupt>
      aa:	00 00       	nop

000000ac <ASCII>:
      ac:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
      bc:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
      cc:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
      dc:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 50 30 00     ....>....>...P0.
      ec:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
      fc:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     10c:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     11c:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     12c:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
     13c:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
     14c:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     15c:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     16c:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
     17c:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     18c:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     19c:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     1ac:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     1bc:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
     1cc:	08 07 61 51 49 45 43 00 7f 41 41 00 02 04 08 10     ..aQIEC..AA.....
     1dc:	20 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40      .AA.......@@@@@
     1ec:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     1fc:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     20c:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
     21c:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
     22c:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     23c:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     24c:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     25c:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     26c:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     27c:	00 00 41 36 08 00 10 08 08 10 08 78 46 41 46 78     ..A6.......xFAFx

0000028c <__ctors_end>:
     28c:	11 24       	eor	r1, r1
     28e:	1f be       	out	0x3f, r1	; 63
     290:	cf ef       	ldi	r28, 0xFF	; 255
     292:	da e0       	ldi	r29, 0x0A	; 10
     294:	de bf       	out	0x3e, r29	; 62
     296:	cd bf       	out	0x3d, r28	; 61

00000298 <__do_copy_data>:
     298:	12 e0       	ldi	r17, 0x02	; 2
     29a:	a0 e0       	ldi	r26, 0x00	; 0
     29c:	b1 e0       	ldi	r27, 0x01	; 1
     29e:	ec ee       	ldi	r30, 0xEC	; 236
     2a0:	f7 e4       	ldi	r31, 0x47	; 71
     2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <.do_copy_data_start>

000002a4 <.do_copy_data_loop>:
     2a4:	05 90       	lpm	r0, Z+
     2a6:	0d 92       	st	X+, r0

000002a8 <.do_copy_data_start>:
     2a8:	a4 31       	cpi	r26, 0x14	; 20
     2aa:	b1 07       	cpc	r27, r17
     2ac:	d9 f7       	brne	.-10     	; 0x2a4 <.do_copy_data_loop>

000002ae <__do_clear_bss>:
     2ae:	15 e0       	ldi	r17, 0x05	; 5
     2b0:	a4 e1       	ldi	r26, 0x14	; 20
     2b2:	b2 e0       	ldi	r27, 0x02	; 2
     2b4:	01 c0       	rjmp	.+2      	; 0x2b8 <.do_clear_bss_start>

000002b6 <.do_clear_bss_loop>:
     2b6:	1d 92       	st	X+, r1

000002b8 <.do_clear_bss_start>:
     2b8:	ad 31       	cpi	r26, 0x1D	; 29
     2ba:	b1 07       	cpc	r27, r17
     2bc:	e1 f7       	brne	.-8      	; 0x2b6 <.do_clear_bss_loop>
     2be:	0e 94 5e 19 	call	0x32bc	; 0x32bc <main>
     2c2:	0c 94 f4 23 	jmp	0x47e8	; 0x47e8 <_exit>

000002c6 <__bad_interrupt>:
     2c6:	9c ce       	rjmp	.-712    	; 0x0 <__vectors>

000002c8 <__mulsf3>:
     2c8:	a0 e2       	ldi	r26, 0x20	; 32
     2ca:	b0 e0       	ldi	r27, 0x00	; 0
     2cc:	ea e6       	ldi	r30, 0x6A	; 106
     2ce:	f1 e0       	ldi	r31, 0x01	; 1
     2d0:	0c 94 7b 20 	jmp	0x40f6	; 0x40f6 <__prologue_saves__>
     2d4:	69 83       	std	Y+1, r22	; 0x01
     2d6:	7a 83       	std	Y+2, r23	; 0x02
     2d8:	8b 83       	std	Y+3, r24	; 0x03
     2da:	9c 83       	std	Y+4, r25	; 0x04
     2dc:	2d 83       	std	Y+5, r18	; 0x05
     2de:	3e 83       	std	Y+6, r19	; 0x06
     2e0:	4f 83       	std	Y+7, r20	; 0x07
     2e2:	58 87       	std	Y+8, r21	; 0x08
     2e4:	ce 01       	movw	r24, r28
     2e6:	01 96       	adiw	r24, 0x01	; 1
     2e8:	be 01       	movw	r22, r28
     2ea:	67 5f       	subi	r22, 0xF7	; 247
     2ec:	7f 4f       	sbci	r23, 0xFF	; 255
     2ee:	61 d2       	rcall	.+1218   	; 0x7b2 <__unpack_f>
     2f0:	ce 01       	movw	r24, r28
     2f2:	05 96       	adiw	r24, 0x05	; 5
     2f4:	be 01       	movw	r22, r28
     2f6:	6f 5e       	subi	r22, 0xEF	; 239
     2f8:	7f 4f       	sbci	r23, 0xFF	; 255
     2fa:	5b d2       	rcall	.+1206   	; 0x7b2 <__unpack_f>
     2fc:	99 85       	ldd	r25, Y+9	; 0x09
     2fe:	92 30       	cpi	r25, 0x02	; 2
     300:	88 f0       	brcs	.+34     	; 0x324 <__mulsf3+0x5c>
     302:	89 89       	ldd	r24, Y+17	; 0x11
     304:	82 30       	cpi	r24, 0x02	; 2
     306:	c8 f0       	brcs	.+50     	; 0x33a <__mulsf3+0x72>
     308:	94 30       	cpi	r25, 0x04	; 4
     30a:	19 f4       	brne	.+6      	; 0x312 <__mulsf3+0x4a>
     30c:	82 30       	cpi	r24, 0x02	; 2
     30e:	51 f4       	brne	.+20     	; 0x324 <__mulsf3+0x5c>
     310:	04 c0       	rjmp	.+8      	; 0x31a <__mulsf3+0x52>
     312:	84 30       	cpi	r24, 0x04	; 4
     314:	29 f4       	brne	.+10     	; 0x320 <__mulsf3+0x58>
     316:	92 30       	cpi	r25, 0x02	; 2
     318:	81 f4       	brne	.+32     	; 0x33a <__mulsf3+0x72>
     31a:	88 e0       	ldi	r24, 0x08	; 8
     31c:	92 e0       	ldi	r25, 0x02	; 2
     31e:	c6 c0       	rjmp	.+396    	; 0x4ac <__mulsf3+0x1e4>
     320:	92 30       	cpi	r25, 0x02	; 2
     322:	49 f4       	brne	.+18     	; 0x336 <__mulsf3+0x6e>
     324:	20 e0       	ldi	r18, 0x00	; 0
     326:	9a 85       	ldd	r25, Y+10	; 0x0a
     328:	8a 89       	ldd	r24, Y+18	; 0x12
     32a:	98 13       	cpse	r25, r24
     32c:	21 e0       	ldi	r18, 0x01	; 1
     32e:	2a 87       	std	Y+10, r18	; 0x0a
     330:	ce 01       	movw	r24, r28
     332:	09 96       	adiw	r24, 0x09	; 9
     334:	bb c0       	rjmp	.+374    	; 0x4ac <__mulsf3+0x1e4>
     336:	82 30       	cpi	r24, 0x02	; 2
     338:	49 f4       	brne	.+18     	; 0x34c <__mulsf3+0x84>
     33a:	20 e0       	ldi	r18, 0x00	; 0
     33c:	9a 85       	ldd	r25, Y+10	; 0x0a
     33e:	8a 89       	ldd	r24, Y+18	; 0x12
     340:	98 13       	cpse	r25, r24
     342:	21 e0       	ldi	r18, 0x01	; 1
     344:	2a 8b       	std	Y+18, r18	; 0x12
     346:	ce 01       	movw	r24, r28
     348:	41 96       	adiw	r24, 0x11	; 17
     34a:	b0 c0       	rjmp	.+352    	; 0x4ac <__mulsf3+0x1e4>
     34c:	2d 84       	ldd	r2, Y+13	; 0x0d
     34e:	3e 84       	ldd	r3, Y+14	; 0x0e
     350:	4f 84       	ldd	r4, Y+15	; 0x0f
     352:	58 88       	ldd	r5, Y+16	; 0x10
     354:	6d 88       	ldd	r6, Y+21	; 0x15
     356:	7e 88       	ldd	r7, Y+22	; 0x16
     358:	8f 88       	ldd	r8, Y+23	; 0x17
     35a:	98 8c       	ldd	r9, Y+24	; 0x18
     35c:	ee 24       	eor	r14, r14
     35e:	ff 24       	eor	r15, r15
     360:	87 01       	movw	r16, r14
     362:	aa 24       	eor	r10, r10
     364:	bb 24       	eor	r11, r11
     366:	65 01       	movw	r12, r10
     368:	40 e0       	ldi	r20, 0x00	; 0
     36a:	50 e0       	ldi	r21, 0x00	; 0
     36c:	60 e0       	ldi	r22, 0x00	; 0
     36e:	70 e0       	ldi	r23, 0x00	; 0
     370:	e0 e0       	ldi	r30, 0x00	; 0
     372:	f0 e0       	ldi	r31, 0x00	; 0
     374:	c1 01       	movw	r24, r2
     376:	81 70       	andi	r24, 0x01	; 1
     378:	90 70       	andi	r25, 0x00	; 0
     37a:	89 2b       	or	r24, r25
     37c:	e9 f0       	breq	.+58     	; 0x3b8 <__mulsf3+0xf0>
     37e:	e6 0c       	add	r14, r6
     380:	f7 1c       	adc	r15, r7
     382:	08 1d       	adc	r16, r8
     384:	19 1d       	adc	r17, r9
     386:	9a 01       	movw	r18, r20
     388:	ab 01       	movw	r20, r22
     38a:	2a 0d       	add	r18, r10
     38c:	3b 1d       	adc	r19, r11
     38e:	4c 1d       	adc	r20, r12
     390:	5d 1d       	adc	r21, r13
     392:	80 e0       	ldi	r24, 0x00	; 0
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	a0 e0       	ldi	r26, 0x00	; 0
     398:	b0 e0       	ldi	r27, 0x00	; 0
     39a:	e6 14       	cp	r14, r6
     39c:	f7 04       	cpc	r15, r7
     39e:	08 05       	cpc	r16, r8
     3a0:	19 05       	cpc	r17, r9
     3a2:	20 f4       	brcc	.+8      	; 0x3ac <__mulsf3+0xe4>
     3a4:	81 e0       	ldi	r24, 0x01	; 1
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	a0 e0       	ldi	r26, 0x00	; 0
     3aa:	b0 e0       	ldi	r27, 0x00	; 0
     3ac:	ba 01       	movw	r22, r20
     3ae:	a9 01       	movw	r20, r18
     3b0:	48 0f       	add	r20, r24
     3b2:	59 1f       	adc	r21, r25
     3b4:	6a 1f       	adc	r22, r26
     3b6:	7b 1f       	adc	r23, r27
     3b8:	aa 0c       	add	r10, r10
     3ba:	bb 1c       	adc	r11, r11
     3bc:	cc 1c       	adc	r12, r12
     3be:	dd 1c       	adc	r13, r13
     3c0:	97 fe       	sbrs	r9, 7
     3c2:	08 c0       	rjmp	.+16     	; 0x3d4 <__mulsf3+0x10c>
     3c4:	81 e0       	ldi	r24, 0x01	; 1
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	a0 e0       	ldi	r26, 0x00	; 0
     3ca:	b0 e0       	ldi	r27, 0x00	; 0
     3cc:	a8 2a       	or	r10, r24
     3ce:	b9 2a       	or	r11, r25
     3d0:	ca 2a       	or	r12, r26
     3d2:	db 2a       	or	r13, r27
     3d4:	31 96       	adiw	r30, 0x01	; 1
     3d6:	e0 32       	cpi	r30, 0x20	; 32
     3d8:	f1 05       	cpc	r31, r1
     3da:	49 f0       	breq	.+18     	; 0x3ee <__mulsf3+0x126>
     3dc:	66 0c       	add	r6, r6
     3de:	77 1c       	adc	r7, r7
     3e0:	88 1c       	adc	r8, r8
     3e2:	99 1c       	adc	r9, r9
     3e4:	56 94       	lsr	r5
     3e6:	47 94       	ror	r4
     3e8:	37 94       	ror	r3
     3ea:	27 94       	ror	r2
     3ec:	c3 cf       	rjmp	.-122    	; 0x374 <__mulsf3+0xac>
     3ee:	fa 85       	ldd	r31, Y+10	; 0x0a
     3f0:	ea 89       	ldd	r30, Y+18	; 0x12
     3f2:	2b 89       	ldd	r18, Y+19	; 0x13
     3f4:	3c 89       	ldd	r19, Y+20	; 0x14
     3f6:	8b 85       	ldd	r24, Y+11	; 0x0b
     3f8:	9c 85       	ldd	r25, Y+12	; 0x0c
     3fa:	28 0f       	add	r18, r24
     3fc:	39 1f       	adc	r19, r25
     3fe:	2e 5f       	subi	r18, 0xFE	; 254
     400:	3f 4f       	sbci	r19, 0xFF	; 255
     402:	17 c0       	rjmp	.+46     	; 0x432 <__mulsf3+0x16a>
     404:	ca 01       	movw	r24, r20
     406:	81 70       	andi	r24, 0x01	; 1
     408:	90 70       	andi	r25, 0x00	; 0
     40a:	89 2b       	or	r24, r25
     40c:	61 f0       	breq	.+24     	; 0x426 <__mulsf3+0x15e>
     40e:	16 95       	lsr	r17
     410:	07 95       	ror	r16
     412:	f7 94       	ror	r15
     414:	e7 94       	ror	r14
     416:	80 e0       	ldi	r24, 0x00	; 0
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	a0 e0       	ldi	r26, 0x00	; 0
     41c:	b0 e8       	ldi	r27, 0x80	; 128
     41e:	e8 2a       	or	r14, r24
     420:	f9 2a       	or	r15, r25
     422:	0a 2b       	or	r16, r26
     424:	1b 2b       	or	r17, r27
     426:	76 95       	lsr	r23
     428:	67 95       	ror	r22
     42a:	57 95       	ror	r21
     42c:	47 95       	ror	r20
     42e:	2f 5f       	subi	r18, 0xFF	; 255
     430:	3f 4f       	sbci	r19, 0xFF	; 255
     432:	77 fd       	sbrc	r23, 7
     434:	e7 cf       	rjmp	.-50     	; 0x404 <__mulsf3+0x13c>
     436:	0c c0       	rjmp	.+24     	; 0x450 <__mulsf3+0x188>
     438:	44 0f       	add	r20, r20
     43a:	55 1f       	adc	r21, r21
     43c:	66 1f       	adc	r22, r22
     43e:	77 1f       	adc	r23, r23
     440:	17 fd       	sbrc	r17, 7
     442:	41 60       	ori	r20, 0x01	; 1
     444:	ee 0c       	add	r14, r14
     446:	ff 1c       	adc	r15, r15
     448:	00 1f       	adc	r16, r16
     44a:	11 1f       	adc	r17, r17
     44c:	21 50       	subi	r18, 0x01	; 1
     44e:	30 40       	sbci	r19, 0x00	; 0
     450:	40 30       	cpi	r20, 0x00	; 0
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	59 07       	cpc	r21, r25
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	69 07       	cpc	r22, r25
     45a:	90 e4       	ldi	r25, 0x40	; 64
     45c:	79 07       	cpc	r23, r25
     45e:	60 f3       	brcs	.-40     	; 0x438 <__mulsf3+0x170>
     460:	2b 8f       	std	Y+27, r18	; 0x1b
     462:	3c 8f       	std	Y+28, r19	; 0x1c
     464:	db 01       	movw	r26, r22
     466:	ca 01       	movw	r24, r20
     468:	8f 77       	andi	r24, 0x7F	; 127
     46a:	90 70       	andi	r25, 0x00	; 0
     46c:	a0 70       	andi	r26, 0x00	; 0
     46e:	b0 70       	andi	r27, 0x00	; 0
     470:	80 34       	cpi	r24, 0x40	; 64
     472:	91 05       	cpc	r25, r1
     474:	a1 05       	cpc	r26, r1
     476:	b1 05       	cpc	r27, r1
     478:	61 f4       	brne	.+24     	; 0x492 <__mulsf3+0x1ca>
     47a:	47 fd       	sbrc	r20, 7
     47c:	0a c0       	rjmp	.+20     	; 0x492 <__mulsf3+0x1ca>
     47e:	e1 14       	cp	r14, r1
     480:	f1 04       	cpc	r15, r1
     482:	01 05       	cpc	r16, r1
     484:	11 05       	cpc	r17, r1
     486:	29 f0       	breq	.+10     	; 0x492 <__mulsf3+0x1ca>
     488:	40 5c       	subi	r20, 0xC0	; 192
     48a:	5f 4f       	sbci	r21, 0xFF	; 255
     48c:	6f 4f       	sbci	r22, 0xFF	; 255
     48e:	7f 4f       	sbci	r23, 0xFF	; 255
     490:	40 78       	andi	r20, 0x80	; 128
     492:	1a 8e       	std	Y+26, r1	; 0x1a
     494:	fe 17       	cp	r31, r30
     496:	11 f0       	breq	.+4      	; 0x49c <__mulsf3+0x1d4>
     498:	81 e0       	ldi	r24, 0x01	; 1
     49a:	8a 8f       	std	Y+26, r24	; 0x1a
     49c:	4d 8f       	std	Y+29, r20	; 0x1d
     49e:	5e 8f       	std	Y+30, r21	; 0x1e
     4a0:	6f 8f       	std	Y+31, r22	; 0x1f
     4a2:	78 a3       	std	Y+32, r23	; 0x20
     4a4:	83 e0       	ldi	r24, 0x03	; 3
     4a6:	89 8f       	std	Y+25, r24	; 0x19
     4a8:	ce 01       	movw	r24, r28
     4aa:	49 96       	adiw	r24, 0x19	; 25
     4ac:	ad d0       	rcall	.+346    	; 0x608 <__pack_f>
     4ae:	a0 96       	adiw	r28, 0x20	; 32
     4b0:	e2 e1       	ldi	r30, 0x12	; 18
     4b2:	0c 94 97 20 	jmp	0x412e	; 0x412e <__epilogue_restores__>

000004b6 <__divsf3>:
     4b6:	a8 e1       	ldi	r26, 0x18	; 24
     4b8:	b0 e0       	ldi	r27, 0x00	; 0
     4ba:	e1 e6       	ldi	r30, 0x61	; 97
     4bc:	f2 e0       	ldi	r31, 0x02	; 2
     4be:	0c 94 83 20 	jmp	0x4106	; 0x4106 <__prologue_saves__+0x10>
     4c2:	69 83       	std	Y+1, r22	; 0x01
     4c4:	7a 83       	std	Y+2, r23	; 0x02
     4c6:	8b 83       	std	Y+3, r24	; 0x03
     4c8:	9c 83       	std	Y+4, r25	; 0x04
     4ca:	2d 83       	std	Y+5, r18	; 0x05
     4cc:	3e 83       	std	Y+6, r19	; 0x06
     4ce:	4f 83       	std	Y+7, r20	; 0x07
     4d0:	58 87       	std	Y+8, r21	; 0x08
     4d2:	b9 e0       	ldi	r27, 0x09	; 9
     4d4:	eb 2e       	mov	r14, r27
     4d6:	f1 2c       	mov	r15, r1
     4d8:	ec 0e       	add	r14, r28
     4da:	fd 1e       	adc	r15, r29
     4dc:	ce 01       	movw	r24, r28
     4de:	01 96       	adiw	r24, 0x01	; 1
     4e0:	b7 01       	movw	r22, r14
     4e2:	67 d1       	rcall	.+718    	; 0x7b2 <__unpack_f>
     4e4:	8e 01       	movw	r16, r28
     4e6:	0f 5e       	subi	r16, 0xEF	; 239
     4e8:	1f 4f       	sbci	r17, 0xFF	; 255
     4ea:	ce 01       	movw	r24, r28
     4ec:	05 96       	adiw	r24, 0x05	; 5
     4ee:	b8 01       	movw	r22, r16
     4f0:	60 d1       	rcall	.+704    	; 0x7b2 <__unpack_f>
     4f2:	29 85       	ldd	r18, Y+9	; 0x09
     4f4:	22 30       	cpi	r18, 0x02	; 2
     4f6:	08 f4       	brcc	.+2      	; 0x4fa <__divsf3+0x44>
     4f8:	7e c0       	rjmp	.+252    	; 0x5f6 <__divsf3+0x140>
     4fa:	39 89       	ldd	r19, Y+17	; 0x11
     4fc:	32 30       	cpi	r19, 0x02	; 2
     4fe:	10 f4       	brcc	.+4      	; 0x504 <__divsf3+0x4e>
     500:	b8 01       	movw	r22, r16
     502:	7c c0       	rjmp	.+248    	; 0x5fc <__divsf3+0x146>
     504:	8a 85       	ldd	r24, Y+10	; 0x0a
     506:	9a 89       	ldd	r25, Y+18	; 0x12
     508:	89 27       	eor	r24, r25
     50a:	8a 87       	std	Y+10, r24	; 0x0a
     50c:	24 30       	cpi	r18, 0x04	; 4
     50e:	11 f0       	breq	.+4      	; 0x514 <__divsf3+0x5e>
     510:	22 30       	cpi	r18, 0x02	; 2
     512:	31 f4       	brne	.+12     	; 0x520 <__divsf3+0x6a>
     514:	23 17       	cp	r18, r19
     516:	09 f0       	breq	.+2      	; 0x51a <__divsf3+0x64>
     518:	6e c0       	rjmp	.+220    	; 0x5f6 <__divsf3+0x140>
     51a:	68 e0       	ldi	r22, 0x08	; 8
     51c:	72 e0       	ldi	r23, 0x02	; 2
     51e:	6e c0       	rjmp	.+220    	; 0x5fc <__divsf3+0x146>
     520:	34 30       	cpi	r19, 0x04	; 4
     522:	39 f4       	brne	.+14     	; 0x532 <__divsf3+0x7c>
     524:	1d 86       	std	Y+13, r1	; 0x0d
     526:	1e 86       	std	Y+14, r1	; 0x0e
     528:	1f 86       	std	Y+15, r1	; 0x0f
     52a:	18 8a       	std	Y+16, r1	; 0x10
     52c:	1c 86       	std	Y+12, r1	; 0x0c
     52e:	1b 86       	std	Y+11, r1	; 0x0b
     530:	04 c0       	rjmp	.+8      	; 0x53a <__divsf3+0x84>
     532:	32 30       	cpi	r19, 0x02	; 2
     534:	21 f4       	brne	.+8      	; 0x53e <__divsf3+0x88>
     536:	84 e0       	ldi	r24, 0x04	; 4
     538:	89 87       	std	Y+9, r24	; 0x09
     53a:	b7 01       	movw	r22, r14
     53c:	5f c0       	rjmp	.+190    	; 0x5fc <__divsf3+0x146>
     53e:	2b 85       	ldd	r18, Y+11	; 0x0b
     540:	3c 85       	ldd	r19, Y+12	; 0x0c
     542:	8b 89       	ldd	r24, Y+19	; 0x13
     544:	9c 89       	ldd	r25, Y+20	; 0x14
     546:	28 1b       	sub	r18, r24
     548:	39 0b       	sbc	r19, r25
     54a:	3c 87       	std	Y+12, r19	; 0x0c
     54c:	2b 87       	std	Y+11, r18	; 0x0b
     54e:	ed 84       	ldd	r14, Y+13	; 0x0d
     550:	fe 84       	ldd	r15, Y+14	; 0x0e
     552:	0f 85       	ldd	r16, Y+15	; 0x0f
     554:	18 89       	ldd	r17, Y+16	; 0x10
     556:	ad 88       	ldd	r10, Y+21	; 0x15
     558:	be 88       	ldd	r11, Y+22	; 0x16
     55a:	cf 88       	ldd	r12, Y+23	; 0x17
     55c:	d8 8c       	ldd	r13, Y+24	; 0x18
     55e:	ea 14       	cp	r14, r10
     560:	fb 04       	cpc	r15, r11
     562:	0c 05       	cpc	r16, r12
     564:	1d 05       	cpc	r17, r13
     566:	40 f4       	brcc	.+16     	; 0x578 <__divsf3+0xc2>
     568:	ee 0c       	add	r14, r14
     56a:	ff 1c       	adc	r15, r15
     56c:	00 1f       	adc	r16, r16
     56e:	11 1f       	adc	r17, r17
     570:	21 50       	subi	r18, 0x01	; 1
     572:	30 40       	sbci	r19, 0x00	; 0
     574:	3c 87       	std	Y+12, r19	; 0x0c
     576:	2b 87       	std	Y+11, r18	; 0x0b
     578:	20 e0       	ldi	r18, 0x00	; 0
     57a:	30 e0       	ldi	r19, 0x00	; 0
     57c:	40 e0       	ldi	r20, 0x00	; 0
     57e:	50 e0       	ldi	r21, 0x00	; 0
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e4       	ldi	r27, 0x40	; 64
     588:	60 e0       	ldi	r22, 0x00	; 0
     58a:	70 e0       	ldi	r23, 0x00	; 0
     58c:	ea 14       	cp	r14, r10
     58e:	fb 04       	cpc	r15, r11
     590:	0c 05       	cpc	r16, r12
     592:	1d 05       	cpc	r17, r13
     594:	40 f0       	brcs	.+16     	; 0x5a6 <__divsf3+0xf0>
     596:	28 2b       	or	r18, r24
     598:	39 2b       	or	r19, r25
     59a:	4a 2b       	or	r20, r26
     59c:	5b 2b       	or	r21, r27
     59e:	ea 18       	sub	r14, r10
     5a0:	fb 08       	sbc	r15, r11
     5a2:	0c 09       	sbc	r16, r12
     5a4:	1d 09       	sbc	r17, r13
     5a6:	b6 95       	lsr	r27
     5a8:	a7 95       	ror	r26
     5aa:	97 95       	ror	r25
     5ac:	87 95       	ror	r24
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	6f 5f       	subi	r22, 0xFF	; 255
     5b8:	7f 4f       	sbci	r23, 0xFF	; 255
     5ba:	6f 31       	cpi	r22, 0x1F	; 31
     5bc:	71 05       	cpc	r23, r1
     5be:	31 f7       	brne	.-52     	; 0x58c <__divsf3+0xd6>
     5c0:	da 01       	movw	r26, r20
     5c2:	c9 01       	movw	r24, r18
     5c4:	8f 77       	andi	r24, 0x7F	; 127
     5c6:	90 70       	andi	r25, 0x00	; 0
     5c8:	a0 70       	andi	r26, 0x00	; 0
     5ca:	b0 70       	andi	r27, 0x00	; 0
     5cc:	80 34       	cpi	r24, 0x40	; 64
     5ce:	91 05       	cpc	r25, r1
     5d0:	a1 05       	cpc	r26, r1
     5d2:	b1 05       	cpc	r27, r1
     5d4:	61 f4       	brne	.+24     	; 0x5ee <__divsf3+0x138>
     5d6:	27 fd       	sbrc	r18, 7
     5d8:	0a c0       	rjmp	.+20     	; 0x5ee <__divsf3+0x138>
     5da:	e1 14       	cp	r14, r1
     5dc:	f1 04       	cpc	r15, r1
     5de:	01 05       	cpc	r16, r1
     5e0:	11 05       	cpc	r17, r1
     5e2:	29 f0       	breq	.+10     	; 0x5ee <__divsf3+0x138>
     5e4:	20 5c       	subi	r18, 0xC0	; 192
     5e6:	3f 4f       	sbci	r19, 0xFF	; 255
     5e8:	4f 4f       	sbci	r20, 0xFF	; 255
     5ea:	5f 4f       	sbci	r21, 0xFF	; 255
     5ec:	20 78       	andi	r18, 0x80	; 128
     5ee:	2d 87       	std	Y+13, r18	; 0x0d
     5f0:	3e 87       	std	Y+14, r19	; 0x0e
     5f2:	4f 87       	std	Y+15, r20	; 0x0f
     5f4:	58 8b       	std	Y+16, r21	; 0x10
     5f6:	be 01       	movw	r22, r28
     5f8:	67 5f       	subi	r22, 0xF7	; 247
     5fa:	7f 4f       	sbci	r23, 0xFF	; 255
     5fc:	cb 01       	movw	r24, r22
     5fe:	04 d0       	rcall	.+8      	; 0x608 <__pack_f>
     600:	68 96       	adiw	r28, 0x18	; 24
     602:	ea e0       	ldi	r30, 0x0A	; 10
     604:	0c 94 9f 20 	jmp	0x413e	; 0x413e <__epilogue_restores__+0x10>

00000608 <__pack_f>:
     608:	df 92       	push	r13
     60a:	ef 92       	push	r14
     60c:	ff 92       	push	r15
     60e:	0f 93       	push	r16
     610:	1f 93       	push	r17
     612:	fc 01       	movw	r30, r24
     614:	e4 80       	ldd	r14, Z+4	; 0x04
     616:	f5 80       	ldd	r15, Z+5	; 0x05
     618:	06 81       	ldd	r16, Z+6	; 0x06
     61a:	17 81       	ldd	r17, Z+7	; 0x07
     61c:	d1 80       	ldd	r13, Z+1	; 0x01
     61e:	80 81       	ld	r24, Z
     620:	82 30       	cpi	r24, 0x02	; 2
     622:	48 f4       	brcc	.+18     	; 0x636 <__pack_f+0x2e>
     624:	80 e0       	ldi	r24, 0x00	; 0
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	a0 e1       	ldi	r26, 0x10	; 16
     62a:	b0 e0       	ldi	r27, 0x00	; 0
     62c:	e8 2a       	or	r14, r24
     62e:	f9 2a       	or	r15, r25
     630:	0a 2b       	or	r16, r26
     632:	1b 2b       	or	r17, r27
     634:	a5 c0       	rjmp	.+330    	; 0x780 <__pack_f+0x178>
     636:	84 30       	cpi	r24, 0x04	; 4
     638:	09 f4       	brne	.+2      	; 0x63c <__pack_f+0x34>
     63a:	9f c0       	rjmp	.+318    	; 0x77a <__pack_f+0x172>
     63c:	82 30       	cpi	r24, 0x02	; 2
     63e:	21 f4       	brne	.+8      	; 0x648 <__pack_f+0x40>
     640:	ee 24       	eor	r14, r14
     642:	ff 24       	eor	r15, r15
     644:	87 01       	movw	r16, r14
     646:	05 c0       	rjmp	.+10     	; 0x652 <__pack_f+0x4a>
     648:	e1 14       	cp	r14, r1
     64a:	f1 04       	cpc	r15, r1
     64c:	01 05       	cpc	r16, r1
     64e:	11 05       	cpc	r17, r1
     650:	19 f4       	brne	.+6      	; 0x658 <__pack_f+0x50>
     652:	e0 e0       	ldi	r30, 0x00	; 0
     654:	f0 e0       	ldi	r31, 0x00	; 0
     656:	96 c0       	rjmp	.+300    	; 0x784 <__pack_f+0x17c>
     658:	62 81       	ldd	r22, Z+2	; 0x02
     65a:	73 81       	ldd	r23, Z+3	; 0x03
     65c:	9f ef       	ldi	r25, 0xFF	; 255
     65e:	62 38       	cpi	r22, 0x82	; 130
     660:	79 07       	cpc	r23, r25
     662:	0c f0       	brlt	.+2      	; 0x666 <__pack_f+0x5e>
     664:	5b c0       	rjmp	.+182    	; 0x71c <__pack_f+0x114>
     666:	22 e8       	ldi	r18, 0x82	; 130
     668:	3f ef       	ldi	r19, 0xFF	; 255
     66a:	26 1b       	sub	r18, r22
     66c:	37 0b       	sbc	r19, r23
     66e:	2a 31       	cpi	r18, 0x1A	; 26
     670:	31 05       	cpc	r19, r1
     672:	2c f0       	brlt	.+10     	; 0x67e <__pack_f+0x76>
     674:	20 e0       	ldi	r18, 0x00	; 0
     676:	30 e0       	ldi	r19, 0x00	; 0
     678:	40 e0       	ldi	r20, 0x00	; 0
     67a:	50 e0       	ldi	r21, 0x00	; 0
     67c:	2a c0       	rjmp	.+84     	; 0x6d2 <__pack_f+0xca>
     67e:	b8 01       	movw	r22, r16
     680:	a7 01       	movw	r20, r14
     682:	02 2e       	mov	r0, r18
     684:	04 c0       	rjmp	.+8      	; 0x68e <__pack_f+0x86>
     686:	76 95       	lsr	r23
     688:	67 95       	ror	r22
     68a:	57 95       	ror	r21
     68c:	47 95       	ror	r20
     68e:	0a 94       	dec	r0
     690:	d2 f7       	brpl	.-12     	; 0x686 <__pack_f+0x7e>
     692:	81 e0       	ldi	r24, 0x01	; 1
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	a0 e0       	ldi	r26, 0x00	; 0
     698:	b0 e0       	ldi	r27, 0x00	; 0
     69a:	04 c0       	rjmp	.+8      	; 0x6a4 <__pack_f+0x9c>
     69c:	88 0f       	add	r24, r24
     69e:	99 1f       	adc	r25, r25
     6a0:	aa 1f       	adc	r26, r26
     6a2:	bb 1f       	adc	r27, r27
     6a4:	2a 95       	dec	r18
     6a6:	d2 f7       	brpl	.-12     	; 0x69c <__pack_f+0x94>
     6a8:	01 97       	sbiw	r24, 0x01	; 1
     6aa:	a1 09       	sbc	r26, r1
     6ac:	b1 09       	sbc	r27, r1
     6ae:	8e 21       	and	r24, r14
     6b0:	9f 21       	and	r25, r15
     6b2:	a0 23       	and	r26, r16
     6b4:	b1 23       	and	r27, r17
     6b6:	00 97       	sbiw	r24, 0x00	; 0
     6b8:	a1 05       	cpc	r26, r1
     6ba:	b1 05       	cpc	r27, r1
     6bc:	21 f0       	breq	.+8      	; 0x6c6 <__pack_f+0xbe>
     6be:	81 e0       	ldi	r24, 0x01	; 1
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	a0 e0       	ldi	r26, 0x00	; 0
     6c4:	b0 e0       	ldi	r27, 0x00	; 0
     6c6:	9a 01       	movw	r18, r20
     6c8:	ab 01       	movw	r20, r22
     6ca:	28 2b       	or	r18, r24
     6cc:	39 2b       	or	r19, r25
     6ce:	4a 2b       	or	r20, r26
     6d0:	5b 2b       	or	r21, r27
     6d2:	da 01       	movw	r26, r20
     6d4:	c9 01       	movw	r24, r18
     6d6:	8f 77       	andi	r24, 0x7F	; 127
     6d8:	90 70       	andi	r25, 0x00	; 0
     6da:	a0 70       	andi	r26, 0x00	; 0
     6dc:	b0 70       	andi	r27, 0x00	; 0
     6de:	80 34       	cpi	r24, 0x40	; 64
     6e0:	91 05       	cpc	r25, r1
     6e2:	a1 05       	cpc	r26, r1
     6e4:	b1 05       	cpc	r27, r1
     6e6:	39 f4       	brne	.+14     	; 0x6f6 <__pack_f+0xee>
     6e8:	27 ff       	sbrs	r18, 7
     6ea:	09 c0       	rjmp	.+18     	; 0x6fe <__pack_f+0xf6>
     6ec:	20 5c       	subi	r18, 0xC0	; 192
     6ee:	3f 4f       	sbci	r19, 0xFF	; 255
     6f0:	4f 4f       	sbci	r20, 0xFF	; 255
     6f2:	5f 4f       	sbci	r21, 0xFF	; 255
     6f4:	04 c0       	rjmp	.+8      	; 0x6fe <__pack_f+0xf6>
     6f6:	21 5c       	subi	r18, 0xC1	; 193
     6f8:	3f 4f       	sbci	r19, 0xFF	; 255
     6fa:	4f 4f       	sbci	r20, 0xFF	; 255
     6fc:	5f 4f       	sbci	r21, 0xFF	; 255
     6fe:	e0 e0       	ldi	r30, 0x00	; 0
     700:	f0 e0       	ldi	r31, 0x00	; 0
     702:	20 30       	cpi	r18, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	3a 07       	cpc	r19, r26
     708:	a0 e0       	ldi	r26, 0x00	; 0
     70a:	4a 07       	cpc	r20, r26
     70c:	a0 e4       	ldi	r26, 0x40	; 64
     70e:	5a 07       	cpc	r21, r26
     710:	10 f0       	brcs	.+4      	; 0x716 <__pack_f+0x10e>
     712:	e1 e0       	ldi	r30, 0x01	; 1
     714:	f0 e0       	ldi	r31, 0x00	; 0
     716:	79 01       	movw	r14, r18
     718:	8a 01       	movw	r16, r20
     71a:	27 c0       	rjmp	.+78     	; 0x76a <__pack_f+0x162>
     71c:	60 38       	cpi	r22, 0x80	; 128
     71e:	71 05       	cpc	r23, r1
     720:	64 f5       	brge	.+88     	; 0x77a <__pack_f+0x172>
     722:	fb 01       	movw	r30, r22
     724:	e1 58       	subi	r30, 0x81	; 129
     726:	ff 4f       	sbci	r31, 0xFF	; 255
     728:	d8 01       	movw	r26, r16
     72a:	c7 01       	movw	r24, r14
     72c:	8f 77       	andi	r24, 0x7F	; 127
     72e:	90 70       	andi	r25, 0x00	; 0
     730:	a0 70       	andi	r26, 0x00	; 0
     732:	b0 70       	andi	r27, 0x00	; 0
     734:	80 34       	cpi	r24, 0x40	; 64
     736:	91 05       	cpc	r25, r1
     738:	a1 05       	cpc	r26, r1
     73a:	b1 05       	cpc	r27, r1
     73c:	39 f4       	brne	.+14     	; 0x74c <__pack_f+0x144>
     73e:	e7 fe       	sbrs	r14, 7
     740:	0d c0       	rjmp	.+26     	; 0x75c <__pack_f+0x154>
     742:	80 e4       	ldi	r24, 0x40	; 64
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	a0 e0       	ldi	r26, 0x00	; 0
     748:	b0 e0       	ldi	r27, 0x00	; 0
     74a:	04 c0       	rjmp	.+8      	; 0x754 <__pack_f+0x14c>
     74c:	8f e3       	ldi	r24, 0x3F	; 63
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	a0 e0       	ldi	r26, 0x00	; 0
     752:	b0 e0       	ldi	r27, 0x00	; 0
     754:	e8 0e       	add	r14, r24
     756:	f9 1e       	adc	r15, r25
     758:	0a 1f       	adc	r16, r26
     75a:	1b 1f       	adc	r17, r27
     75c:	17 ff       	sbrs	r17, 7
     75e:	05 c0       	rjmp	.+10     	; 0x76a <__pack_f+0x162>
     760:	16 95       	lsr	r17
     762:	07 95       	ror	r16
     764:	f7 94       	ror	r15
     766:	e7 94       	ror	r14
     768:	31 96       	adiw	r30, 0x01	; 1
     76a:	87 e0       	ldi	r24, 0x07	; 7
     76c:	16 95       	lsr	r17
     76e:	07 95       	ror	r16
     770:	f7 94       	ror	r15
     772:	e7 94       	ror	r14
     774:	8a 95       	dec	r24
     776:	d1 f7       	brne	.-12     	; 0x76c <__pack_f+0x164>
     778:	05 c0       	rjmp	.+10     	; 0x784 <__pack_f+0x17c>
     77a:	ee 24       	eor	r14, r14
     77c:	ff 24       	eor	r15, r15
     77e:	87 01       	movw	r16, r14
     780:	ef ef       	ldi	r30, 0xFF	; 255
     782:	f0 e0       	ldi	r31, 0x00	; 0
     784:	6e 2f       	mov	r22, r30
     786:	67 95       	ror	r22
     788:	66 27       	eor	r22, r22
     78a:	67 95       	ror	r22
     78c:	90 2f       	mov	r25, r16
     78e:	9f 77       	andi	r25, 0x7F	; 127
     790:	d7 94       	ror	r13
     792:	dd 24       	eor	r13, r13
     794:	d7 94       	ror	r13
     796:	8e 2f       	mov	r24, r30
     798:	86 95       	lsr	r24
     79a:	49 2f       	mov	r20, r25
     79c:	46 2b       	or	r20, r22
     79e:	58 2f       	mov	r21, r24
     7a0:	5d 29       	or	r21, r13
     7a2:	b7 01       	movw	r22, r14
     7a4:	ca 01       	movw	r24, r20
     7a6:	1f 91       	pop	r17
     7a8:	0f 91       	pop	r16
     7aa:	ff 90       	pop	r15
     7ac:	ef 90       	pop	r14
     7ae:	df 90       	pop	r13
     7b0:	08 95       	ret

000007b2 <__unpack_f>:
     7b2:	fc 01       	movw	r30, r24
     7b4:	db 01       	movw	r26, r22
     7b6:	40 81       	ld	r20, Z
     7b8:	51 81       	ldd	r21, Z+1	; 0x01
     7ba:	22 81       	ldd	r18, Z+2	; 0x02
     7bc:	62 2f       	mov	r22, r18
     7be:	6f 77       	andi	r22, 0x7F	; 127
     7c0:	70 e0       	ldi	r23, 0x00	; 0
     7c2:	22 1f       	adc	r18, r18
     7c4:	22 27       	eor	r18, r18
     7c6:	22 1f       	adc	r18, r18
     7c8:	93 81       	ldd	r25, Z+3	; 0x03
     7ca:	89 2f       	mov	r24, r25
     7cc:	88 0f       	add	r24, r24
     7ce:	82 2b       	or	r24, r18
     7d0:	28 2f       	mov	r18, r24
     7d2:	30 e0       	ldi	r19, 0x00	; 0
     7d4:	99 1f       	adc	r25, r25
     7d6:	99 27       	eor	r25, r25
     7d8:	99 1f       	adc	r25, r25
     7da:	11 96       	adiw	r26, 0x01	; 1
     7dc:	9c 93       	st	X, r25
     7de:	11 97       	sbiw	r26, 0x01	; 1
     7e0:	21 15       	cp	r18, r1
     7e2:	31 05       	cpc	r19, r1
     7e4:	a9 f5       	brne	.+106    	; 0x850 <__unpack_f+0x9e>
     7e6:	41 15       	cp	r20, r1
     7e8:	51 05       	cpc	r21, r1
     7ea:	61 05       	cpc	r22, r1
     7ec:	71 05       	cpc	r23, r1
     7ee:	11 f4       	brne	.+4      	; 0x7f4 <__unpack_f+0x42>
     7f0:	82 e0       	ldi	r24, 0x02	; 2
     7f2:	37 c0       	rjmp	.+110    	; 0x862 <__unpack_f+0xb0>
     7f4:	82 e8       	ldi	r24, 0x82	; 130
     7f6:	9f ef       	ldi	r25, 0xFF	; 255
     7f8:	13 96       	adiw	r26, 0x03	; 3
     7fa:	9c 93       	st	X, r25
     7fc:	8e 93       	st	-X, r24
     7fe:	12 97       	sbiw	r26, 0x02	; 2
     800:	9a 01       	movw	r18, r20
     802:	ab 01       	movw	r20, r22
     804:	67 e0       	ldi	r22, 0x07	; 7
     806:	22 0f       	add	r18, r18
     808:	33 1f       	adc	r19, r19
     80a:	44 1f       	adc	r20, r20
     80c:	55 1f       	adc	r21, r21
     80e:	6a 95       	dec	r22
     810:	d1 f7       	brne	.-12     	; 0x806 <__unpack_f+0x54>
     812:	83 e0       	ldi	r24, 0x03	; 3
     814:	8c 93       	st	X, r24
     816:	0d c0       	rjmp	.+26     	; 0x832 <__unpack_f+0x80>
     818:	22 0f       	add	r18, r18
     81a:	33 1f       	adc	r19, r19
     81c:	44 1f       	adc	r20, r20
     81e:	55 1f       	adc	r21, r21
     820:	12 96       	adiw	r26, 0x02	; 2
     822:	8d 91       	ld	r24, X+
     824:	9c 91       	ld	r25, X
     826:	13 97       	sbiw	r26, 0x03	; 3
     828:	01 97       	sbiw	r24, 0x01	; 1
     82a:	13 96       	adiw	r26, 0x03	; 3
     82c:	9c 93       	st	X, r25
     82e:	8e 93       	st	-X, r24
     830:	12 97       	sbiw	r26, 0x02	; 2
     832:	20 30       	cpi	r18, 0x00	; 0
     834:	80 e0       	ldi	r24, 0x00	; 0
     836:	38 07       	cpc	r19, r24
     838:	80 e0       	ldi	r24, 0x00	; 0
     83a:	48 07       	cpc	r20, r24
     83c:	80 e4       	ldi	r24, 0x40	; 64
     83e:	58 07       	cpc	r21, r24
     840:	58 f3       	brcs	.-42     	; 0x818 <__unpack_f+0x66>
     842:	14 96       	adiw	r26, 0x04	; 4
     844:	2d 93       	st	X+, r18
     846:	3d 93       	st	X+, r19
     848:	4d 93       	st	X+, r20
     84a:	5c 93       	st	X, r21
     84c:	17 97       	sbiw	r26, 0x07	; 7
     84e:	08 95       	ret
     850:	2f 3f       	cpi	r18, 0xFF	; 255
     852:	31 05       	cpc	r19, r1
     854:	79 f4       	brne	.+30     	; 0x874 <__unpack_f+0xc2>
     856:	41 15       	cp	r20, r1
     858:	51 05       	cpc	r21, r1
     85a:	61 05       	cpc	r22, r1
     85c:	71 05       	cpc	r23, r1
     85e:	19 f4       	brne	.+6      	; 0x866 <__unpack_f+0xb4>
     860:	84 e0       	ldi	r24, 0x04	; 4
     862:	8c 93       	st	X, r24
     864:	08 95       	ret
     866:	64 ff       	sbrs	r22, 4
     868:	03 c0       	rjmp	.+6      	; 0x870 <__unpack_f+0xbe>
     86a:	81 e0       	ldi	r24, 0x01	; 1
     86c:	8c 93       	st	X, r24
     86e:	12 c0       	rjmp	.+36     	; 0x894 <__unpack_f+0xe2>
     870:	1c 92       	st	X, r1
     872:	10 c0       	rjmp	.+32     	; 0x894 <__unpack_f+0xe2>
     874:	2f 57       	subi	r18, 0x7F	; 127
     876:	30 40       	sbci	r19, 0x00	; 0
     878:	13 96       	adiw	r26, 0x03	; 3
     87a:	3c 93       	st	X, r19
     87c:	2e 93       	st	-X, r18
     87e:	12 97       	sbiw	r26, 0x02	; 2
     880:	83 e0       	ldi	r24, 0x03	; 3
     882:	8c 93       	st	X, r24
     884:	87 e0       	ldi	r24, 0x07	; 7
     886:	44 0f       	add	r20, r20
     888:	55 1f       	adc	r21, r21
     88a:	66 1f       	adc	r22, r22
     88c:	77 1f       	adc	r23, r23
     88e:	8a 95       	dec	r24
     890:	d1 f7       	brne	.-12     	; 0x886 <__unpack_f+0xd4>
     892:	70 64       	ori	r23, 0x40	; 64
     894:	14 96       	adiw	r26, 0x04	; 4
     896:	4d 93       	st	X+, r20
     898:	5d 93       	st	X+, r21
     89a:	6d 93       	st	X+, r22
     89c:	7c 93       	st	X, r23
     89e:	17 97       	sbiw	r26, 0x07	; 7
     8a0:	08 95       	ret

000008a2 <TimerInit>:
}

void TimerInit(void)
{
	//Set to Normal Timer Mode using TCCR0A and TCCR0B
	TCCR0A &= ~((1<<WGM01)|(WGM00));
     8a2:	84 b5       	in	r24, 0x24	; 36
     8a4:	8d 7f       	andi	r24, 0xFD	; 253
     8a6:	84 bd       	out	0x24, r24	; 36
	TCCR0B &= ~((1<<WGM02));
     8a8:	85 b5       	in	r24, 0x25	; 37
     8aa:	87 7f       	andi	r24, 0xF7	; 247
     8ac:	85 bd       	out	0x25, r24	; 37
	
	//Set Prescaler using TCCR0B, using Clock Speed find timer speed = 1/(Clock Speed/Prescaler)
	//Prescaler = 1024
	//Timer Speed = 128 nano seconds
	//Timer Overflow Speed = 32640 nano seconds (Timer Speed * 255) - (255 since 8-bit timer)
	TCCR0B |= (1<<CS02)|(1<<CS00);
     8ae:	85 b5       	in	r24, 0x25	; 37
     8b0:	85 60       	ori	r24, 0x05	; 5
     8b2:	85 bd       	out	0x25, r24	; 37
	TCCR0B &= ~((1<<CS01));
     8b4:	85 b5       	in	r24, 0x25	; 37
     8b6:	8d 7f       	andi	r24, 0xFD	; 253
     8b8:	85 bd       	out	0x25, r24	; 37
	
	//Enable TOIE0 interrupt in the TIMSK0 register
	TIMSK0 |= (1<<TOIE0);
     8ba:	ee e6       	ldi	r30, 0x6E	; 110
     8bc:	f0 e0       	ldi	r31, 0x00	; 0
     8be:	80 81       	ld	r24, Z
     8c0:	81 60       	ori	r24, 0x01	; 1
     8c2:	80 83       	st	Z, r24
	
	//Ensure to enable global interrupts as well.
	sei();
     8c4:	78 94       	sei
}
     8c6:	08 95       	ret

000008c8 <PinChangeInit>:

void PinChangeInit(void)
{
	//Enable PCINT0 and PCINT1 (both buttons) in the PCMSK0 register
	PCMSK0 |= (1<<PCINT0);
     8c8:	eb e6       	ldi	r30, 0x6B	; 107
     8ca:	f0 e0       	ldi	r31, 0x00	; 0
     8cc:	80 81       	ld	r24, Z
     8ce:	81 60       	ori	r24, 0x01	; 1
     8d0:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT1);
     8d2:	80 81       	ld	r24, Z
     8d4:	82 60       	ori	r24, 0x02	; 2
     8d6:	80 83       	st	Z, r24

	//Enable Pin change interrupts in the Pin Change Interrupt Control Register
	PCICR |= (1<<PCIE0);
     8d8:	e8 e6       	ldi	r30, 0x68	; 104
     8da:	f0 e0       	ldi	r31, 0x00	; 0
     8dc:	80 81       	ld	r24, Z
     8de:	81 60       	ori	r24, 0x01	; 1
     8e0:	80 83       	st	Z, r24
	
	//Set the PCINT0 and PCINT1 interrupts to trigger on rising edge
	EICRA |= ((1<<ISC00)&&(1<<ISC01)&&(1<<ISC10)&&(1<<ISC11));
     8e2:	e9 e6       	ldi	r30, 0x69	; 105
     8e4:	f0 e0       	ldi	r31, 0x00	; 0
     8e6:	80 81       	ld	r24, Z
     8e8:	81 60       	ori	r24, 0x01	; 1
     8ea:	80 83       	st	Z, r24
		
	//Ensure to enable global interrupts as well.
	sei();
     8ec:	78 94       	sei
}
     8ee:	08 95       	ret

000008f0 <update_sprite>:

void update_sprite( Sprite * sprite ) {
     8f0:	ef 92       	push	r14
     8f2:	ff 92       	push	r15
     8f4:	0f 93       	push	r16
     8f6:	1f 93       	push	r17
     8f8:	cf 93       	push	r28
     8fa:	df 93       	push	r29
     8fc:	ec 01       	movw	r28, r24

	sprite->x += sprite->dx;
     8fe:	68 81       	ld	r22, Y
     900:	79 81       	ldd	r23, Y+1	; 0x01
     902:	8a 81       	ldd	r24, Y+2	; 0x02
     904:	9b 81       	ldd	r25, Y+3	; 0x03
     906:	2d 85       	ldd	r18, Y+13	; 0x0d
     908:	3e 85       	ldd	r19, Y+14	; 0x0e
     90a:	4f 85       	ldd	r20, Y+15	; 0x0f
     90c:	58 89       	ldd	r21, Y+16	; 0x10
     90e:	0e 94 21 1b 	call	0x3642	; 0x3642 <__addsf3>
     912:	7b 01       	movw	r14, r22
     914:	8c 01       	movw	r16, r24
     916:	68 83       	st	Y, r22
     918:	79 83       	std	Y+1, r23	; 0x01
     91a:	8a 83       	std	Y+2, r24	; 0x02
     91c:	9b 83       	std	Y+3, r25	; 0x03
	sprite->y += sprite->dy;
     91e:	6c 81       	ldd	r22, Y+4	; 0x04
     920:	7d 81       	ldd	r23, Y+5	; 0x05
     922:	8e 81       	ldd	r24, Y+6	; 0x06
     924:	9f 81       	ldd	r25, Y+7	; 0x07
     926:	29 89       	ldd	r18, Y+17	; 0x11
     928:	3a 89       	ldd	r19, Y+18	; 0x12
     92a:	4b 89       	ldd	r20, Y+19	; 0x13
     92c:	5c 89       	ldd	r21, Y+20	; 0x14
     92e:	0e 94 21 1b 	call	0x3642	; 0x3642 <__addsf3>
     932:	6c 83       	std	Y+4, r22	; 0x04
     934:	7d 83       	std	Y+5, r23	; 0x05
     936:	8e 83       	std	Y+6, r24	; 0x06
     938:	9f 83       	std	Y+7, r25	; 0x07
	
if ( sprite->x >= LCD_X - sprite->width){
     93a:	28 85       	ldd	r18, Y+8	; 0x08
     93c:	64 e5       	ldi	r22, 0x54	; 84
     93e:	70 e0       	ldi	r23, 0x00	; 0
     940:	62 1b       	sub	r22, r18
     942:	71 09       	sbc	r23, r1
     944:	88 27       	eor	r24, r24
     946:	77 fd       	sbrc	r23, 7
     948:	80 95       	com	r24
     94a:	98 2f       	mov	r25, r24
     94c:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__floatsisf>
     950:	9b 01       	movw	r18, r22
     952:	ac 01       	movw	r20, r24
     954:	c8 01       	movw	r24, r16
     956:	b7 01       	movw	r22, r14
     958:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__gesf2>
     95c:	88 23       	and	r24, r24
     95e:	64 f0       	brlt	.+24     	; 0x978 <update_sprite+0x88>
		sprite->x = sprite->x-1;
     960:	c8 01       	movw	r24, r16
     962:	b7 01       	movw	r22, r14
     964:	20 e0       	ldi	r18, 0x00	; 0
     966:	30 e0       	ldi	r19, 0x00	; 0
     968:	40 e8       	ldi	r20, 0x80	; 128
     96a:	5f e3       	ldi	r21, 0x3F	; 63
     96c:	0e 94 20 1b 	call	0x3640	; 0x3640 <__subsf3>
     970:	68 83       	st	Y, r22
     972:	79 83       	std	Y+1, r23	; 0x01
     974:	8a 83       	std	Y+2, r24	; 0x02
     976:	9b 83       	std	Y+3, r25	; 0x03
	}
if (sprite->x < 15 ){
     978:	e8 80       	ld	r14, Y
     97a:	f9 80       	ldd	r15, Y+1	; 0x01
     97c:	0a 81       	ldd	r16, Y+2	; 0x02
     97e:	1b 81       	ldd	r17, Y+3	; 0x03
     980:	c8 01       	movw	r24, r16
     982:	b7 01       	movw	r22, r14
     984:	20 e0       	ldi	r18, 0x00	; 0
     986:	30 e0       	ldi	r19, 0x00	; 0
     988:	40 e7       	ldi	r20, 0x70	; 112
     98a:	51 e4       	ldi	r21, 0x41	; 65
     98c:	0e 94 85 1b 	call	0x370a	; 0x370a <__cmpsf2>
     990:	88 23       	and	r24, r24
     992:	64 f4       	brge	.+24     	; 0x9ac <update_sprite+0xbc>
		sprite->x = sprite->x+1;
     994:	c8 01       	movw	r24, r16
     996:	b7 01       	movw	r22, r14
     998:	20 e0       	ldi	r18, 0x00	; 0
     99a:	30 e0       	ldi	r19, 0x00	; 0
     99c:	40 e8       	ldi	r20, 0x80	; 128
     99e:	5f e3       	ldi	r21, 0x3F	; 63
     9a0:	0e 94 21 1b 	call	0x3642	; 0x3642 <__addsf3>
     9a4:	68 83       	st	Y, r22
     9a6:	79 83       	std	Y+1, r23	; 0x01
     9a8:	8a 83       	std	Y+2, r24	; 0x02
     9aa:	9b 83       	std	Y+3, r25	; 0x03
}
		
if ( sprite->y >= LCD_Y - sprite->height){
     9ac:	ec 80       	ldd	r14, Y+4	; 0x04
     9ae:	fd 80       	ldd	r15, Y+5	; 0x05
     9b0:	0e 81       	ldd	r16, Y+6	; 0x06
     9b2:	1f 81       	ldd	r17, Y+7	; 0x07
     9b4:	29 85       	ldd	r18, Y+9	; 0x09
     9b6:	60 e3       	ldi	r22, 0x30	; 48
     9b8:	70 e0       	ldi	r23, 0x00	; 0
     9ba:	62 1b       	sub	r22, r18
     9bc:	71 09       	sbc	r23, r1
     9be:	88 27       	eor	r24, r24
     9c0:	77 fd       	sbrc	r23, 7
     9c2:	80 95       	com	r24
     9c4:	98 2f       	mov	r25, r24
     9c6:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__floatsisf>
     9ca:	9b 01       	movw	r18, r22
     9cc:	ac 01       	movw	r20, r24
     9ce:	c8 01       	movw	r24, r16
     9d0:	b7 01       	movw	r22, r14
     9d2:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__gesf2>
     9d6:	88 23       	and	r24, r24
     9d8:	64 f0       	brlt	.+24     	; 0x9f2 <update_sprite+0x102>
		sprite->y = sprite->y-1;
     9da:	c8 01       	movw	r24, r16
     9dc:	b7 01       	movw	r22, r14
     9de:	20 e0       	ldi	r18, 0x00	; 0
     9e0:	30 e0       	ldi	r19, 0x00	; 0
     9e2:	40 e8       	ldi	r20, 0x80	; 128
     9e4:	5f e3       	ldi	r21, 0x3F	; 63
     9e6:	0e 94 20 1b 	call	0x3640	; 0x3640 <__subsf3>
     9ea:	6c 83       	std	Y+4, r22	; 0x04
     9ec:	7d 83       	std	Y+5, r23	; 0x05
     9ee:	8e 83       	std	Y+6, r24	; 0x06
     9f0:	9f 83       	std	Y+7, r25	; 0x07
	}
if (sprite->y < 0){
     9f2:	ec 80       	ldd	r14, Y+4	; 0x04
     9f4:	fd 80       	ldd	r15, Y+5	; 0x05
     9f6:	0e 81       	ldd	r16, Y+6	; 0x06
     9f8:	1f 81       	ldd	r17, Y+7	; 0x07
     9fa:	c8 01       	movw	r24, r16
     9fc:	b7 01       	movw	r22, r14
     9fe:	20 e0       	ldi	r18, 0x00	; 0
     a00:	30 e0       	ldi	r19, 0x00	; 0
     a02:	40 e0       	ldi	r20, 0x00	; 0
     a04:	50 e0       	ldi	r21, 0x00	; 0
     a06:	0e 94 85 1b 	call	0x370a	; 0x370a <__cmpsf2>
     a0a:	88 23       	and	r24, r24
     a0c:	64 f4       	brge	.+24     	; 0xa26 <update_sprite+0x136>
		sprite->y = sprite->y+1;
     a0e:	c8 01       	movw	r24, r16
     a10:	b7 01       	movw	r22, r14
     a12:	20 e0       	ldi	r18, 0x00	; 0
     a14:	30 e0       	ldi	r19, 0x00	; 0
     a16:	40 e8       	ldi	r20, 0x80	; 128
     a18:	5f e3       	ldi	r21, 0x3F	; 63
     a1a:	0e 94 21 1b 	call	0x3642	; 0x3642 <__addsf3>
     a1e:	6c 83       	std	Y+4, r22	; 0x04
     a20:	7d 83       	std	Y+5, r23	; 0x05
     a22:	8e 83       	std	Y+6, r24	; 0x06
     a24:	9f 83       	std	Y+7, r25	; 0x07
}	
	if ( sprite->x <= -1){
     a26:	68 81       	ld	r22, Y
     a28:	79 81       	ldd	r23, Y+1	; 0x01
     a2a:	8a 81       	ldd	r24, Y+2	; 0x02
     a2c:	9b 81       	ldd	r25, Y+3	; 0x03
     a2e:	20 e0       	ldi	r18, 0x00	; 0
     a30:	30 e0       	ldi	r19, 0x00	; 0
     a32:	40 e8       	ldi	r20, 0x80	; 128
     a34:	5f eb       	ldi	r21, 0xBF	; 191
     a36:	0e 94 85 1b 	call	0x370a	; 0x370a <__cmpsf2>
     a3a:	18 16       	cp	r1, r24
     a3c:	44 f0       	brlt	.+16     	; 0xa4e <update_sprite+0x15e>
		sprite->x=-50;
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	a8 e4       	ldi	r26, 0x48	; 72
     a44:	b2 ec       	ldi	r27, 0xC2	; 194
     a46:	88 83       	st	Y, r24
     a48:	99 83       	std	Y+1, r25	; 0x01
     a4a:	aa 83       	std	Y+2, r26	; 0x02
     a4c:	bb 83       	std	Y+3, r27	; 0x03
	}
	if ( sprite->y <= -1){
     a4e:	6c 81       	ldd	r22, Y+4	; 0x04
     a50:	7d 81       	ldd	r23, Y+5	; 0x05
     a52:	8e 81       	ldd	r24, Y+6	; 0x06
     a54:	9f 81       	ldd	r25, Y+7	; 0x07
     a56:	20 e0       	ldi	r18, 0x00	; 0
     a58:	30 e0       	ldi	r19, 0x00	; 0
     a5a:	40 e8       	ldi	r20, 0x80	; 128
     a5c:	5f eb       	ldi	r21, 0xBF	; 191
     a5e:	0e 94 85 1b 	call	0x370a	; 0x370a <__cmpsf2>
     a62:	18 16       	cp	r1, r24
     a64:	44 f0       	brlt	.+16     	; 0xa76 <update_sprite+0x186>
		sprite->y=-50;
     a66:	80 e0       	ldi	r24, 0x00	; 0
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	a8 e4       	ldi	r26, 0x48	; 72
     a6c:	b2 ec       	ldi	r27, 0xC2	; 194
     a6e:	8c 83       	std	Y+4, r24	; 0x04
     a70:	9d 83       	std	Y+5, r25	; 0x05
     a72:	ae 83       	std	Y+6, r26	; 0x06
     a74:	bf 83       	std	Y+7, r27	; 0x07
	}
}
     a76:	df 91       	pop	r29
     a78:	cf 91       	pop	r28
     a7a:	1f 91       	pop	r17
     a7c:	0f 91       	pop	r16
     a7e:	ff 90       	pop	r15
     a80:	ef 90       	pop	r14
     a82:	08 95       	ret

00000a84 <stage_collision>:

void stage_collision( Sprite * sprite ) {
     a84:	af 92       	push	r10
     a86:	bf 92       	push	r11
     a88:	cf 92       	push	r12
     a8a:	df 92       	push	r13
     a8c:	ef 92       	push	r14
     a8e:	ff 92       	push	r15
     a90:	0f 93       	push	r16
     a92:	1f 93       	push	r17
     a94:	cf 93       	push	r28
     a96:	df 93       	push	r29
     a98:	ec 01       	movw	r28, r24
	
if ( sprite->y+1 == border1[1]){
     a9a:	ac 80       	ldd	r10, Y+4	; 0x04
     a9c:	bd 80       	ldd	r11, Y+5	; 0x05
     a9e:	ce 80       	ldd	r12, Y+6	; 0x06
     aa0:	df 80       	ldd	r13, Y+7	; 0x07
     aa2:	e0 90 1b 01 	lds	r14, 0x011B
     aa6:	f0 90 1c 01 	lds	r15, 0x011C
     aaa:	00 91 1d 01 	lds	r16, 0x011D
     aae:	10 91 1e 01 	lds	r17, 0x011E
     ab2:	c6 01       	movw	r24, r12
     ab4:	b5 01       	movw	r22, r10
     ab6:	20 e0       	ldi	r18, 0x00	; 0
     ab8:	30 e0       	ldi	r19, 0x00	; 0
     aba:	40 e8       	ldi	r20, 0x80	; 128
     abc:	5f e3       	ldi	r21, 0x3F	; 63
     abe:	0e 94 21 1b 	call	0x3642	; 0x3642 <__addsf3>
     ac2:	a8 01       	movw	r20, r16
     ac4:	97 01       	movw	r18, r14
     ac6:	0e 94 85 1b 	call	0x370a	; 0x370a <__cmpsf2>
     aca:	88 23       	and	r24, r24
     acc:	09 f0       	breq	.+2      	; 0xad0 <stage_collision+0x4c>
     ace:	42 c0       	rjmp	.+132    	; 0xb54 <__stack+0x55>
		if ((sprite->x >= border1[0]) && (sprite->x <= border1[2])){
     ad0:	e8 80       	ld	r14, Y
     ad2:	f9 80       	ldd	r15, Y+1	; 0x01
     ad4:	0a 81       	ldd	r16, Y+2	; 0x02
     ad6:	1b 81       	ldd	r17, Y+3	; 0x03
     ad8:	20 91 17 01 	lds	r18, 0x0117
     adc:	30 91 18 01 	lds	r19, 0x0118
     ae0:	40 91 19 01 	lds	r20, 0x0119
     ae4:	50 91 1a 01 	lds	r21, 0x011A
     ae8:	c8 01       	movw	r24, r16
     aea:	b7 01       	movw	r22, r14
     aec:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__gesf2>
     af0:	88 23       	and	r24, r24
     af2:	84 f1       	brlt	.+96     	; 0xb54 <__stack+0x55>
     af4:	20 91 1f 01 	lds	r18, 0x011F
     af8:	30 91 20 01 	lds	r19, 0x0120
     afc:	40 91 21 01 	lds	r20, 0x0121
     b00:	50 91 22 01 	lds	r21, 0x0122
     b04:	c8 01       	movw	r24, r16
     b06:	b7 01       	movw	r22, r14
     b08:	0e 94 85 1b 	call	0x370a	; 0x370a <__cmpsf2>
     b0c:	18 16       	cp	r1, r24
     b0e:	14 f1       	brlt	.+68     	; 0xb54 <__stack+0x55>
			if(sprite->dy > 0){
     b10:	e9 88       	ldd	r14, Y+17	; 0x11
     b12:	fa 88       	ldd	r15, Y+18	; 0x12
     b14:	0b 89       	ldd	r16, Y+19	; 0x13
     b16:	1c 89       	ldd	r17, Y+20	; 0x14
     b18:	c8 01       	movw	r24, r16
     b1a:	b7 01       	movw	r22, r14
     b1c:	20 e0       	ldi	r18, 0x00	; 0
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	40 e0       	ldi	r20, 0x00	; 0
     b22:	50 e0       	ldi	r21, 0x00	; 0
     b24:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__gesf2>
     b28:	18 16       	cp	r1, r24
     b2a:	54 f0       	brlt	.+20     	; 0xb40 <__stack+0x41>
				sprite->y = sprite->y-(sprite->dy);
			}
			else if(sprite->dy < 0){
     b2c:	c8 01       	movw	r24, r16
     b2e:	b7 01       	movw	r22, r14
     b30:	20 e0       	ldi	r18, 0x00	; 0
     b32:	30 e0       	ldi	r19, 0x00	; 0
     b34:	40 e0       	ldi	r20, 0x00	; 0
     b36:	50 e0       	ldi	r21, 0x00	; 0
     b38:	0e 94 85 1b 	call	0x370a	; 0x370a <__cmpsf2>
     b3c:	88 23       	and	r24, r24
     b3e:	54 f4       	brge	.+20     	; 0xb54 <__stack+0x55>
				sprite->y = sprite->y-(sprite->dy);
     b40:	c6 01       	movw	r24, r12
     b42:	b5 01       	movw	r22, r10
     b44:	a8 01       	movw	r20, r16
     b46:	97 01       	movw	r18, r14
     b48:	0e 94 20 1b 	call	0x3640	; 0x3640 <__subsf3>
     b4c:	6c 83       	std	Y+4, r22	; 0x04
     b4e:	7d 83       	std	Y+5, r23	; 0x05
     b50:	8e 83       	std	Y+6, r24	; 0x06
     b52:	9f 83       	std	Y+7, r25	; 0x07
			}
	}
}
if ( sprite->x+1 == border2[0]){
     b54:	a8 80       	ld	r10, Y
     b56:	b9 80       	ldd	r11, Y+1	; 0x01
     b58:	ca 80       	ldd	r12, Y+2	; 0x02
     b5a:	db 80       	ldd	r13, Y+3	; 0x03
     b5c:	e0 90 27 01 	lds	r14, 0x0127
     b60:	f0 90 28 01 	lds	r15, 0x0128
     b64:	00 91 29 01 	lds	r16, 0x0129
     b68:	10 91 2a 01 	lds	r17, 0x012A
     b6c:	c6 01       	movw	r24, r12
     b6e:	b5 01       	movw	r22, r10
     b70:	20 e0       	ldi	r18, 0x00	; 0
     b72:	30 e0       	ldi	r19, 0x00	; 0
     b74:	40 e8       	ldi	r20, 0x80	; 128
     b76:	5f e3       	ldi	r21, 0x3F	; 63
     b78:	0e 94 21 1b 	call	0x3642	; 0x3642 <__addsf3>
     b7c:	a8 01       	movw	r20, r16
     b7e:	97 01       	movw	r18, r14
     b80:	0e 94 85 1b 	call	0x370a	; 0x370a <__cmpsf2>
     b84:	88 23       	and	r24, r24
     b86:	09 f0       	breq	.+2      	; 0xb8a <__stack+0x8b>
     b88:	42 c0       	rjmp	.+132    	; 0xc0e <__stack+0x10f>
		if ((sprite->y >= border2[1]) && (sprite->y <= border2[3])){
     b8a:	ec 80       	ldd	r14, Y+4	; 0x04
     b8c:	fd 80       	ldd	r15, Y+5	; 0x05
     b8e:	0e 81       	ldd	r16, Y+6	; 0x06
     b90:	1f 81       	ldd	r17, Y+7	; 0x07
     b92:	20 91 2b 01 	lds	r18, 0x012B
     b96:	30 91 2c 01 	lds	r19, 0x012C
     b9a:	40 91 2d 01 	lds	r20, 0x012D
     b9e:	50 91 2e 01 	lds	r21, 0x012E
     ba2:	c8 01       	movw	r24, r16
     ba4:	b7 01       	movw	r22, r14
     ba6:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__gesf2>
     baa:	88 23       	and	r24, r24
     bac:	84 f1       	brlt	.+96     	; 0xc0e <__stack+0x10f>
     bae:	20 91 33 01 	lds	r18, 0x0133
     bb2:	30 91 34 01 	lds	r19, 0x0134
     bb6:	40 91 35 01 	lds	r20, 0x0135
     bba:	50 91 36 01 	lds	r21, 0x0136
     bbe:	c8 01       	movw	r24, r16
     bc0:	b7 01       	movw	r22, r14
     bc2:	0e 94 85 1b 	call	0x370a	; 0x370a <__cmpsf2>
     bc6:	18 16       	cp	r1, r24
     bc8:	14 f1       	brlt	.+68     	; 0xc0e <__stack+0x10f>
			if(sprite->dx > 0){
     bca:	ed 84       	ldd	r14, Y+13	; 0x0d
     bcc:	fe 84       	ldd	r15, Y+14	; 0x0e
     bce:	0f 85       	ldd	r16, Y+15	; 0x0f
     bd0:	18 89       	ldd	r17, Y+16	; 0x10
     bd2:	c8 01       	movw	r24, r16
     bd4:	b7 01       	movw	r22, r14
     bd6:	20 e0       	ldi	r18, 0x00	; 0
     bd8:	30 e0       	ldi	r19, 0x00	; 0
     bda:	40 e0       	ldi	r20, 0x00	; 0
     bdc:	50 e0       	ldi	r21, 0x00	; 0
     bde:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__gesf2>
     be2:	18 16       	cp	r1, r24
     be4:	54 f0       	brlt	.+20     	; 0xbfa <__stack+0xfb>
				sprite->x = sprite->x-(sprite->dx);
			}
			else if(sprite->dx < 0){
     be6:	c8 01       	movw	r24, r16
     be8:	b7 01       	movw	r22, r14
     bea:	20 e0       	ldi	r18, 0x00	; 0
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	40 e0       	ldi	r20, 0x00	; 0
     bf0:	50 e0       	ldi	r21, 0x00	; 0
     bf2:	0e 94 85 1b 	call	0x370a	; 0x370a <__cmpsf2>
     bf6:	88 23       	and	r24, r24
     bf8:	54 f4       	brge	.+20     	; 0xc0e <__stack+0x10f>
				sprite->x = sprite->x-(sprite->dx);
     bfa:	c6 01       	movw	r24, r12
     bfc:	b5 01       	movw	r22, r10
     bfe:	a8 01       	movw	r20, r16
     c00:	97 01       	movw	r18, r14
     c02:	0e 94 20 1b 	call	0x3640	; 0x3640 <__subsf3>
     c06:	68 83       	st	Y, r22
     c08:	79 83       	std	Y+1, r23	; 0x01
     c0a:	8a 83       	std	Y+2, r24	; 0x02
     c0c:	9b 83       	std	Y+3, r25	; 0x03
			}
	}
}

if ( sprite->y+1 == border3[1]){
     c0e:	ac 80       	ldd	r10, Y+4	; 0x04
     c10:	bd 80       	ldd	r11, Y+5	; 0x05
     c12:	ce 80       	ldd	r12, Y+6	; 0x06
     c14:	df 80       	ldd	r13, Y+7	; 0x07
     c16:	e0 90 3b 01 	lds	r14, 0x013B
     c1a:	f0 90 3c 01 	lds	r15, 0x013C
     c1e:	00 91 3d 01 	lds	r16, 0x013D
     c22:	10 91 3e 01 	lds	r17, 0x013E
     c26:	c6 01       	movw	r24, r12
     c28:	b5 01       	movw	r22, r10
     c2a:	20 e0       	ldi	r18, 0x00	; 0
     c2c:	30 e0       	ldi	r19, 0x00	; 0
     c2e:	40 e8       	ldi	r20, 0x80	; 128
     c30:	5f e3       	ldi	r21, 0x3F	; 63
     c32:	0e 94 21 1b 	call	0x3642	; 0x3642 <__addsf3>
     c36:	a8 01       	movw	r20, r16
     c38:	97 01       	movw	r18, r14
     c3a:	0e 94 85 1b 	call	0x370a	; 0x370a <__cmpsf2>
     c3e:	88 23       	and	r24, r24
     c40:	09 f0       	breq	.+2      	; 0xc44 <__stack+0x145>
     c42:	42 c0       	rjmp	.+132    	; 0xcc8 <__stack+0x1c9>
		if ((sprite->x >= border3[0]) && (sprite->x <= border3[2])){
     c44:	e8 80       	ld	r14, Y
     c46:	f9 80       	ldd	r15, Y+1	; 0x01
     c48:	0a 81       	ldd	r16, Y+2	; 0x02
     c4a:	1b 81       	ldd	r17, Y+3	; 0x03
     c4c:	20 91 37 01 	lds	r18, 0x0137
     c50:	30 91 38 01 	lds	r19, 0x0138
     c54:	40 91 39 01 	lds	r20, 0x0139
     c58:	50 91 3a 01 	lds	r21, 0x013A
     c5c:	c8 01       	movw	r24, r16
     c5e:	b7 01       	movw	r22, r14
     c60:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__gesf2>
     c64:	88 23       	and	r24, r24
     c66:	84 f1       	brlt	.+96     	; 0xcc8 <__stack+0x1c9>
     c68:	20 91 3f 01 	lds	r18, 0x013F
     c6c:	30 91 40 01 	lds	r19, 0x0140
     c70:	40 91 41 01 	lds	r20, 0x0141
     c74:	50 91 42 01 	lds	r21, 0x0142
     c78:	c8 01       	movw	r24, r16
     c7a:	b7 01       	movw	r22, r14
     c7c:	0e 94 85 1b 	call	0x370a	; 0x370a <__cmpsf2>
     c80:	18 16       	cp	r1, r24
     c82:	14 f1       	brlt	.+68     	; 0xcc8 <__stack+0x1c9>
			if(sprite->dy > 0){
     c84:	e9 88       	ldd	r14, Y+17	; 0x11
     c86:	fa 88       	ldd	r15, Y+18	; 0x12
     c88:	0b 89       	ldd	r16, Y+19	; 0x13
     c8a:	1c 89       	ldd	r17, Y+20	; 0x14
     c8c:	c8 01       	movw	r24, r16
     c8e:	b7 01       	movw	r22, r14
     c90:	20 e0       	ldi	r18, 0x00	; 0
     c92:	30 e0       	ldi	r19, 0x00	; 0
     c94:	40 e0       	ldi	r20, 0x00	; 0
     c96:	50 e0       	ldi	r21, 0x00	; 0
     c98:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__gesf2>
     c9c:	18 16       	cp	r1, r24
     c9e:	54 f0       	brlt	.+20     	; 0xcb4 <__stack+0x1b5>
				sprite->y = sprite->y-(sprite->dy);
			}
			else if(sprite->dy < 0){
     ca0:	c8 01       	movw	r24, r16
     ca2:	b7 01       	movw	r22, r14
     ca4:	20 e0       	ldi	r18, 0x00	; 0
     ca6:	30 e0       	ldi	r19, 0x00	; 0
     ca8:	40 e0       	ldi	r20, 0x00	; 0
     caa:	50 e0       	ldi	r21, 0x00	; 0
     cac:	0e 94 85 1b 	call	0x370a	; 0x370a <__cmpsf2>
     cb0:	88 23       	and	r24, r24
     cb2:	54 f4       	brge	.+20     	; 0xcc8 <__stack+0x1c9>
				sprite->y = sprite->y-(sprite->dy);
     cb4:	c6 01       	movw	r24, r12
     cb6:	b5 01       	movw	r22, r10
     cb8:	a8 01       	movw	r20, r16
     cba:	97 01       	movw	r18, r14
     cbc:	0e 94 20 1b 	call	0x3640	; 0x3640 <__subsf3>
     cc0:	6c 83       	std	Y+4, r22	; 0x04
     cc2:	7d 83       	std	Y+5, r23	; 0x05
     cc4:	8e 83       	std	Y+6, r24	; 0x06
     cc6:	9f 83       	std	Y+7, r25	; 0x07
			}
}
}

if ( sprite->y+1 == border4[1]){
     cc8:	ac 80       	ldd	r10, Y+4	; 0x04
     cca:	bd 80       	ldd	r11, Y+5	; 0x05
     ccc:	ce 80       	ldd	r12, Y+6	; 0x06
     cce:	df 80       	ldd	r13, Y+7	; 0x07
     cd0:	e0 90 4b 01 	lds	r14, 0x014B
     cd4:	f0 90 4c 01 	lds	r15, 0x014C
     cd8:	00 91 4d 01 	lds	r16, 0x014D
     cdc:	10 91 4e 01 	lds	r17, 0x014E
     ce0:	c6 01       	movw	r24, r12
     ce2:	b5 01       	movw	r22, r10
     ce4:	20 e0       	ldi	r18, 0x00	; 0
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	40 e8       	ldi	r20, 0x80	; 128
     cea:	5f e3       	ldi	r21, 0x3F	; 63
     cec:	0e 94 21 1b 	call	0x3642	; 0x3642 <__addsf3>
     cf0:	a8 01       	movw	r20, r16
     cf2:	97 01       	movw	r18, r14
     cf4:	0e 94 85 1b 	call	0x370a	; 0x370a <__cmpsf2>
     cf8:	88 23       	and	r24, r24
     cfa:	09 f0       	breq	.+2      	; 0xcfe <__stack+0x1ff>
     cfc:	42 c0       	rjmp	.+132    	; 0xd82 <__stack+0x283>
		if ((sprite->x >= border4[0]) && (sprite->x <= border4[2])){
     cfe:	e8 80       	ld	r14, Y
     d00:	f9 80       	ldd	r15, Y+1	; 0x01
     d02:	0a 81       	ldd	r16, Y+2	; 0x02
     d04:	1b 81       	ldd	r17, Y+3	; 0x03
     d06:	20 91 47 01 	lds	r18, 0x0147
     d0a:	30 91 48 01 	lds	r19, 0x0148
     d0e:	40 91 49 01 	lds	r20, 0x0149
     d12:	50 91 4a 01 	lds	r21, 0x014A
     d16:	c8 01       	movw	r24, r16
     d18:	b7 01       	movw	r22, r14
     d1a:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__gesf2>
     d1e:	88 23       	and	r24, r24
     d20:	84 f1       	brlt	.+96     	; 0xd82 <__stack+0x283>
     d22:	20 91 4f 01 	lds	r18, 0x014F
     d26:	30 91 50 01 	lds	r19, 0x0150
     d2a:	40 91 51 01 	lds	r20, 0x0151
     d2e:	50 91 52 01 	lds	r21, 0x0152
     d32:	c8 01       	movw	r24, r16
     d34:	b7 01       	movw	r22, r14
     d36:	0e 94 85 1b 	call	0x370a	; 0x370a <__cmpsf2>
     d3a:	18 16       	cp	r1, r24
     d3c:	14 f1       	brlt	.+68     	; 0xd82 <__stack+0x283>
			if(sprite->dy > 0){
     d3e:	e9 88       	ldd	r14, Y+17	; 0x11
     d40:	fa 88       	ldd	r15, Y+18	; 0x12
     d42:	0b 89       	ldd	r16, Y+19	; 0x13
     d44:	1c 89       	ldd	r17, Y+20	; 0x14
     d46:	c8 01       	movw	r24, r16
     d48:	b7 01       	movw	r22, r14
     d4a:	20 e0       	ldi	r18, 0x00	; 0
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	40 e0       	ldi	r20, 0x00	; 0
     d50:	50 e0       	ldi	r21, 0x00	; 0
     d52:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__gesf2>
     d56:	18 16       	cp	r1, r24
     d58:	54 f0       	brlt	.+20     	; 0xd6e <__stack+0x26f>
				sprite->y = sprite->y-(sprite->dy);
			}
			else if(sprite->dy < 0){
     d5a:	c8 01       	movw	r24, r16
     d5c:	b7 01       	movw	r22, r14
     d5e:	20 e0       	ldi	r18, 0x00	; 0
     d60:	30 e0       	ldi	r19, 0x00	; 0
     d62:	40 e0       	ldi	r20, 0x00	; 0
     d64:	50 e0       	ldi	r21, 0x00	; 0
     d66:	0e 94 85 1b 	call	0x370a	; 0x370a <__cmpsf2>
     d6a:	88 23       	and	r24, r24
     d6c:	54 f4       	brge	.+20     	; 0xd82 <__stack+0x283>
				sprite->y = sprite->y-(sprite->dy);
     d6e:	c6 01       	movw	r24, r12
     d70:	b5 01       	movw	r22, r10
     d72:	a8 01       	movw	r20, r16
     d74:	97 01       	movw	r18, r14
     d76:	0e 94 20 1b 	call	0x3640	; 0x3640 <__subsf3>
     d7a:	6c 83       	std	Y+4, r22	; 0x04
     d7c:	7d 83       	std	Y+5, r23	; 0x05
     d7e:	8e 83       	std	Y+6, r24	; 0x06
     d80:	9f 83       	std	Y+7, r25	; 0x07
			}
}
}

if ( sprite->y+1 == border5[1]){
     d82:	ac 80       	ldd	r10, Y+4	; 0x04
     d84:	bd 80       	ldd	r11, Y+5	; 0x05
     d86:	ce 80       	ldd	r12, Y+6	; 0x06
     d88:	df 80       	ldd	r13, Y+7	; 0x07
     d8a:	e0 90 5b 01 	lds	r14, 0x015B
     d8e:	f0 90 5c 01 	lds	r15, 0x015C
     d92:	00 91 5d 01 	lds	r16, 0x015D
     d96:	10 91 5e 01 	lds	r17, 0x015E
     d9a:	c6 01       	movw	r24, r12
     d9c:	b5 01       	movw	r22, r10
     d9e:	20 e0       	ldi	r18, 0x00	; 0
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	40 e8       	ldi	r20, 0x80	; 128
     da4:	5f e3       	ldi	r21, 0x3F	; 63
     da6:	0e 94 21 1b 	call	0x3642	; 0x3642 <__addsf3>
     daa:	a8 01       	movw	r20, r16
     dac:	97 01       	movw	r18, r14
     dae:	0e 94 85 1b 	call	0x370a	; 0x370a <__cmpsf2>
     db2:	88 23       	and	r24, r24
     db4:	09 f0       	breq	.+2      	; 0xdb8 <__stack+0x2b9>
     db6:	42 c0       	rjmp	.+132    	; 0xe3c <__stack+0x33d>
		if ((sprite->x >= border5[0]) && (sprite->x <= border5[2])){
     db8:	e8 80       	ld	r14, Y
     dba:	f9 80       	ldd	r15, Y+1	; 0x01
     dbc:	0a 81       	ldd	r16, Y+2	; 0x02
     dbe:	1b 81       	ldd	r17, Y+3	; 0x03
     dc0:	20 91 57 01 	lds	r18, 0x0157
     dc4:	30 91 58 01 	lds	r19, 0x0158
     dc8:	40 91 59 01 	lds	r20, 0x0159
     dcc:	50 91 5a 01 	lds	r21, 0x015A
     dd0:	c8 01       	movw	r24, r16
     dd2:	b7 01       	movw	r22, r14
     dd4:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__gesf2>
     dd8:	88 23       	and	r24, r24
     dda:	84 f1       	brlt	.+96     	; 0xe3c <__stack+0x33d>
     ddc:	20 91 5f 01 	lds	r18, 0x015F
     de0:	30 91 60 01 	lds	r19, 0x0160
     de4:	40 91 61 01 	lds	r20, 0x0161
     de8:	50 91 62 01 	lds	r21, 0x0162
     dec:	c8 01       	movw	r24, r16
     dee:	b7 01       	movw	r22, r14
     df0:	0e 94 85 1b 	call	0x370a	; 0x370a <__cmpsf2>
     df4:	18 16       	cp	r1, r24
     df6:	14 f1       	brlt	.+68     	; 0xe3c <__stack+0x33d>
			if(sprite->dy > 0){
     df8:	e9 88       	ldd	r14, Y+17	; 0x11
     dfa:	fa 88       	ldd	r15, Y+18	; 0x12
     dfc:	0b 89       	ldd	r16, Y+19	; 0x13
     dfe:	1c 89       	ldd	r17, Y+20	; 0x14
     e00:	c8 01       	movw	r24, r16
     e02:	b7 01       	movw	r22, r14
     e04:	20 e0       	ldi	r18, 0x00	; 0
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	40 e0       	ldi	r20, 0x00	; 0
     e0a:	50 e0       	ldi	r21, 0x00	; 0
     e0c:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__gesf2>
     e10:	18 16       	cp	r1, r24
     e12:	54 f0       	brlt	.+20     	; 0xe28 <__stack+0x329>
				sprite->y = sprite->y-(sprite->dy);
			}
			else if(sprite->dy < 0){
     e14:	c8 01       	movw	r24, r16
     e16:	b7 01       	movw	r22, r14
     e18:	20 e0       	ldi	r18, 0x00	; 0
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	40 e0       	ldi	r20, 0x00	; 0
     e1e:	50 e0       	ldi	r21, 0x00	; 0
     e20:	0e 94 85 1b 	call	0x370a	; 0x370a <__cmpsf2>
     e24:	88 23       	and	r24, r24
     e26:	54 f4       	brge	.+20     	; 0xe3c <__stack+0x33d>
				sprite->y = sprite->y-(sprite->dy);
     e28:	c6 01       	movw	r24, r12
     e2a:	b5 01       	movw	r22, r10
     e2c:	a8 01       	movw	r20, r16
     e2e:	97 01       	movw	r18, r14
     e30:	0e 94 20 1b 	call	0x3640	; 0x3640 <__subsf3>
     e34:	6c 83       	std	Y+4, r22	; 0x04
     e36:	7d 83       	std	Y+5, r23	; 0x05
     e38:	8e 83       	std	Y+6, r24	; 0x06
     e3a:	9f 83       	std	Y+7, r25	; 0x07
			}
		}
}

if ( sprite->y+1 == border6[1]){
     e3c:	ac 80       	ldd	r10, Y+4	; 0x04
     e3e:	bd 80       	ldd	r11, Y+5	; 0x05
     e40:	ce 80       	ldd	r12, Y+6	; 0x06
     e42:	df 80       	ldd	r13, Y+7	; 0x07
     e44:	e0 90 6b 01 	lds	r14, 0x016B
     e48:	f0 90 6c 01 	lds	r15, 0x016C
     e4c:	00 91 6d 01 	lds	r16, 0x016D
     e50:	10 91 6e 01 	lds	r17, 0x016E
     e54:	c6 01       	movw	r24, r12
     e56:	b5 01       	movw	r22, r10
     e58:	20 e0       	ldi	r18, 0x00	; 0
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	40 e8       	ldi	r20, 0x80	; 128
     e5e:	5f e3       	ldi	r21, 0x3F	; 63
     e60:	0e 94 21 1b 	call	0x3642	; 0x3642 <__addsf3>
     e64:	a8 01       	movw	r20, r16
     e66:	97 01       	movw	r18, r14
     e68:	0e 94 85 1b 	call	0x370a	; 0x370a <__cmpsf2>
     e6c:	88 23       	and	r24, r24
     e6e:	09 f0       	breq	.+2      	; 0xe72 <__stack+0x373>
     e70:	42 c0       	rjmp	.+132    	; 0xef6 <__stack+0x3f7>
		if ((sprite->x >= border6[0]) && (sprite->x <= border6[2])){
     e72:	e8 80       	ld	r14, Y
     e74:	f9 80       	ldd	r15, Y+1	; 0x01
     e76:	0a 81       	ldd	r16, Y+2	; 0x02
     e78:	1b 81       	ldd	r17, Y+3	; 0x03
     e7a:	20 91 67 01 	lds	r18, 0x0167
     e7e:	30 91 68 01 	lds	r19, 0x0168
     e82:	40 91 69 01 	lds	r20, 0x0169
     e86:	50 91 6a 01 	lds	r21, 0x016A
     e8a:	c8 01       	movw	r24, r16
     e8c:	b7 01       	movw	r22, r14
     e8e:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__gesf2>
     e92:	88 23       	and	r24, r24
     e94:	84 f1       	brlt	.+96     	; 0xef6 <__stack+0x3f7>
     e96:	20 91 6f 01 	lds	r18, 0x016F
     e9a:	30 91 70 01 	lds	r19, 0x0170
     e9e:	40 91 71 01 	lds	r20, 0x0171
     ea2:	50 91 72 01 	lds	r21, 0x0172
     ea6:	c8 01       	movw	r24, r16
     ea8:	b7 01       	movw	r22, r14
     eaa:	0e 94 85 1b 	call	0x370a	; 0x370a <__cmpsf2>
     eae:	18 16       	cp	r1, r24
     eb0:	14 f1       	brlt	.+68     	; 0xef6 <__stack+0x3f7>
			if(sprite->dy > 0){
     eb2:	e9 88       	ldd	r14, Y+17	; 0x11
     eb4:	fa 88       	ldd	r15, Y+18	; 0x12
     eb6:	0b 89       	ldd	r16, Y+19	; 0x13
     eb8:	1c 89       	ldd	r17, Y+20	; 0x14
     eba:	c8 01       	movw	r24, r16
     ebc:	b7 01       	movw	r22, r14
     ebe:	20 e0       	ldi	r18, 0x00	; 0
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	40 e0       	ldi	r20, 0x00	; 0
     ec4:	50 e0       	ldi	r21, 0x00	; 0
     ec6:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__gesf2>
     eca:	18 16       	cp	r1, r24
     ecc:	54 f0       	brlt	.+20     	; 0xee2 <__stack+0x3e3>
				sprite->y = sprite->y-(sprite->dy);
			}
			else if(sprite->dy < 0){
     ece:	c8 01       	movw	r24, r16
     ed0:	b7 01       	movw	r22, r14
     ed2:	20 e0       	ldi	r18, 0x00	; 0
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	40 e0       	ldi	r20, 0x00	; 0
     ed8:	50 e0       	ldi	r21, 0x00	; 0
     eda:	0e 94 85 1b 	call	0x370a	; 0x370a <__cmpsf2>
     ede:	88 23       	and	r24, r24
     ee0:	54 f4       	brge	.+20     	; 0xef6 <__stack+0x3f7>
				sprite->y = sprite->y-(sprite->dy);
     ee2:	c6 01       	movw	r24, r12
     ee4:	b5 01       	movw	r22, r10
     ee6:	a8 01       	movw	r20, r16
     ee8:	97 01       	movw	r18, r14
     eea:	0e 94 20 1b 	call	0x3640	; 0x3640 <__subsf3>
     eee:	6c 83       	std	Y+4, r22	; 0x04
     ef0:	7d 83       	std	Y+5, r23	; 0x05
     ef2:	8e 83       	std	Y+6, r24	; 0x06
     ef4:	9f 83       	std	Y+7, r25	; 0x07
			}
}
}

if ( sprite->y+1 == border7[1]){
     ef6:	ac 80       	ldd	r10, Y+4	; 0x04
     ef8:	bd 80       	ldd	r11, Y+5	; 0x05
     efa:	ce 80       	ldd	r12, Y+6	; 0x06
     efc:	df 80       	ldd	r13, Y+7	; 0x07
     efe:	e0 90 7b 01 	lds	r14, 0x017B
     f02:	f0 90 7c 01 	lds	r15, 0x017C
     f06:	00 91 7d 01 	lds	r16, 0x017D
     f0a:	10 91 7e 01 	lds	r17, 0x017E
     f0e:	c6 01       	movw	r24, r12
     f10:	b5 01       	movw	r22, r10
     f12:	20 e0       	ldi	r18, 0x00	; 0
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	40 e8       	ldi	r20, 0x80	; 128
     f18:	5f e3       	ldi	r21, 0x3F	; 63
     f1a:	0e 94 21 1b 	call	0x3642	; 0x3642 <__addsf3>
     f1e:	a8 01       	movw	r20, r16
     f20:	97 01       	movw	r18, r14
     f22:	0e 94 85 1b 	call	0x370a	; 0x370a <__cmpsf2>
     f26:	88 23       	and	r24, r24
     f28:	09 f0       	breq	.+2      	; 0xf2c <__stack+0x42d>
     f2a:	42 c0       	rjmp	.+132    	; 0xfb0 <__stack+0x4b1>
		if ((sprite->x >= border7[0]) && (sprite->x <= border7[2])){
     f2c:	e8 80       	ld	r14, Y
     f2e:	f9 80       	ldd	r15, Y+1	; 0x01
     f30:	0a 81       	ldd	r16, Y+2	; 0x02
     f32:	1b 81       	ldd	r17, Y+3	; 0x03
     f34:	20 91 77 01 	lds	r18, 0x0177
     f38:	30 91 78 01 	lds	r19, 0x0178
     f3c:	40 91 79 01 	lds	r20, 0x0179
     f40:	50 91 7a 01 	lds	r21, 0x017A
     f44:	c8 01       	movw	r24, r16
     f46:	b7 01       	movw	r22, r14
     f48:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__gesf2>
     f4c:	88 23       	and	r24, r24
     f4e:	84 f1       	brlt	.+96     	; 0xfb0 <__stack+0x4b1>
     f50:	20 91 7f 01 	lds	r18, 0x017F
     f54:	30 91 80 01 	lds	r19, 0x0180
     f58:	40 91 81 01 	lds	r20, 0x0181
     f5c:	50 91 82 01 	lds	r21, 0x0182
     f60:	c8 01       	movw	r24, r16
     f62:	b7 01       	movw	r22, r14
     f64:	0e 94 85 1b 	call	0x370a	; 0x370a <__cmpsf2>
     f68:	18 16       	cp	r1, r24
     f6a:	14 f1       	brlt	.+68     	; 0xfb0 <__stack+0x4b1>
			if(sprite->dy > 0){
     f6c:	e9 88       	ldd	r14, Y+17	; 0x11
     f6e:	fa 88       	ldd	r15, Y+18	; 0x12
     f70:	0b 89       	ldd	r16, Y+19	; 0x13
     f72:	1c 89       	ldd	r17, Y+20	; 0x14
     f74:	c8 01       	movw	r24, r16
     f76:	b7 01       	movw	r22, r14
     f78:	20 e0       	ldi	r18, 0x00	; 0
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	40 e0       	ldi	r20, 0x00	; 0
     f7e:	50 e0       	ldi	r21, 0x00	; 0
     f80:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__gesf2>
     f84:	18 16       	cp	r1, r24
     f86:	54 f0       	brlt	.+20     	; 0xf9c <__stack+0x49d>
				sprite->y = sprite->y-(sprite->dy);
			}
			else if(sprite->dy < 0){
     f88:	c8 01       	movw	r24, r16
     f8a:	b7 01       	movw	r22, r14
     f8c:	20 e0       	ldi	r18, 0x00	; 0
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	40 e0       	ldi	r20, 0x00	; 0
     f92:	50 e0       	ldi	r21, 0x00	; 0
     f94:	0e 94 85 1b 	call	0x370a	; 0x370a <__cmpsf2>
     f98:	88 23       	and	r24, r24
     f9a:	54 f4       	brge	.+20     	; 0xfb0 <__stack+0x4b1>
				sprite->y = sprite->y-(sprite->dy);
     f9c:	c6 01       	movw	r24, r12
     f9e:	b5 01       	movw	r22, r10
     fa0:	a8 01       	movw	r20, r16
     fa2:	97 01       	movw	r18, r14
     fa4:	0e 94 20 1b 	call	0x3640	; 0x3640 <__subsf3>
     fa8:	6c 83       	std	Y+4, r22	; 0x04
     faa:	7d 83       	std	Y+5, r23	; 0x05
     fac:	8e 83       	std	Y+6, r24	; 0x06
     fae:	9f 83       	std	Y+7, r25	; 0x07
			}
}
}
if ( sprite->y+1 == border8[1]){
     fb0:	ac 80       	ldd	r10, Y+4	; 0x04
     fb2:	bd 80       	ldd	r11, Y+5	; 0x05
     fb4:	ce 80       	ldd	r12, Y+6	; 0x06
     fb6:	df 80       	ldd	r13, Y+7	; 0x07
     fb8:	e0 90 8b 01 	lds	r14, 0x018B
     fbc:	f0 90 8c 01 	lds	r15, 0x018C
     fc0:	00 91 8d 01 	lds	r16, 0x018D
     fc4:	10 91 8e 01 	lds	r17, 0x018E
     fc8:	c6 01       	movw	r24, r12
     fca:	b5 01       	movw	r22, r10
     fcc:	20 e0       	ldi	r18, 0x00	; 0
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	40 e8       	ldi	r20, 0x80	; 128
     fd2:	5f e3       	ldi	r21, 0x3F	; 63
     fd4:	0e 94 21 1b 	call	0x3642	; 0x3642 <__addsf3>
     fd8:	a8 01       	movw	r20, r16
     fda:	97 01       	movw	r18, r14
     fdc:	0e 94 85 1b 	call	0x370a	; 0x370a <__cmpsf2>
     fe0:	88 23       	and	r24, r24
     fe2:	09 f0       	breq	.+2      	; 0xfe6 <__stack+0x4e7>
     fe4:	49 c0       	rjmp	.+146    	; 0x1078 <__stack+0x579>
		if ((sprite->x >= border8[0]) && (sprite->x <= border8[2])){
     fe6:	e8 80       	ld	r14, Y
     fe8:	f9 80       	ldd	r15, Y+1	; 0x01
     fea:	0a 81       	ldd	r16, Y+2	; 0x02
     fec:	1b 81       	ldd	r17, Y+3	; 0x03
     fee:	20 91 87 01 	lds	r18, 0x0187
     ff2:	30 91 88 01 	lds	r19, 0x0188
     ff6:	40 91 89 01 	lds	r20, 0x0189
     ffa:	50 91 8a 01 	lds	r21, 0x018A
     ffe:	c8 01       	movw	r24, r16
    1000:	b7 01       	movw	r22, r14
    1002:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__gesf2>
    1006:	88 23       	and	r24, r24
    1008:	bc f1       	brlt	.+110    	; 0x1078 <__stack+0x579>
    100a:	20 91 8f 01 	lds	r18, 0x018F
    100e:	30 91 90 01 	lds	r19, 0x0190
    1012:	40 91 91 01 	lds	r20, 0x0191
    1016:	50 91 92 01 	lds	r21, 0x0192
    101a:	c8 01       	movw	r24, r16
    101c:	b7 01       	movw	r22, r14
    101e:	0e 94 85 1b 	call	0x370a	; 0x370a <__cmpsf2>
    1022:	18 16       	cp	r1, r24
    1024:	4c f1       	brlt	.+82     	; 0x1078 <__stack+0x579>
			if(sprite->dy > 0){
    1026:	e9 88       	ldd	r14, Y+17	; 0x11
    1028:	fa 88       	ldd	r15, Y+18	; 0x12
    102a:	0b 89       	ldd	r16, Y+19	; 0x13
    102c:	1c 89       	ldd	r17, Y+20	; 0x14
    102e:	c8 01       	movw	r24, r16
    1030:	b7 01       	movw	r22, r14
    1032:	20 e0       	ldi	r18, 0x00	; 0
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	40 e0       	ldi	r20, 0x00	; 0
    1038:	50 e0       	ldi	r21, 0x00	; 0
    103a:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__gesf2>
    103e:	18 16       	cp	r1, r24
    1040:	3c f4       	brge	.+14     	; 0x1050 <__stack+0x551>
				sprite->y = sprite->y-(sprite->dy);
    1042:	c6 01       	movw	r24, r12
    1044:	b5 01       	movw	r22, r10
    1046:	a8 01       	movw	r20, r16
    1048:	97 01       	movw	r18, r14
    104a:	0e 94 20 1b 	call	0x3640	; 0x3640 <__subsf3>
    104e:	10 c0       	rjmp	.+32     	; 0x1070 <__stack+0x571>
			}
			else if(sprite->dy < 0){
    1050:	c8 01       	movw	r24, r16
    1052:	b7 01       	movw	r22, r14
    1054:	20 e0       	ldi	r18, 0x00	; 0
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	40 e0       	ldi	r20, 0x00	; 0
    105a:	50 e0       	ldi	r21, 0x00	; 0
    105c:	0e 94 85 1b 	call	0x370a	; 0x370a <__cmpsf2>
    1060:	88 23       	and	r24, r24
    1062:	54 f4       	brge	.+20     	; 0x1078 <__stack+0x579>
				sprite->y = sprite->y+(sprite->dy);
    1064:	c6 01       	movw	r24, r12
    1066:	b5 01       	movw	r22, r10
    1068:	a8 01       	movw	r20, r16
    106a:	97 01       	movw	r18, r14
    106c:	0e 94 21 1b 	call	0x3642	; 0x3642 <__addsf3>
    1070:	6c 83       	std	Y+4, r22	; 0x04
    1072:	7d 83       	std	Y+5, r23	; 0x05
    1074:	8e 83       	std	Y+6, r24	; 0x06
    1076:	9f 83       	std	Y+7, r25	; 0x07
			}
}
}
}
    1078:	df 91       	pop	r29
    107a:	cf 91       	pop	r28
    107c:	1f 91       	pop	r17
    107e:	0f 91       	pop	r16
    1080:	ff 90       	pop	r15
    1082:	ef 90       	pop	r14
    1084:	df 90       	pop	r13
    1086:	cf 90       	pop	r12
    1088:	bf 90       	pop	r11
    108a:	af 90       	pop	r10
    108c:	08 95       	ret

0000108e <z_stage_collision>:

void z_stage_collision() {
    108e:	6f 92       	push	r6
    1090:	7f 92       	push	r7
    1092:	8f 92       	push	r8
    1094:	9f 92       	push	r9
    1096:	af 92       	push	r10
    1098:	bf 92       	push	r11
    109a:	cf 92       	push	r12
    109c:	df 92       	push	r13
    109e:	ef 92       	push	r14
    10a0:	ff 92       	push	r15
    10a2:	0f 93       	push	r16
    10a4:	1f 93       	push	r17
    10a6:	cf 93       	push	r28
    10a8:	df 93       	push	r29
    10aa:	c4 e6       	ldi	r28, 0x64	; 100
    10ac:	d2 e0       	ldi	r29, 0x02	; 2
	for ( int i = 0; i < ZOMBIE_COUNT; i++ ) {
		if ( (zombies[i].y+1 > border1[1]-1) && (zombies[i].y-1 < border1[1])){
    10ae:	6c 80       	ldd	r6, Y+4	; 0x04
    10b0:	7d 80       	ldd	r7, Y+5	; 0x05
    10b2:	8e 80       	ldd	r8, Y+6	; 0x06
    10b4:	9f 80       	ldd	r9, Y+7	; 0x07
    10b6:	e0 90 1b 01 	lds	r14, 0x011B
    10ba:	f0 90 1c 01 	lds	r15, 0x011C
    10be:	00 91 1d 01 	lds	r16, 0x011D
    10c2:	10 91 1e 01 	lds	r17, 0x011E
    10c6:	c4 01       	movw	r24, r8
    10c8:	b3 01       	movw	r22, r6
    10ca:	20 e0       	ldi	r18, 0x00	; 0
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	40 e8       	ldi	r20, 0x80	; 128
    10d0:	5f e3       	ldi	r21, 0x3F	; 63
    10d2:	0e 94 21 1b 	call	0x3642	; 0x3642 <__addsf3>
    10d6:	5b 01       	movw	r10, r22
    10d8:	6c 01       	movw	r12, r24
    10da:	c8 01       	movw	r24, r16
    10dc:	b7 01       	movw	r22, r14
    10de:	20 e0       	ldi	r18, 0x00	; 0
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	40 e8       	ldi	r20, 0x80	; 128
    10e4:	5f e3       	ldi	r21, 0x3F	; 63
    10e6:	0e 94 20 1b 	call	0x3640	; 0x3640 <__subsf3>
    10ea:	9b 01       	movw	r18, r22
    10ec:	ac 01       	movw	r20, r24
    10ee:	c6 01       	movw	r24, r12
    10f0:	b5 01       	movw	r22, r10
    10f2:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__gesf2>
    10f6:	18 16       	cp	r1, r24
    10f8:	0c f0       	brlt	.+2      	; 0x10fc <z_stage_collision+0x6e>
    10fa:	3f c0       	rjmp	.+126    	; 0x117a <z_stage_collision+0xec>
    10fc:	e0 90 1b 01 	lds	r14, 0x011B
    1100:	f0 90 1c 01 	lds	r15, 0x011C
    1104:	00 91 1d 01 	lds	r16, 0x011D
    1108:	10 91 1e 01 	lds	r17, 0x011E
    110c:	c4 01       	movw	r24, r8
    110e:	b3 01       	movw	r22, r6
    1110:	20 e0       	ldi	r18, 0x00	; 0
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	40 e8       	ldi	r20, 0x80	; 128
    1116:	5f e3       	ldi	r21, 0x3F	; 63
    1118:	0e 94 20 1b 	call	0x3640	; 0x3640 <__subsf3>
    111c:	a8 01       	movw	r20, r16
    111e:	97 01       	movw	r18, r14
    1120:	0e 94 85 1b 	call	0x370a	; 0x370a <__cmpsf2>
    1124:	88 23       	and	r24, r24
    1126:	4c f5       	brge	.+82     	; 0x117a <z_stage_collision+0xec>
				if ((zombies[i].x >= border1[0]) && (zombies[i].x <= border1[2])){
    1128:	e8 80       	ld	r14, Y
    112a:	f9 80       	ldd	r15, Y+1	; 0x01
    112c:	0a 81       	ldd	r16, Y+2	; 0x02
    112e:	1b 81       	ldd	r17, Y+3	; 0x03
    1130:	20 91 17 01 	lds	r18, 0x0117
    1134:	30 91 18 01 	lds	r19, 0x0118
    1138:	40 91 19 01 	lds	r20, 0x0119
    113c:	50 91 1a 01 	lds	r21, 0x011A
    1140:	c8 01       	movw	r24, r16
    1142:	b7 01       	movw	r22, r14
    1144:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__gesf2>
    1148:	88 23       	and	r24, r24
    114a:	bc f0       	brlt	.+46     	; 0x117a <z_stage_collision+0xec>
    114c:	20 91 1f 01 	lds	r18, 0x011F
    1150:	30 91 20 01 	lds	r19, 0x0120
    1154:	40 91 21 01 	lds	r20, 0x0121
    1158:	50 91 22 01 	lds	r21, 0x0122
    115c:	c8 01       	movw	r24, r16
    115e:	b7 01       	movw	r22, r14
    1160:	0e 94 85 1b 	call	0x370a	; 0x370a <__cmpsf2>
    1164:	18 16       	cp	r1, r24
    1166:	4c f0       	brlt	.+18     	; 0x117a <z_stage_collision+0xec>
					zombies[i].dy= -zombies[i].dy;
    1168:	89 89       	ldd	r24, Y+17	; 0x11
    116a:	9a 89       	ldd	r25, Y+18	; 0x12
    116c:	ab 89       	ldd	r26, Y+19	; 0x13
    116e:	bc 89       	ldd	r27, Y+20	; 0x14
    1170:	b0 58       	subi	r27, 0x80	; 128
    1172:	89 8b       	std	Y+17, r24	; 0x11
    1174:	9a 8b       	std	Y+18, r25	; 0x12
    1176:	ab 8b       	std	Y+19, r26	; 0x13
    1178:	bc 8b       	std	Y+20, r27	; 0x14
			}
		}
		if ( (zombies[i].y+1 > border2[0]-1) && (zombies[i].y-1 < border2[0])){
    117a:	6c 80       	ldd	r6, Y+4	; 0x04
    117c:	7d 80       	ldd	r7, Y+5	; 0x05
    117e:	8e 80       	ldd	r8, Y+6	; 0x06
    1180:	9f 80       	ldd	r9, Y+7	; 0x07
    1182:	e0 90 27 01 	lds	r14, 0x0127
    1186:	f0 90 28 01 	lds	r15, 0x0128
    118a:	00 91 29 01 	lds	r16, 0x0129
    118e:	10 91 2a 01 	lds	r17, 0x012A
    1192:	c4 01       	movw	r24, r8
    1194:	b3 01       	movw	r22, r6
    1196:	20 e0       	ldi	r18, 0x00	; 0
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	40 e8       	ldi	r20, 0x80	; 128
    119c:	5f e3       	ldi	r21, 0x3F	; 63
    119e:	0e 94 21 1b 	call	0x3642	; 0x3642 <__addsf3>
    11a2:	5b 01       	movw	r10, r22
    11a4:	6c 01       	movw	r12, r24
    11a6:	c8 01       	movw	r24, r16
    11a8:	b7 01       	movw	r22, r14
    11aa:	20 e0       	ldi	r18, 0x00	; 0
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	40 e8       	ldi	r20, 0x80	; 128
    11b0:	5f e3       	ldi	r21, 0x3F	; 63
    11b2:	0e 94 20 1b 	call	0x3640	; 0x3640 <__subsf3>
    11b6:	9b 01       	movw	r18, r22
    11b8:	ac 01       	movw	r20, r24
    11ba:	c6 01       	movw	r24, r12
    11bc:	b5 01       	movw	r22, r10
    11be:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__gesf2>
    11c2:	18 16       	cp	r1, r24
    11c4:	0c f0       	brlt	.+2      	; 0x11c8 <z_stage_collision+0x13a>
    11c6:	3b c0       	rjmp	.+118    	; 0x123e <z_stage_collision+0x1b0>
    11c8:	e0 90 27 01 	lds	r14, 0x0127
    11cc:	f0 90 28 01 	lds	r15, 0x0128
    11d0:	00 91 29 01 	lds	r16, 0x0129
    11d4:	10 91 2a 01 	lds	r17, 0x012A
    11d8:	c4 01       	movw	r24, r8
    11da:	b3 01       	movw	r22, r6
    11dc:	20 e0       	ldi	r18, 0x00	; 0
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	40 e8       	ldi	r20, 0x80	; 128
    11e2:	5f e3       	ldi	r21, 0x3F	; 63
    11e4:	0e 94 20 1b 	call	0x3640	; 0x3640 <__subsf3>
    11e8:	a8 01       	movw	r20, r16
    11ea:	97 01       	movw	r18, r14
    11ec:	0e 94 85 1b 	call	0x370a	; 0x370a <__cmpsf2>
    11f0:	88 23       	and	r24, r24
    11f2:	2c f5       	brge	.+74     	; 0x123e <z_stage_collision+0x1b0>
				if ((zombies[i].y >= border2[1]) && (zombies[i].y <= border2[3])){
    11f4:	20 91 2b 01 	lds	r18, 0x012B
    11f8:	30 91 2c 01 	lds	r19, 0x012C
    11fc:	40 91 2d 01 	lds	r20, 0x012D
    1200:	50 91 2e 01 	lds	r21, 0x012E
    1204:	c4 01       	movw	r24, r8
    1206:	b3 01       	movw	r22, r6
    1208:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__gesf2>
    120c:	88 23       	and	r24, r24
    120e:	bc f0       	brlt	.+46     	; 0x123e <z_stage_collision+0x1b0>
    1210:	20 91 33 01 	lds	r18, 0x0133
    1214:	30 91 34 01 	lds	r19, 0x0134
    1218:	40 91 35 01 	lds	r20, 0x0135
    121c:	50 91 36 01 	lds	r21, 0x0136
    1220:	c4 01       	movw	r24, r8
    1222:	b3 01       	movw	r22, r6
    1224:	0e 94 85 1b 	call	0x370a	; 0x370a <__cmpsf2>
    1228:	18 16       	cp	r1, r24
    122a:	4c f0       	brlt	.+18     	; 0x123e <z_stage_collision+0x1b0>
					zombies[i].dx= -zombies[i].dx;
    122c:	8d 85       	ldd	r24, Y+13	; 0x0d
    122e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1230:	af 85       	ldd	r26, Y+15	; 0x0f
    1232:	b8 89       	ldd	r27, Y+16	; 0x10
    1234:	b0 58       	subi	r27, 0x80	; 128
    1236:	8d 87       	std	Y+13, r24	; 0x0d
    1238:	9e 87       	std	Y+14, r25	; 0x0e
    123a:	af 87       	std	Y+15, r26	; 0x0f
    123c:	b8 8b       	std	Y+16, r27	; 0x10
			}
		}

		if ( (zombies[i].y+1 > border3[1]-1) && (zombies[i].y-1 < border3[1])){
    123e:	6c 80       	ldd	r6, Y+4	; 0x04
    1240:	7d 80       	ldd	r7, Y+5	; 0x05
    1242:	8e 80       	ldd	r8, Y+6	; 0x06
    1244:	9f 80       	ldd	r9, Y+7	; 0x07
    1246:	e0 90 3b 01 	lds	r14, 0x013B
    124a:	f0 90 3c 01 	lds	r15, 0x013C
    124e:	00 91 3d 01 	lds	r16, 0x013D
    1252:	10 91 3e 01 	lds	r17, 0x013E
    1256:	c4 01       	movw	r24, r8
    1258:	b3 01       	movw	r22, r6
    125a:	20 e0       	ldi	r18, 0x00	; 0
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	40 e8       	ldi	r20, 0x80	; 128
    1260:	5f e3       	ldi	r21, 0x3F	; 63
    1262:	0e 94 21 1b 	call	0x3642	; 0x3642 <__addsf3>
    1266:	5b 01       	movw	r10, r22
    1268:	6c 01       	movw	r12, r24
    126a:	c8 01       	movw	r24, r16
    126c:	b7 01       	movw	r22, r14
    126e:	20 e0       	ldi	r18, 0x00	; 0
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	40 e8       	ldi	r20, 0x80	; 128
    1274:	5f e3       	ldi	r21, 0x3F	; 63
    1276:	0e 94 20 1b 	call	0x3640	; 0x3640 <__subsf3>
    127a:	9b 01       	movw	r18, r22
    127c:	ac 01       	movw	r20, r24
    127e:	c6 01       	movw	r24, r12
    1280:	b5 01       	movw	r22, r10
    1282:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__gesf2>
    1286:	18 16       	cp	r1, r24
    1288:	0c f0       	brlt	.+2      	; 0x128c <z_stage_collision+0x1fe>
    128a:	3f c0       	rjmp	.+126    	; 0x130a <z_stage_collision+0x27c>
    128c:	e0 90 3b 01 	lds	r14, 0x013B
    1290:	f0 90 3c 01 	lds	r15, 0x013C
    1294:	00 91 3d 01 	lds	r16, 0x013D
    1298:	10 91 3e 01 	lds	r17, 0x013E
    129c:	c4 01       	movw	r24, r8
    129e:	b3 01       	movw	r22, r6
    12a0:	20 e0       	ldi	r18, 0x00	; 0
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	40 e8       	ldi	r20, 0x80	; 128
    12a6:	5f e3       	ldi	r21, 0x3F	; 63
    12a8:	0e 94 20 1b 	call	0x3640	; 0x3640 <__subsf3>
    12ac:	a8 01       	movw	r20, r16
    12ae:	97 01       	movw	r18, r14
    12b0:	0e 94 85 1b 	call	0x370a	; 0x370a <__cmpsf2>
    12b4:	88 23       	and	r24, r24
    12b6:	4c f5       	brge	.+82     	; 0x130a <z_stage_collision+0x27c>
				if ((zombies[i].x >= border3[0]) && (zombies[i].x <= border3[2])){
    12b8:	e8 80       	ld	r14, Y
    12ba:	f9 80       	ldd	r15, Y+1	; 0x01
    12bc:	0a 81       	ldd	r16, Y+2	; 0x02
    12be:	1b 81       	ldd	r17, Y+3	; 0x03
    12c0:	20 91 37 01 	lds	r18, 0x0137
    12c4:	30 91 38 01 	lds	r19, 0x0138
    12c8:	40 91 39 01 	lds	r20, 0x0139
    12cc:	50 91 3a 01 	lds	r21, 0x013A
    12d0:	c8 01       	movw	r24, r16
    12d2:	b7 01       	movw	r22, r14
    12d4:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__gesf2>
    12d8:	88 23       	and	r24, r24
    12da:	bc f0       	brlt	.+46     	; 0x130a <z_stage_collision+0x27c>
    12dc:	20 91 3f 01 	lds	r18, 0x013F
    12e0:	30 91 40 01 	lds	r19, 0x0140
    12e4:	40 91 41 01 	lds	r20, 0x0141
    12e8:	50 91 42 01 	lds	r21, 0x0142
    12ec:	c8 01       	movw	r24, r16
    12ee:	b7 01       	movw	r22, r14
    12f0:	0e 94 85 1b 	call	0x370a	; 0x370a <__cmpsf2>
    12f4:	18 16       	cp	r1, r24
    12f6:	4c f0       	brlt	.+18     	; 0x130a <z_stage_collision+0x27c>
					zombies[i].dy= -zombies[i].dy;
    12f8:	89 89       	ldd	r24, Y+17	; 0x11
    12fa:	9a 89       	ldd	r25, Y+18	; 0x12
    12fc:	ab 89       	ldd	r26, Y+19	; 0x13
    12fe:	bc 89       	ldd	r27, Y+20	; 0x14
    1300:	b0 58       	subi	r27, 0x80	; 128
    1302:	89 8b       	std	Y+17, r24	; 0x11
    1304:	9a 8b       	std	Y+18, r25	; 0x12
    1306:	ab 8b       	std	Y+19, r26	; 0x13
    1308:	bc 8b       	std	Y+20, r27	; 0x14
		}
		}

		if ( (zombies[i].y+1 > border4[1]-1) && (zombies[i].y-1 < border4[1])){
    130a:	6c 80       	ldd	r6, Y+4	; 0x04
    130c:	7d 80       	ldd	r7, Y+5	; 0x05
    130e:	8e 80       	ldd	r8, Y+6	; 0x06
    1310:	9f 80       	ldd	r9, Y+7	; 0x07
    1312:	e0 90 4b 01 	lds	r14, 0x014B
    1316:	f0 90 4c 01 	lds	r15, 0x014C
    131a:	00 91 4d 01 	lds	r16, 0x014D
    131e:	10 91 4e 01 	lds	r17, 0x014E
    1322:	c4 01       	movw	r24, r8
    1324:	b3 01       	movw	r22, r6
    1326:	20 e0       	ldi	r18, 0x00	; 0
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	40 e8       	ldi	r20, 0x80	; 128
    132c:	5f e3       	ldi	r21, 0x3F	; 63
    132e:	0e 94 21 1b 	call	0x3642	; 0x3642 <__addsf3>
    1332:	5b 01       	movw	r10, r22
    1334:	6c 01       	movw	r12, r24
    1336:	c8 01       	movw	r24, r16
    1338:	b7 01       	movw	r22, r14
    133a:	20 e0       	ldi	r18, 0x00	; 0
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	40 e8       	ldi	r20, 0x80	; 128
    1340:	5f e3       	ldi	r21, 0x3F	; 63
    1342:	0e 94 20 1b 	call	0x3640	; 0x3640 <__subsf3>
    1346:	9b 01       	movw	r18, r22
    1348:	ac 01       	movw	r20, r24
    134a:	c6 01       	movw	r24, r12
    134c:	b5 01       	movw	r22, r10
    134e:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__gesf2>
    1352:	18 16       	cp	r1, r24
    1354:	0c f0       	brlt	.+2      	; 0x1358 <z_stage_collision+0x2ca>
    1356:	3f c0       	rjmp	.+126    	; 0x13d6 <z_stage_collision+0x348>
    1358:	e0 90 4b 01 	lds	r14, 0x014B
    135c:	f0 90 4c 01 	lds	r15, 0x014C
    1360:	00 91 4d 01 	lds	r16, 0x014D
    1364:	10 91 4e 01 	lds	r17, 0x014E
    1368:	c4 01       	movw	r24, r8
    136a:	b3 01       	movw	r22, r6
    136c:	20 e0       	ldi	r18, 0x00	; 0
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	40 e8       	ldi	r20, 0x80	; 128
    1372:	5f e3       	ldi	r21, 0x3F	; 63
    1374:	0e 94 20 1b 	call	0x3640	; 0x3640 <__subsf3>
    1378:	a8 01       	movw	r20, r16
    137a:	97 01       	movw	r18, r14
    137c:	0e 94 85 1b 	call	0x370a	; 0x370a <__cmpsf2>
    1380:	88 23       	and	r24, r24
    1382:	4c f5       	brge	.+82     	; 0x13d6 <z_stage_collision+0x348>
				if ((zombies[i].x >= border4[0]) && (zombies[i].x <= border4[2])){
    1384:	e8 80       	ld	r14, Y
    1386:	f9 80       	ldd	r15, Y+1	; 0x01
    1388:	0a 81       	ldd	r16, Y+2	; 0x02
    138a:	1b 81       	ldd	r17, Y+3	; 0x03
    138c:	20 91 47 01 	lds	r18, 0x0147
    1390:	30 91 48 01 	lds	r19, 0x0148
    1394:	40 91 49 01 	lds	r20, 0x0149
    1398:	50 91 4a 01 	lds	r21, 0x014A
    139c:	c8 01       	movw	r24, r16
    139e:	b7 01       	movw	r22, r14
    13a0:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__gesf2>
    13a4:	88 23       	and	r24, r24
    13a6:	bc f0       	brlt	.+46     	; 0x13d6 <z_stage_collision+0x348>
    13a8:	20 91 4f 01 	lds	r18, 0x014F
    13ac:	30 91 50 01 	lds	r19, 0x0150
    13b0:	40 91 51 01 	lds	r20, 0x0151
    13b4:	50 91 52 01 	lds	r21, 0x0152
    13b8:	c8 01       	movw	r24, r16
    13ba:	b7 01       	movw	r22, r14
    13bc:	0e 94 85 1b 	call	0x370a	; 0x370a <__cmpsf2>
    13c0:	18 16       	cp	r1, r24
    13c2:	4c f0       	brlt	.+18     	; 0x13d6 <z_stage_collision+0x348>
					zombies[i].dy= -zombies[i].dy;
    13c4:	89 89       	ldd	r24, Y+17	; 0x11
    13c6:	9a 89       	ldd	r25, Y+18	; 0x12
    13c8:	ab 89       	ldd	r26, Y+19	; 0x13
    13ca:	bc 89       	ldd	r27, Y+20	; 0x14
    13cc:	b0 58       	subi	r27, 0x80	; 128
    13ce:	89 8b       	std	Y+17, r24	; 0x11
    13d0:	9a 8b       	std	Y+18, r25	; 0x12
    13d2:	ab 8b       	std	Y+19, r26	; 0x13
    13d4:	bc 8b       	std	Y+20, r27	; 0x14
		}
		}

		if ( (zombies[i].y+1 > border5[1]-1) && (zombies[i].y-1 < border5[1])){
    13d6:	6c 80       	ldd	r6, Y+4	; 0x04
    13d8:	7d 80       	ldd	r7, Y+5	; 0x05
    13da:	8e 80       	ldd	r8, Y+6	; 0x06
    13dc:	9f 80       	ldd	r9, Y+7	; 0x07
    13de:	e0 90 5b 01 	lds	r14, 0x015B
    13e2:	f0 90 5c 01 	lds	r15, 0x015C
    13e6:	00 91 5d 01 	lds	r16, 0x015D
    13ea:	10 91 5e 01 	lds	r17, 0x015E
    13ee:	c4 01       	movw	r24, r8
    13f0:	b3 01       	movw	r22, r6
    13f2:	20 e0       	ldi	r18, 0x00	; 0
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	40 e8       	ldi	r20, 0x80	; 128
    13f8:	5f e3       	ldi	r21, 0x3F	; 63
    13fa:	0e 94 21 1b 	call	0x3642	; 0x3642 <__addsf3>
    13fe:	5b 01       	movw	r10, r22
    1400:	6c 01       	movw	r12, r24
    1402:	c8 01       	movw	r24, r16
    1404:	b7 01       	movw	r22, r14
    1406:	20 e0       	ldi	r18, 0x00	; 0
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	40 e8       	ldi	r20, 0x80	; 128
    140c:	5f e3       	ldi	r21, 0x3F	; 63
    140e:	0e 94 20 1b 	call	0x3640	; 0x3640 <__subsf3>
    1412:	9b 01       	movw	r18, r22
    1414:	ac 01       	movw	r20, r24
    1416:	c6 01       	movw	r24, r12
    1418:	b5 01       	movw	r22, r10
    141a:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__gesf2>
    141e:	18 16       	cp	r1, r24
    1420:	0c f0       	brlt	.+2      	; 0x1424 <z_stage_collision+0x396>
    1422:	3f c0       	rjmp	.+126    	; 0x14a2 <z_stage_collision+0x414>
    1424:	e0 90 5b 01 	lds	r14, 0x015B
    1428:	f0 90 5c 01 	lds	r15, 0x015C
    142c:	00 91 5d 01 	lds	r16, 0x015D
    1430:	10 91 5e 01 	lds	r17, 0x015E
    1434:	c4 01       	movw	r24, r8
    1436:	b3 01       	movw	r22, r6
    1438:	20 e0       	ldi	r18, 0x00	; 0
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	40 e8       	ldi	r20, 0x80	; 128
    143e:	5f e3       	ldi	r21, 0x3F	; 63
    1440:	0e 94 20 1b 	call	0x3640	; 0x3640 <__subsf3>
    1444:	a8 01       	movw	r20, r16
    1446:	97 01       	movw	r18, r14
    1448:	0e 94 85 1b 	call	0x370a	; 0x370a <__cmpsf2>
    144c:	88 23       	and	r24, r24
    144e:	4c f5       	brge	.+82     	; 0x14a2 <z_stage_collision+0x414>
				if ((zombies[i].x >= border5[0]) && (zombies[i].x <= border5[2])){
    1450:	e8 80       	ld	r14, Y
    1452:	f9 80       	ldd	r15, Y+1	; 0x01
    1454:	0a 81       	ldd	r16, Y+2	; 0x02
    1456:	1b 81       	ldd	r17, Y+3	; 0x03
    1458:	20 91 57 01 	lds	r18, 0x0157
    145c:	30 91 58 01 	lds	r19, 0x0158
    1460:	40 91 59 01 	lds	r20, 0x0159
    1464:	50 91 5a 01 	lds	r21, 0x015A
    1468:	c8 01       	movw	r24, r16
    146a:	b7 01       	movw	r22, r14
    146c:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__gesf2>
    1470:	88 23       	and	r24, r24
    1472:	bc f0       	brlt	.+46     	; 0x14a2 <z_stage_collision+0x414>
    1474:	20 91 5f 01 	lds	r18, 0x015F
    1478:	30 91 60 01 	lds	r19, 0x0160
    147c:	40 91 61 01 	lds	r20, 0x0161
    1480:	50 91 62 01 	lds	r21, 0x0162
    1484:	c8 01       	movw	r24, r16
    1486:	b7 01       	movw	r22, r14
    1488:	0e 94 85 1b 	call	0x370a	; 0x370a <__cmpsf2>
    148c:	18 16       	cp	r1, r24
    148e:	4c f0       	brlt	.+18     	; 0x14a2 <z_stage_collision+0x414>
					zombies[i].dy= -zombies[i].dy;
    1490:	89 89       	ldd	r24, Y+17	; 0x11
    1492:	9a 89       	ldd	r25, Y+18	; 0x12
    1494:	ab 89       	ldd	r26, Y+19	; 0x13
    1496:	bc 89       	ldd	r27, Y+20	; 0x14
    1498:	b0 58       	subi	r27, 0x80	; 128
    149a:	89 8b       	std	Y+17, r24	; 0x11
    149c:	9a 8b       	std	Y+18, r25	; 0x12
    149e:	ab 8b       	std	Y+19, r26	; 0x13
    14a0:	bc 8b       	std	Y+20, r27	; 0x14
				}
		}

		if ( (zombies[i].y+1 > border6[1]-1) && (zombies[i].y-1 < border6[1])){
    14a2:	6c 80       	ldd	r6, Y+4	; 0x04
    14a4:	7d 80       	ldd	r7, Y+5	; 0x05
    14a6:	8e 80       	ldd	r8, Y+6	; 0x06
    14a8:	9f 80       	ldd	r9, Y+7	; 0x07
    14aa:	e0 90 6b 01 	lds	r14, 0x016B
    14ae:	f0 90 6c 01 	lds	r15, 0x016C
    14b2:	00 91 6d 01 	lds	r16, 0x016D
    14b6:	10 91 6e 01 	lds	r17, 0x016E
    14ba:	c4 01       	movw	r24, r8
    14bc:	b3 01       	movw	r22, r6
    14be:	20 e0       	ldi	r18, 0x00	; 0
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	40 e8       	ldi	r20, 0x80	; 128
    14c4:	5f e3       	ldi	r21, 0x3F	; 63
    14c6:	0e 94 21 1b 	call	0x3642	; 0x3642 <__addsf3>
    14ca:	5b 01       	movw	r10, r22
    14cc:	6c 01       	movw	r12, r24
    14ce:	c8 01       	movw	r24, r16
    14d0:	b7 01       	movw	r22, r14
    14d2:	20 e0       	ldi	r18, 0x00	; 0
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	40 e8       	ldi	r20, 0x80	; 128
    14d8:	5f e3       	ldi	r21, 0x3F	; 63
    14da:	0e 94 20 1b 	call	0x3640	; 0x3640 <__subsf3>
    14de:	9b 01       	movw	r18, r22
    14e0:	ac 01       	movw	r20, r24
    14e2:	c6 01       	movw	r24, r12
    14e4:	b5 01       	movw	r22, r10
    14e6:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__gesf2>
    14ea:	18 16       	cp	r1, r24
    14ec:	0c f0       	brlt	.+2      	; 0x14f0 <z_stage_collision+0x462>
    14ee:	3f c0       	rjmp	.+126    	; 0x156e <z_stage_collision+0x4e0>
    14f0:	e0 90 6b 01 	lds	r14, 0x016B
    14f4:	f0 90 6c 01 	lds	r15, 0x016C
    14f8:	00 91 6d 01 	lds	r16, 0x016D
    14fc:	10 91 6e 01 	lds	r17, 0x016E
    1500:	c4 01       	movw	r24, r8
    1502:	b3 01       	movw	r22, r6
    1504:	20 e0       	ldi	r18, 0x00	; 0
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	40 e8       	ldi	r20, 0x80	; 128
    150a:	5f e3       	ldi	r21, 0x3F	; 63
    150c:	0e 94 20 1b 	call	0x3640	; 0x3640 <__subsf3>
    1510:	a8 01       	movw	r20, r16
    1512:	97 01       	movw	r18, r14
    1514:	0e 94 85 1b 	call	0x370a	; 0x370a <__cmpsf2>
    1518:	88 23       	and	r24, r24
    151a:	4c f5       	brge	.+82     	; 0x156e <z_stage_collision+0x4e0>
				if ((zombies[i].x >= border6[0]) && (zombies[i].x <= border6[2])){
    151c:	e8 80       	ld	r14, Y
    151e:	f9 80       	ldd	r15, Y+1	; 0x01
    1520:	0a 81       	ldd	r16, Y+2	; 0x02
    1522:	1b 81       	ldd	r17, Y+3	; 0x03
    1524:	20 91 67 01 	lds	r18, 0x0167
    1528:	30 91 68 01 	lds	r19, 0x0168
    152c:	40 91 69 01 	lds	r20, 0x0169
    1530:	50 91 6a 01 	lds	r21, 0x016A
    1534:	c8 01       	movw	r24, r16
    1536:	b7 01       	movw	r22, r14
    1538:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__gesf2>
    153c:	88 23       	and	r24, r24
    153e:	bc f0       	brlt	.+46     	; 0x156e <z_stage_collision+0x4e0>
    1540:	20 91 6f 01 	lds	r18, 0x016F
    1544:	30 91 70 01 	lds	r19, 0x0170
    1548:	40 91 71 01 	lds	r20, 0x0171
    154c:	50 91 72 01 	lds	r21, 0x0172
    1550:	c8 01       	movw	r24, r16
    1552:	b7 01       	movw	r22, r14
    1554:	0e 94 85 1b 	call	0x370a	; 0x370a <__cmpsf2>
    1558:	18 16       	cp	r1, r24
    155a:	4c f0       	brlt	.+18     	; 0x156e <z_stage_collision+0x4e0>
					zombies[i].dy= -zombies[i].dy;
    155c:	89 89       	ldd	r24, Y+17	; 0x11
    155e:	9a 89       	ldd	r25, Y+18	; 0x12
    1560:	ab 89       	ldd	r26, Y+19	; 0x13
    1562:	bc 89       	ldd	r27, Y+20	; 0x14
    1564:	b0 58       	subi	r27, 0x80	; 128
    1566:	89 8b       	std	Y+17, r24	; 0x11
    1568:	9a 8b       	std	Y+18, r25	; 0x12
    156a:	ab 8b       	std	Y+19, r26	; 0x13
    156c:	bc 8b       	std	Y+20, r27	; 0x14
		}
		}

		if ( (zombies[i].y+1 > border7[1]-1) && (zombies[i].y-1 < border7[1]+1)){
    156e:	6c 80       	ldd	r6, Y+4	; 0x04
    1570:	7d 80       	ldd	r7, Y+5	; 0x05
    1572:	8e 80       	ldd	r8, Y+6	; 0x06
    1574:	9f 80       	ldd	r9, Y+7	; 0x07
    1576:	e0 90 7b 01 	lds	r14, 0x017B
    157a:	f0 90 7c 01 	lds	r15, 0x017C
    157e:	00 91 7d 01 	lds	r16, 0x017D
    1582:	10 91 7e 01 	lds	r17, 0x017E
    1586:	c4 01       	movw	r24, r8
    1588:	b3 01       	movw	r22, r6
    158a:	20 e0       	ldi	r18, 0x00	; 0
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	40 e8       	ldi	r20, 0x80	; 128
    1590:	5f e3       	ldi	r21, 0x3F	; 63
    1592:	0e 94 21 1b 	call	0x3642	; 0x3642 <__addsf3>
    1596:	5b 01       	movw	r10, r22
    1598:	6c 01       	movw	r12, r24
    159a:	c8 01       	movw	r24, r16
    159c:	b7 01       	movw	r22, r14
    159e:	20 e0       	ldi	r18, 0x00	; 0
    15a0:	30 e0       	ldi	r19, 0x00	; 0
    15a2:	40 e8       	ldi	r20, 0x80	; 128
    15a4:	5f e3       	ldi	r21, 0x3F	; 63
    15a6:	0e 94 20 1b 	call	0x3640	; 0x3640 <__subsf3>
    15aa:	9b 01       	movw	r18, r22
    15ac:	ac 01       	movw	r20, r24
    15ae:	c6 01       	movw	r24, r12
    15b0:	b5 01       	movw	r22, r10
    15b2:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__gesf2>
    15b6:	18 16       	cp	r1, r24
    15b8:	0c f0       	brlt	.+2      	; 0x15bc <z_stage_collision+0x52e>
    15ba:	4b c0       	rjmp	.+150    	; 0x1652 <z_stage_collision+0x5c4>
    15bc:	e0 90 7b 01 	lds	r14, 0x017B
    15c0:	f0 90 7c 01 	lds	r15, 0x017C
    15c4:	00 91 7d 01 	lds	r16, 0x017D
    15c8:	10 91 7e 01 	lds	r17, 0x017E
    15cc:	c4 01       	movw	r24, r8
    15ce:	b3 01       	movw	r22, r6
    15d0:	20 e0       	ldi	r18, 0x00	; 0
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	40 e8       	ldi	r20, 0x80	; 128
    15d6:	5f e3       	ldi	r21, 0x3F	; 63
    15d8:	0e 94 20 1b 	call	0x3640	; 0x3640 <__subsf3>
    15dc:	5b 01       	movw	r10, r22
    15de:	6c 01       	movw	r12, r24
    15e0:	c8 01       	movw	r24, r16
    15e2:	b7 01       	movw	r22, r14
    15e4:	20 e0       	ldi	r18, 0x00	; 0
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	40 e8       	ldi	r20, 0x80	; 128
    15ea:	5f e3       	ldi	r21, 0x3F	; 63
    15ec:	0e 94 21 1b 	call	0x3642	; 0x3642 <__addsf3>
    15f0:	9b 01       	movw	r18, r22
    15f2:	ac 01       	movw	r20, r24
    15f4:	c6 01       	movw	r24, r12
    15f6:	b5 01       	movw	r22, r10
    15f8:	0e 94 85 1b 	call	0x370a	; 0x370a <__cmpsf2>
    15fc:	88 23       	and	r24, r24
    15fe:	4c f5       	brge	.+82     	; 0x1652 <z_stage_collision+0x5c4>
				if ((zombies[i].x >= border7[0]) && (zombies[i].x <= border7[2])){
    1600:	e8 80       	ld	r14, Y
    1602:	f9 80       	ldd	r15, Y+1	; 0x01
    1604:	0a 81       	ldd	r16, Y+2	; 0x02
    1606:	1b 81       	ldd	r17, Y+3	; 0x03
    1608:	20 91 77 01 	lds	r18, 0x0177
    160c:	30 91 78 01 	lds	r19, 0x0178
    1610:	40 91 79 01 	lds	r20, 0x0179
    1614:	50 91 7a 01 	lds	r21, 0x017A
    1618:	c8 01       	movw	r24, r16
    161a:	b7 01       	movw	r22, r14
    161c:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__gesf2>
    1620:	88 23       	and	r24, r24
    1622:	bc f0       	brlt	.+46     	; 0x1652 <z_stage_collision+0x5c4>
    1624:	20 91 7f 01 	lds	r18, 0x017F
    1628:	30 91 80 01 	lds	r19, 0x0180
    162c:	40 91 81 01 	lds	r20, 0x0181
    1630:	50 91 82 01 	lds	r21, 0x0182
    1634:	c8 01       	movw	r24, r16
    1636:	b7 01       	movw	r22, r14
    1638:	0e 94 85 1b 	call	0x370a	; 0x370a <__cmpsf2>
    163c:	18 16       	cp	r1, r24
    163e:	4c f0       	brlt	.+18     	; 0x1652 <z_stage_collision+0x5c4>
					zombies[i].dy= -zombies[i].dy;
    1640:	89 89       	ldd	r24, Y+17	; 0x11
    1642:	9a 89       	ldd	r25, Y+18	; 0x12
    1644:	ab 89       	ldd	r26, Y+19	; 0x13
    1646:	bc 89       	ldd	r27, Y+20	; 0x14
    1648:	b0 58       	subi	r27, 0x80	; 128
    164a:	89 8b       	std	Y+17, r24	; 0x11
    164c:	9a 8b       	std	Y+18, r25	; 0x12
    164e:	ab 8b       	std	Y+19, r26	; 0x13
    1650:	bc 8b       	std	Y+20, r27	; 0x14
		}
		}
		if ( (zombies[i].y+1 > border8[1]-1) && (zombies[i].y-1 < border8[1])){
    1652:	6c 80       	ldd	r6, Y+4	; 0x04
    1654:	7d 80       	ldd	r7, Y+5	; 0x05
    1656:	8e 80       	ldd	r8, Y+6	; 0x06
    1658:	9f 80       	ldd	r9, Y+7	; 0x07
    165a:	e0 90 8b 01 	lds	r14, 0x018B
    165e:	f0 90 8c 01 	lds	r15, 0x018C
    1662:	00 91 8d 01 	lds	r16, 0x018D
    1666:	10 91 8e 01 	lds	r17, 0x018E
    166a:	c4 01       	movw	r24, r8
    166c:	b3 01       	movw	r22, r6
    166e:	20 e0       	ldi	r18, 0x00	; 0
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	40 e8       	ldi	r20, 0x80	; 128
    1674:	5f e3       	ldi	r21, 0x3F	; 63
    1676:	0e 94 21 1b 	call	0x3642	; 0x3642 <__addsf3>
    167a:	5b 01       	movw	r10, r22
    167c:	6c 01       	movw	r12, r24
    167e:	c8 01       	movw	r24, r16
    1680:	b7 01       	movw	r22, r14
    1682:	20 e0       	ldi	r18, 0x00	; 0
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	40 e8       	ldi	r20, 0x80	; 128
    1688:	5f e3       	ldi	r21, 0x3F	; 63
    168a:	0e 94 20 1b 	call	0x3640	; 0x3640 <__subsf3>
    168e:	9b 01       	movw	r18, r22
    1690:	ac 01       	movw	r20, r24
    1692:	c6 01       	movw	r24, r12
    1694:	b5 01       	movw	r22, r10
    1696:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__gesf2>
    169a:	18 16       	cp	r1, r24
    169c:	0c f0       	brlt	.+2      	; 0x16a0 <z_stage_collision+0x612>
    169e:	3f c0       	rjmp	.+126    	; 0x171e <z_stage_collision+0x690>
    16a0:	e0 90 8b 01 	lds	r14, 0x018B
    16a4:	f0 90 8c 01 	lds	r15, 0x018C
    16a8:	00 91 8d 01 	lds	r16, 0x018D
    16ac:	10 91 8e 01 	lds	r17, 0x018E
    16b0:	c4 01       	movw	r24, r8
    16b2:	b3 01       	movw	r22, r6
    16b4:	20 e0       	ldi	r18, 0x00	; 0
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	40 e8       	ldi	r20, 0x80	; 128
    16ba:	5f e3       	ldi	r21, 0x3F	; 63
    16bc:	0e 94 20 1b 	call	0x3640	; 0x3640 <__subsf3>
    16c0:	a8 01       	movw	r20, r16
    16c2:	97 01       	movw	r18, r14
    16c4:	0e 94 85 1b 	call	0x370a	; 0x370a <__cmpsf2>
    16c8:	88 23       	and	r24, r24
    16ca:	4c f5       	brge	.+82     	; 0x171e <z_stage_collision+0x690>
				if ((zombies[i].x >= border8[0]) && (zombies[i].x <= border8[2])){
    16cc:	e8 80       	ld	r14, Y
    16ce:	f9 80       	ldd	r15, Y+1	; 0x01
    16d0:	0a 81       	ldd	r16, Y+2	; 0x02
    16d2:	1b 81       	ldd	r17, Y+3	; 0x03
    16d4:	20 91 87 01 	lds	r18, 0x0187
    16d8:	30 91 88 01 	lds	r19, 0x0188
    16dc:	40 91 89 01 	lds	r20, 0x0189
    16e0:	50 91 8a 01 	lds	r21, 0x018A
    16e4:	c8 01       	movw	r24, r16
    16e6:	b7 01       	movw	r22, r14
    16e8:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__gesf2>
    16ec:	88 23       	and	r24, r24
    16ee:	bc f0       	brlt	.+46     	; 0x171e <z_stage_collision+0x690>
    16f0:	20 91 8f 01 	lds	r18, 0x018F
    16f4:	30 91 90 01 	lds	r19, 0x0190
    16f8:	40 91 91 01 	lds	r20, 0x0191
    16fc:	50 91 92 01 	lds	r21, 0x0192
    1700:	c8 01       	movw	r24, r16
    1702:	b7 01       	movw	r22, r14
    1704:	0e 94 85 1b 	call	0x370a	; 0x370a <__cmpsf2>
    1708:	18 16       	cp	r1, r24
    170a:	4c f0       	brlt	.+18     	; 0x171e <z_stage_collision+0x690>
					zombies[i].dy= -zombies[i].dy;
    170c:	89 89       	ldd	r24, Y+17	; 0x11
    170e:	9a 89       	ldd	r25, Y+18	; 0x12
    1710:	ab 89       	ldd	r26, Y+19	; 0x13
    1712:	bc 89       	ldd	r27, Y+20	; 0x14
    1714:	b0 58       	subi	r27, 0x80	; 128
    1716:	89 8b       	std	Y+17, r24	; 0x11
    1718:	9a 8b       	std	Y+18, r25	; 0x12
    171a:	ab 8b       	std	Y+19, r26	; 0x13
    171c:	bc 8b       	std	Y+20, r27	; 0x14
    171e:	65 96       	adiw	r28, 0x15	; 21
}
}
}

void z_stage_collision() {
	for ( int i = 0; i < ZOMBIE_COUNT; i++ ) {
    1720:	83 e0       	ldi	r24, 0x03	; 3
    1722:	cc 30       	cpi	r28, 0x0C	; 12
    1724:	d8 07       	cpc	r29, r24
    1726:	09 f0       	breq	.+2      	; 0x172a <z_stage_collision+0x69c>
    1728:	c2 cc       	rjmp	.-1660   	; 0x10ae <z_stage_collision+0x20>
				if ((zombies[i].x >= border8[0]) && (zombies[i].x <= border8[2])){
					zombies[i].dy= -zombies[i].dy;
		}
		}
		}
}
    172a:	df 91       	pop	r29
    172c:	cf 91       	pop	r28
    172e:	1f 91       	pop	r17
    1730:	0f 91       	pop	r16
    1732:	ff 90       	pop	r15
    1734:	ef 90       	pop	r14
    1736:	df 90       	pop	r13
    1738:	cf 90       	pop	r12
    173a:	bf 90       	pop	r11
    173c:	af 90       	pop	r10
    173e:	9f 90       	pop	r9
    1740:	8f 90       	pop	r8
    1742:	7f 90       	pop	r7
    1744:	6f 90       	pop	r6
    1746:	08 95       	ret

00001748 <pit_collision>:
			sword.dx = sprite.dx;
			sword.dy = sprite.dy;
	}
}

void pit_collision( Sprite * sprite){
    1748:	cf 92       	push	r12
    174a:	df 92       	push	r13
    174c:	ef 92       	push	r14
    174e:	ff 92       	push	r15
    1750:	0f 93       	push	r16
    1752:	1f 93       	push	r17
    1754:	cf 93       	push	r28
    1756:	df 93       	push	r29
    1758:	ec 01       	movw	r28, r24
	
	for ( int i = pit_points[1]; i < pit_points[3]; i++ ) {
    175a:	c0 90 a5 01 	lds	r12, 0x01A5
    175e:	d0 90 a6 01 	lds	r13, 0x01A6
    1762:	38 c0       	rjmp	.+112    	; 0x17d4 <pit_collision+0x8c>
		if ( sprite->y == i){
    1764:	b6 01       	movw	r22, r12
    1766:	88 27       	eor	r24, r24
    1768:	77 fd       	sbrc	r23, 7
    176a:	80 95       	com	r24
    176c:	98 2f       	mov	r25, r24
    176e:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__floatsisf>
    1772:	9b 01       	movw	r18, r22
    1774:	ac 01       	movw	r20, r24
    1776:	6c 81       	ldd	r22, Y+4	; 0x04
    1778:	7d 81       	ldd	r23, Y+5	; 0x05
    177a:	8e 81       	ldd	r24, Y+6	; 0x06
    177c:	9f 81       	ldd	r25, Y+7	; 0x07
    177e:	0e 94 85 1b 	call	0x370a	; 0x370a <__cmpsf2>
    1782:	88 23       	and	r24, r24
    1784:	21 f5       	brne	.+72     	; 0x17ce <pit_collision+0x86>
			if ( sprite->x == ((pit_points[2]) +1)) {
    1786:	e8 80       	ld	r14, Y
    1788:	f9 80       	ldd	r15, Y+1	; 0x01
    178a:	0a 81       	ldd	r16, Y+2	; 0x02
    178c:	1b 81       	ldd	r17, Y+3	; 0x03
    178e:	60 91 a7 01 	lds	r22, 0x01A7
    1792:	70 91 a8 01 	lds	r23, 0x01A8
    1796:	6f 5f       	subi	r22, 0xFF	; 255
    1798:	7f 4f       	sbci	r23, 0xFF	; 255
    179a:	88 27       	eor	r24, r24
    179c:	77 fd       	sbrc	r23, 7
    179e:	80 95       	com	r24
    17a0:	98 2f       	mov	r25, r24
    17a2:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__floatsisf>
    17a6:	9b 01       	movw	r18, r22
    17a8:	ac 01       	movw	r20, r24
    17aa:	c8 01       	movw	r24, r16
    17ac:	b7 01       	movw	r22, r14
    17ae:	0e 94 85 1b 	call	0x370a	; 0x370a <__cmpsf2>
    17b2:	88 23       	and	r24, r24
    17b4:	61 f4       	brne	.+24     	; 0x17ce <pit_collision+0x86>
				sprite->x = sprite->x-5;
    17b6:	c8 01       	movw	r24, r16
    17b8:	b7 01       	movw	r22, r14
    17ba:	20 e0       	ldi	r18, 0x00	; 0
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	40 ea       	ldi	r20, 0xA0	; 160
    17c0:	50 e4       	ldi	r21, 0x40	; 64
    17c2:	0e 94 20 1b 	call	0x3640	; 0x3640 <__subsf3>
    17c6:	68 83       	st	Y, r22
    17c8:	79 83       	std	Y+1, r23	; 0x01
    17ca:	8a 83       	std	Y+2, r24	; 0x02
    17cc:	9b 83       	std	Y+3, r25	; 0x03
	}
}

void pit_collision( Sprite * sprite){
	
	for ( int i = pit_points[1]; i < pit_points[3]; i++ ) {
    17ce:	08 94       	sec
    17d0:	c1 1c       	adc	r12, r1
    17d2:	d1 1c       	adc	r13, r1
    17d4:	80 91 a9 01 	lds	r24, 0x01A9
    17d8:	90 91 aa 01 	lds	r25, 0x01AA
    17dc:	c8 16       	cp	r12, r24
    17de:	d9 06       	cpc	r13, r25
    17e0:	0c f2       	brlt	.-126    	; 0x1764 <pit_collision+0x1c>
			if ( sprite->x == ((pit_points[2]) +1)) {
				sprite->x = sprite->x-5;
			}
		}
	}
	for ( int i = pit_points[1]; i < pit_points[3]; i++ ) {
    17e2:	c0 90 a5 01 	lds	r12, 0x01A5
    17e6:	d0 90 a6 01 	lds	r13, 0x01A6
    17ea:	38 c0       	rjmp	.+112    	; 0x185c <pit_collision+0x114>
		if ( sprite->y == i){
    17ec:	b6 01       	movw	r22, r12
    17ee:	88 27       	eor	r24, r24
    17f0:	77 fd       	sbrc	r23, 7
    17f2:	80 95       	com	r24
    17f4:	98 2f       	mov	r25, r24
    17f6:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__floatsisf>
    17fa:	9b 01       	movw	r18, r22
    17fc:	ac 01       	movw	r20, r24
    17fe:	6c 81       	ldd	r22, Y+4	; 0x04
    1800:	7d 81       	ldd	r23, Y+5	; 0x05
    1802:	8e 81       	ldd	r24, Y+6	; 0x06
    1804:	9f 81       	ldd	r25, Y+7	; 0x07
    1806:	0e 94 85 1b 	call	0x370a	; 0x370a <__cmpsf2>
    180a:	88 23       	and	r24, r24
    180c:	21 f5       	brne	.+72     	; 0x1856 <pit_collision+0x10e>
			if ( sprite->x == ((pit_points[0]) -1)) {
    180e:	e8 80       	ld	r14, Y
    1810:	f9 80       	ldd	r15, Y+1	; 0x01
    1812:	0a 81       	ldd	r16, Y+2	; 0x02
    1814:	1b 81       	ldd	r17, Y+3	; 0x03
    1816:	60 91 a3 01 	lds	r22, 0x01A3
    181a:	70 91 a4 01 	lds	r23, 0x01A4
    181e:	61 50       	subi	r22, 0x01	; 1
    1820:	70 40       	sbci	r23, 0x00	; 0
    1822:	88 27       	eor	r24, r24
    1824:	77 fd       	sbrc	r23, 7
    1826:	80 95       	com	r24
    1828:	98 2f       	mov	r25, r24
    182a:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__floatsisf>
    182e:	9b 01       	movw	r18, r22
    1830:	ac 01       	movw	r20, r24
    1832:	c8 01       	movw	r24, r16
    1834:	b7 01       	movw	r22, r14
    1836:	0e 94 85 1b 	call	0x370a	; 0x370a <__cmpsf2>
    183a:	88 23       	and	r24, r24
    183c:	61 f4       	brne	.+24     	; 0x1856 <pit_collision+0x10e>
				sprite->x = sprite->x+5;
    183e:	c8 01       	movw	r24, r16
    1840:	b7 01       	movw	r22, r14
    1842:	20 e0       	ldi	r18, 0x00	; 0
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	40 ea       	ldi	r20, 0xA0	; 160
    1848:	50 e4       	ldi	r21, 0x40	; 64
    184a:	0e 94 21 1b 	call	0x3642	; 0x3642 <__addsf3>
    184e:	68 83       	st	Y, r22
    1850:	79 83       	std	Y+1, r23	; 0x01
    1852:	8a 83       	std	Y+2, r24	; 0x02
    1854:	9b 83       	std	Y+3, r25	; 0x03
			if ( sprite->x == ((pit_points[2]) +1)) {
				sprite->x = sprite->x-5;
			}
		}
	}
	for ( int i = pit_points[1]; i < pit_points[3]; i++ ) {
    1856:	08 94       	sec
    1858:	c1 1c       	adc	r12, r1
    185a:	d1 1c       	adc	r13, r1
    185c:	80 91 a9 01 	lds	r24, 0x01A9
    1860:	90 91 aa 01 	lds	r25, 0x01AA
    1864:	c8 16       	cp	r12, r24
    1866:	d9 06       	cpc	r13, r25
    1868:	0c f2       	brlt	.-126    	; 0x17ec <pit_collision+0xa4>
			if ( sprite->x == ((pit_points[0]) -1)) {
				sprite->x = sprite->x+5;
			}
		}
	}
	for ( int i = pit_points[0]; i < pit_points[2]; i++ ) {
    186a:	c0 90 a3 01 	lds	r12, 0x01A3
    186e:	d0 90 a4 01 	lds	r13, 0x01A4
    1872:	38 c0       	rjmp	.+112    	; 0x18e4 <pit_collision+0x19c>
		if ( sprite->x == i){
    1874:	b6 01       	movw	r22, r12
    1876:	88 27       	eor	r24, r24
    1878:	77 fd       	sbrc	r23, 7
    187a:	80 95       	com	r24
    187c:	98 2f       	mov	r25, r24
    187e:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__floatsisf>
    1882:	9b 01       	movw	r18, r22
    1884:	ac 01       	movw	r20, r24
    1886:	68 81       	ld	r22, Y
    1888:	79 81       	ldd	r23, Y+1	; 0x01
    188a:	8a 81       	ldd	r24, Y+2	; 0x02
    188c:	9b 81       	ldd	r25, Y+3	; 0x03
    188e:	0e 94 85 1b 	call	0x370a	; 0x370a <__cmpsf2>
    1892:	88 23       	and	r24, r24
    1894:	21 f5       	brne	.+72     	; 0x18de <pit_collision+0x196>
			if ( sprite->y == ((pit_points[1]) -1)) {
    1896:	ec 80       	ldd	r14, Y+4	; 0x04
    1898:	fd 80       	ldd	r15, Y+5	; 0x05
    189a:	0e 81       	ldd	r16, Y+6	; 0x06
    189c:	1f 81       	ldd	r17, Y+7	; 0x07
    189e:	60 91 a5 01 	lds	r22, 0x01A5
    18a2:	70 91 a6 01 	lds	r23, 0x01A6
    18a6:	61 50       	subi	r22, 0x01	; 1
    18a8:	70 40       	sbci	r23, 0x00	; 0
    18aa:	88 27       	eor	r24, r24
    18ac:	77 fd       	sbrc	r23, 7
    18ae:	80 95       	com	r24
    18b0:	98 2f       	mov	r25, r24
    18b2:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__floatsisf>
    18b6:	9b 01       	movw	r18, r22
    18b8:	ac 01       	movw	r20, r24
    18ba:	c8 01       	movw	r24, r16
    18bc:	b7 01       	movw	r22, r14
    18be:	0e 94 85 1b 	call	0x370a	; 0x370a <__cmpsf2>
    18c2:	88 23       	and	r24, r24
    18c4:	61 f4       	brne	.+24     	; 0x18de <pit_collision+0x196>
				sprite->y = sprite->y+5;
    18c6:	c8 01       	movw	r24, r16
    18c8:	b7 01       	movw	r22, r14
    18ca:	20 e0       	ldi	r18, 0x00	; 0
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	40 ea       	ldi	r20, 0xA0	; 160
    18d0:	50 e4       	ldi	r21, 0x40	; 64
    18d2:	0e 94 21 1b 	call	0x3642	; 0x3642 <__addsf3>
    18d6:	6c 83       	std	Y+4, r22	; 0x04
    18d8:	7d 83       	std	Y+5, r23	; 0x05
    18da:	8e 83       	std	Y+6, r24	; 0x06
    18dc:	9f 83       	std	Y+7, r25	; 0x07
			if ( sprite->x == ((pit_points[0]) -1)) {
				sprite->x = sprite->x+5;
			}
		}
	}
	for ( int i = pit_points[0]; i < pit_points[2]; i++ ) {
    18de:	08 94       	sec
    18e0:	c1 1c       	adc	r12, r1
    18e2:	d1 1c       	adc	r13, r1
    18e4:	80 91 a7 01 	lds	r24, 0x01A7
    18e8:	90 91 a8 01 	lds	r25, 0x01A8
    18ec:	c8 16       	cp	r12, r24
    18ee:	d9 06       	cpc	r13, r25
    18f0:	0c f2       	brlt	.-126    	; 0x1874 <pit_collision+0x12c>
			if ( sprite->y == ((pit_points[1]) -1)) {
				sprite->y = sprite->y+5;
			}
		}
	}
	for ( int i = pit_points[0]; i < pit_points[2]; i++ ) {
    18f2:	c0 90 a3 01 	lds	r12, 0x01A3
    18f6:	d0 90 a4 01 	lds	r13, 0x01A4
    18fa:	38 c0       	rjmp	.+112    	; 0x196c <pit_collision+0x224>
		if ( sprite->x == i){
    18fc:	b6 01       	movw	r22, r12
    18fe:	88 27       	eor	r24, r24
    1900:	77 fd       	sbrc	r23, 7
    1902:	80 95       	com	r24
    1904:	98 2f       	mov	r25, r24
    1906:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__floatsisf>
    190a:	9b 01       	movw	r18, r22
    190c:	ac 01       	movw	r20, r24
    190e:	68 81       	ld	r22, Y
    1910:	79 81       	ldd	r23, Y+1	; 0x01
    1912:	8a 81       	ldd	r24, Y+2	; 0x02
    1914:	9b 81       	ldd	r25, Y+3	; 0x03
    1916:	0e 94 85 1b 	call	0x370a	; 0x370a <__cmpsf2>
    191a:	88 23       	and	r24, r24
    191c:	21 f5       	brne	.+72     	; 0x1966 <pit_collision+0x21e>
			if ( sprite->y == ((pit_points[3]) +1)) {
    191e:	ec 80       	ldd	r14, Y+4	; 0x04
    1920:	fd 80       	ldd	r15, Y+5	; 0x05
    1922:	0e 81       	ldd	r16, Y+6	; 0x06
    1924:	1f 81       	ldd	r17, Y+7	; 0x07
    1926:	60 91 a9 01 	lds	r22, 0x01A9
    192a:	70 91 aa 01 	lds	r23, 0x01AA
    192e:	6f 5f       	subi	r22, 0xFF	; 255
    1930:	7f 4f       	sbci	r23, 0xFF	; 255
    1932:	88 27       	eor	r24, r24
    1934:	77 fd       	sbrc	r23, 7
    1936:	80 95       	com	r24
    1938:	98 2f       	mov	r25, r24
    193a:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__floatsisf>
    193e:	9b 01       	movw	r18, r22
    1940:	ac 01       	movw	r20, r24
    1942:	c8 01       	movw	r24, r16
    1944:	b7 01       	movw	r22, r14
    1946:	0e 94 85 1b 	call	0x370a	; 0x370a <__cmpsf2>
    194a:	88 23       	and	r24, r24
    194c:	61 f4       	brne	.+24     	; 0x1966 <pit_collision+0x21e>
				sprite->y = sprite->y-5;
    194e:	c8 01       	movw	r24, r16
    1950:	b7 01       	movw	r22, r14
    1952:	20 e0       	ldi	r18, 0x00	; 0
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	40 ea       	ldi	r20, 0xA0	; 160
    1958:	50 e4       	ldi	r21, 0x40	; 64
    195a:	0e 94 20 1b 	call	0x3640	; 0x3640 <__subsf3>
    195e:	6c 83       	std	Y+4, r22	; 0x04
    1960:	7d 83       	std	Y+5, r23	; 0x05
    1962:	8e 83       	std	Y+6, r24	; 0x06
    1964:	9f 83       	std	Y+7, r25	; 0x07
			if ( sprite->y == ((pit_points[1]) -1)) {
				sprite->y = sprite->y+5;
			}
		}
	}
	for ( int i = pit_points[0]; i < pit_points[2]; i++ ) {
    1966:	08 94       	sec
    1968:	c1 1c       	adc	r12, r1
    196a:	d1 1c       	adc	r13, r1
    196c:	80 91 a7 01 	lds	r24, 0x01A7
    1970:	90 91 a8 01 	lds	r25, 0x01A8
    1974:	c8 16       	cp	r12, r24
    1976:	d9 06       	cpc	r13, r25
    1978:	0c f2       	brlt	.-126    	; 0x18fc <pit_collision+0x1b4>
			if ( sprite->y == ((pit_points[3]) +1)) {
				sprite->y = sprite->y-5;
			}
		}
	}	
	if ( (sprite->x > pit_points[0]) && sprite->x < pit_points[2] ) {
    197a:	e8 80       	ld	r14, Y
    197c:	f9 80       	ldd	r15, Y+1	; 0x01
    197e:	0a 81       	ldd	r16, Y+2	; 0x02
    1980:	1b 81       	ldd	r17, Y+3	; 0x03
    1982:	60 91 a3 01 	lds	r22, 0x01A3
    1986:	70 91 a4 01 	lds	r23, 0x01A4
    198a:	88 27       	eor	r24, r24
    198c:	77 fd       	sbrc	r23, 7
    198e:	80 95       	com	r24
    1990:	98 2f       	mov	r25, r24
    1992:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__floatsisf>
    1996:	9b 01       	movw	r18, r22
    1998:	ac 01       	movw	r20, r24
    199a:	c8 01       	movw	r24, r16
    199c:	b7 01       	movw	r22, r14
    199e:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__gesf2>
    19a2:	18 16       	cp	r1, r24
    19a4:	0c f0       	brlt	.+2      	; 0x19a8 <pit_collision+0x260>
    19a6:	70 c0       	rjmp	.+224    	; 0x1a88 <pit_collision+0x340>
    19a8:	60 91 a7 01 	lds	r22, 0x01A7
    19ac:	70 91 a8 01 	lds	r23, 0x01A8
    19b0:	88 27       	eor	r24, r24
    19b2:	77 fd       	sbrc	r23, 7
    19b4:	80 95       	com	r24
    19b6:	98 2f       	mov	r25, r24
    19b8:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__floatsisf>
    19bc:	9b 01       	movw	r18, r22
    19be:	ac 01       	movw	r20, r24
    19c0:	c8 01       	movw	r24, r16
    19c2:	b7 01       	movw	r22, r14
    19c4:	0e 94 85 1b 	call	0x370a	; 0x370a <__cmpsf2>
    19c8:	88 23       	and	r24, r24
    19ca:	0c f0       	brlt	.+2      	; 0x19ce <pit_collision+0x286>
    19cc:	5d c0       	rjmp	.+186    	; 0x1a88 <pit_collision+0x340>
		if ( (sprite->y > pit_points[1]-1 && sprite->y < pit_points[1]+1)|| (sprite->y > pit_points[3]-1 && sprite->y < pit_points[3]+1) ) {
    19ce:	ec 80       	ldd	r14, Y+4	; 0x04
    19d0:	fd 80       	ldd	r15, Y+5	; 0x05
    19d2:	0e 81       	ldd	r16, Y+6	; 0x06
    19d4:	1f 81       	ldd	r17, Y+7	; 0x07
    19d6:	60 91 a5 01 	lds	r22, 0x01A5
    19da:	70 91 a6 01 	lds	r23, 0x01A6
    19de:	61 50       	subi	r22, 0x01	; 1
    19e0:	70 40       	sbci	r23, 0x00	; 0
    19e2:	88 27       	eor	r24, r24
    19e4:	77 fd       	sbrc	r23, 7
    19e6:	80 95       	com	r24
    19e8:	98 2f       	mov	r25, r24
    19ea:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__floatsisf>
    19ee:	9b 01       	movw	r18, r22
    19f0:	ac 01       	movw	r20, r24
    19f2:	c8 01       	movw	r24, r16
    19f4:	b7 01       	movw	r22, r14
    19f6:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__gesf2>
    19fa:	18 16       	cp	r1, r24
    19fc:	a4 f4       	brge	.+40     	; 0x1a26 <pit_collision+0x2de>
    19fe:	60 91 a5 01 	lds	r22, 0x01A5
    1a02:	70 91 a6 01 	lds	r23, 0x01A6
    1a06:	6f 5f       	subi	r22, 0xFF	; 255
    1a08:	7f 4f       	sbci	r23, 0xFF	; 255
    1a0a:	88 27       	eor	r24, r24
    1a0c:	77 fd       	sbrc	r23, 7
    1a0e:	80 95       	com	r24
    1a10:	98 2f       	mov	r25, r24
    1a12:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__floatsisf>
    1a16:	9b 01       	movw	r18, r22
    1a18:	ac 01       	movw	r20, r24
    1a1a:	c8 01       	movw	r24, r16
    1a1c:	b7 01       	movw	r22, r14
    1a1e:	0e 94 85 1b 	call	0x370a	; 0x370a <__cmpsf2>
    1a22:	87 fd       	sbrc	r24, 7
    1a24:	28 c0       	rjmp	.+80     	; 0x1a76 <pit_collision+0x32e>
    1a26:	60 91 a9 01 	lds	r22, 0x01A9
    1a2a:	70 91 aa 01 	lds	r23, 0x01AA
    1a2e:	61 50       	subi	r22, 0x01	; 1
    1a30:	70 40       	sbci	r23, 0x00	; 0
    1a32:	88 27       	eor	r24, r24
    1a34:	77 fd       	sbrc	r23, 7
    1a36:	80 95       	com	r24
    1a38:	98 2f       	mov	r25, r24
    1a3a:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__floatsisf>
    1a3e:	9b 01       	movw	r18, r22
    1a40:	ac 01       	movw	r20, r24
    1a42:	c8 01       	movw	r24, r16
    1a44:	b7 01       	movw	r22, r14
    1a46:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__gesf2>
    1a4a:	18 16       	cp	r1, r24
    1a4c:	ec f4       	brge	.+58     	; 0x1a88 <pit_collision+0x340>
    1a4e:	60 91 a9 01 	lds	r22, 0x01A9
    1a52:	70 91 aa 01 	lds	r23, 0x01AA
    1a56:	6f 5f       	subi	r22, 0xFF	; 255
    1a58:	7f 4f       	sbci	r23, 0xFF	; 255
    1a5a:	88 27       	eor	r24, r24
    1a5c:	77 fd       	sbrc	r23, 7
    1a5e:	80 95       	com	r24
    1a60:	98 2f       	mov	r25, r24
    1a62:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__floatsisf>
    1a66:	9b 01       	movw	r18, r22
    1a68:	ac 01       	movw	r20, r24
    1a6a:	c8 01       	movw	r24, r16
    1a6c:	b7 01       	movw	r22, r14
    1a6e:	0e 94 85 1b 	call	0x370a	; 0x370a <__cmpsf2>
    1a72:	88 23       	and	r24, r24
    1a74:	4c f4       	brge	.+18     	; 0x1a88 <pit_collision+0x340>
			sprite->dy = -sprite->dy;
    1a76:	89 89       	ldd	r24, Y+17	; 0x11
    1a78:	9a 89       	ldd	r25, Y+18	; 0x12
    1a7a:	ab 89       	ldd	r26, Y+19	; 0x13
    1a7c:	bc 89       	ldd	r27, Y+20	; 0x14
    1a7e:	b0 58       	subi	r27, 0x80	; 128
    1a80:	89 8b       	std	Y+17, r24	; 0x11
    1a82:	9a 8b       	std	Y+18, r25	; 0x12
    1a84:	ab 8b       	std	Y+19, r26	; 0x13
    1a86:	bc 8b       	std	Y+20, r27	; 0x14
	}
	}
	if ( (sprite->y > pit_points[1]) && sprite->y < pit_points[3] ) {
    1a88:	ec 80       	ldd	r14, Y+4	; 0x04
    1a8a:	fd 80       	ldd	r15, Y+5	; 0x05
    1a8c:	0e 81       	ldd	r16, Y+6	; 0x06
    1a8e:	1f 81       	ldd	r17, Y+7	; 0x07
    1a90:	60 91 a5 01 	lds	r22, 0x01A5
    1a94:	70 91 a6 01 	lds	r23, 0x01A6
    1a98:	88 27       	eor	r24, r24
    1a9a:	77 fd       	sbrc	r23, 7
    1a9c:	80 95       	com	r24
    1a9e:	98 2f       	mov	r25, r24
    1aa0:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__floatsisf>
    1aa4:	9b 01       	movw	r18, r22
    1aa6:	ac 01       	movw	r20, r24
    1aa8:	c8 01       	movw	r24, r16
    1aaa:	b7 01       	movw	r22, r14
    1aac:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__gesf2>
    1ab0:	18 16       	cp	r1, r24
    1ab2:	0c f0       	brlt	.+2      	; 0x1ab6 <pit_collision+0x36e>
    1ab4:	70 c0       	rjmp	.+224    	; 0x1b96 <pit_collision+0x44e>
    1ab6:	60 91 a9 01 	lds	r22, 0x01A9
    1aba:	70 91 aa 01 	lds	r23, 0x01AA
    1abe:	88 27       	eor	r24, r24
    1ac0:	77 fd       	sbrc	r23, 7
    1ac2:	80 95       	com	r24
    1ac4:	98 2f       	mov	r25, r24
    1ac6:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__floatsisf>
    1aca:	9b 01       	movw	r18, r22
    1acc:	ac 01       	movw	r20, r24
    1ace:	c8 01       	movw	r24, r16
    1ad0:	b7 01       	movw	r22, r14
    1ad2:	0e 94 85 1b 	call	0x370a	; 0x370a <__cmpsf2>
    1ad6:	88 23       	and	r24, r24
    1ad8:	0c f0       	brlt	.+2      	; 0x1adc <pit_collision+0x394>
    1ada:	5d c0       	rjmp	.+186    	; 0x1b96 <pit_collision+0x44e>
		if ( (sprite->x > pit_points[0]-1 && sprite->x < pit_points[0]+1)|| (sprite->x > pit_points[2]-1 && sprite->x < pit_points[2]+1) ) {
    1adc:	e8 80       	ld	r14, Y
    1ade:	f9 80       	ldd	r15, Y+1	; 0x01
    1ae0:	0a 81       	ldd	r16, Y+2	; 0x02
    1ae2:	1b 81       	ldd	r17, Y+3	; 0x03
    1ae4:	60 91 a3 01 	lds	r22, 0x01A3
    1ae8:	70 91 a4 01 	lds	r23, 0x01A4
    1aec:	61 50       	subi	r22, 0x01	; 1
    1aee:	70 40       	sbci	r23, 0x00	; 0
    1af0:	88 27       	eor	r24, r24
    1af2:	77 fd       	sbrc	r23, 7
    1af4:	80 95       	com	r24
    1af6:	98 2f       	mov	r25, r24
    1af8:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__floatsisf>
    1afc:	9b 01       	movw	r18, r22
    1afe:	ac 01       	movw	r20, r24
    1b00:	c8 01       	movw	r24, r16
    1b02:	b7 01       	movw	r22, r14
    1b04:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__gesf2>
    1b08:	18 16       	cp	r1, r24
    1b0a:	a4 f4       	brge	.+40     	; 0x1b34 <pit_collision+0x3ec>
    1b0c:	60 91 a3 01 	lds	r22, 0x01A3
    1b10:	70 91 a4 01 	lds	r23, 0x01A4
    1b14:	6f 5f       	subi	r22, 0xFF	; 255
    1b16:	7f 4f       	sbci	r23, 0xFF	; 255
    1b18:	88 27       	eor	r24, r24
    1b1a:	77 fd       	sbrc	r23, 7
    1b1c:	80 95       	com	r24
    1b1e:	98 2f       	mov	r25, r24
    1b20:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__floatsisf>
    1b24:	9b 01       	movw	r18, r22
    1b26:	ac 01       	movw	r20, r24
    1b28:	c8 01       	movw	r24, r16
    1b2a:	b7 01       	movw	r22, r14
    1b2c:	0e 94 85 1b 	call	0x370a	; 0x370a <__cmpsf2>
    1b30:	87 fd       	sbrc	r24, 7
    1b32:	28 c0       	rjmp	.+80     	; 0x1b84 <pit_collision+0x43c>
    1b34:	60 91 a7 01 	lds	r22, 0x01A7
    1b38:	70 91 a8 01 	lds	r23, 0x01A8
    1b3c:	61 50       	subi	r22, 0x01	; 1
    1b3e:	70 40       	sbci	r23, 0x00	; 0
    1b40:	88 27       	eor	r24, r24
    1b42:	77 fd       	sbrc	r23, 7
    1b44:	80 95       	com	r24
    1b46:	98 2f       	mov	r25, r24
    1b48:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__floatsisf>
    1b4c:	9b 01       	movw	r18, r22
    1b4e:	ac 01       	movw	r20, r24
    1b50:	c8 01       	movw	r24, r16
    1b52:	b7 01       	movw	r22, r14
    1b54:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__gesf2>
    1b58:	18 16       	cp	r1, r24
    1b5a:	ec f4       	brge	.+58     	; 0x1b96 <pit_collision+0x44e>
    1b5c:	60 91 a7 01 	lds	r22, 0x01A7
    1b60:	70 91 a8 01 	lds	r23, 0x01A8
    1b64:	6f 5f       	subi	r22, 0xFF	; 255
    1b66:	7f 4f       	sbci	r23, 0xFF	; 255
    1b68:	88 27       	eor	r24, r24
    1b6a:	77 fd       	sbrc	r23, 7
    1b6c:	80 95       	com	r24
    1b6e:	98 2f       	mov	r25, r24
    1b70:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__floatsisf>
    1b74:	9b 01       	movw	r18, r22
    1b76:	ac 01       	movw	r20, r24
    1b78:	c8 01       	movw	r24, r16
    1b7a:	b7 01       	movw	r22, r14
    1b7c:	0e 94 85 1b 	call	0x370a	; 0x370a <__cmpsf2>
    1b80:	88 23       	and	r24, r24
    1b82:	4c f4       	brge	.+18     	; 0x1b96 <pit_collision+0x44e>
			sprite->dx = -sprite->dx;
    1b84:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b86:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b88:	af 85       	ldd	r26, Y+15	; 0x0f
    1b8a:	b8 89       	ldd	r27, Y+16	; 0x10
    1b8c:	b0 58       	subi	r27, 0x80	; 128
    1b8e:	8d 87       	std	Y+13, r24	; 0x0d
    1b90:	9e 87       	std	Y+14, r25	; 0x0e
    1b92:	af 87       	std	Y+15, r26	; 0x0f
    1b94:	b8 8b       	std	Y+16, r27	; 0x10
		}
	}
}
    1b96:	df 91       	pop	r29
    1b98:	cf 91       	pop	r28
    1b9a:	1f 91       	pop	r17
    1b9c:	0f 91       	pop	r16
    1b9e:	ff 90       	pop	r15
    1ba0:	ef 90       	pop	r14
    1ba2:	df 90       	pop	r13
    1ba4:	cf 90       	pop	r12
    1ba6:	08 95       	ret

00001ba8 <hero_collision>:

void hero_collision( ){
	if(jumpingCount <= 0){
    1ba8:	80 91 9b 01 	lds	r24, 0x019B
    1bac:	90 91 9c 01 	lds	r25, 0x019C
    1bb0:	18 16       	cp	r1, r24
    1bb2:	19 06       	cpc	r1, r25
    1bb4:	1c f0       	brlt	.+6      	; 0x1bbc <hero_collision+0x14>
	pit_collision(&sprite);
    1bb6:	87 e4       	ldi	r24, 0x47	; 71
    1bb8:	92 e0       	ldi	r25, 0x02	; 2
    1bba:	c6 cd       	rjmp	.-1140   	; 0x1748 <pit_collision>
    1bbc:	08 95       	ret

00001bbe <__vector_9>:
	draw_line(border7[0],border7[1],border7[2],border7[3]);
	draw_line(border8[0],border8[1],border8[2],border8[3]);
}

ISR(PCINT0_vect)
{
    1bbe:	1f 92       	push	r1
    1bc0:	0f 92       	push	r0
    1bc2:	0f b6       	in	r0, 0x3f	; 63
    1bc4:	0f 92       	push	r0
    1bc6:	11 24       	eor	r1, r1
    1bc8:	ef 92       	push	r14
    1bca:	ff 92       	push	r15
    1bcc:	0f 93       	push	r16
    1bce:	1f 93       	push	r17
    1bd0:	2f 93       	push	r18
    1bd2:	3f 93       	push	r19
    1bd4:	4f 93       	push	r20
    1bd6:	5f 93       	push	r21
    1bd8:	6f 93       	push	r22
    1bda:	7f 93       	push	r23
    1bdc:	8f 93       	push	r24
    1bde:	9f 93       	push	r25
    1be0:	af 93       	push	r26
    1be2:	bf 93       	push	r27
    1be4:	ef 93       	push	r30
    1be6:	ff 93       	push	r31
	pincount++;
    1be8:	80 91 20 02 	lds	r24, 0x0220
    1bec:	90 91 21 02 	lds	r25, 0x0221
    1bf0:	01 96       	adiw	r24, 0x01	; 1
    1bf2:	90 93 21 02 	sts	0x0221, r25
    1bf6:	80 93 20 02 	sts	0x0220, r24
	if(gameOver==0){
    1bfa:	80 91 24 02 	lds	r24, 0x0224
    1bfe:	90 91 25 02 	lds	r25, 0x0225
    1c02:	89 2b       	or	r24, r25
    1c04:	09 f0       	breq	.+2      	; 0x1c08 <__vector_9+0x4a>
    1c06:	32 c1       	rjmp	.+612    	; 0x1e6c <__vector_9+0x2ae>
	if(stage==0){
    1c08:	80 91 2e 02 	lds	r24, 0x022E
    1c0c:	90 91 2f 02 	lds	r25, 0x022F
    1c10:	89 2b       	or	r24, r25
    1c12:	c9 f5       	brne	.+114    	; 0x1c86 <__vector_9+0xc8>
	if ((PINB>>0)&1){
    1c14:	18 9b       	sbis	0x03, 0	; 3
    1c16:	06 c0       	rjmp	.+12     	; 0x1c24 <__vector_9+0x66>
		chosen=1;
    1c18:	81 e0       	ldi	r24, 0x01	; 1
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	90 93 31 02 	sts	0x0231, r25
    1c20:	80 93 30 02 	sts	0x0230, r24
	}
	if ((PINB>>1)&1){
    1c24:	83 b1       	in	r24, 0x03	; 3
    1c26:	86 95       	lsr	r24
    1c28:	80 ff       	sbrs	r24, 0
    1c2a:	2b c0       	rjmp	.+86     	; 0x1c82 <__vector_9+0xc4>
		if (choice==1){
    1c2c:	80 91 06 02 	lds	r24, 0x0206
    1c30:	90 91 07 02 	lds	r25, 0x0207
    1c34:	01 97       	sbiw	r24, 0x01	; 1
    1c36:	69 f4       	brne	.+26     	; 0x1c52 <__vector_9+0x94>
			choice = 2;
    1c38:	82 e0       	ldi	r24, 0x02	; 2
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	90 93 07 02 	sts	0x0207, r25
    1c40:	80 93 06 02 	sts	0x0206, r24
			draw_character(' ',34,20);
    1c44:	80 e2       	ldi	r24, 0x20	; 32
    1c46:	62 e2       	ldi	r22, 0x22	; 34
    1c48:	44 e1       	ldi	r20, 0x14	; 20
    1c4a:	0e 94 92 1e 	call	0x3d24	; 0x3d24 <draw_character>
			draw_character('*',0,20);	
    1c4e:	8a e2       	ldi	r24, 0x2A	; 42
    1c50:	12 c0       	rjmp	.+36     	; 0x1c76 <__vector_9+0xb8>
			refresh();
		}	
		else if (choice==2){
    1c52:	80 91 06 02 	lds	r24, 0x0206
    1c56:	90 91 07 02 	lds	r25, 0x0207
    1c5a:	02 97       	sbiw	r24, 0x02	; 2
    1c5c:	91 f4       	brne	.+36     	; 0x1c82 <__vector_9+0xc4>
			choice = 1;
    1c5e:	81 e0       	ldi	r24, 0x01	; 1
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	90 93 07 02 	sts	0x0207, r25
    1c66:	80 93 06 02 	sts	0x0206, r24
			draw_character('*',34,20);
    1c6a:	8a e2       	ldi	r24, 0x2A	; 42
    1c6c:	62 e2       	ldi	r22, 0x22	; 34
    1c6e:	44 e1       	ldi	r20, 0x14	; 20
    1c70:	0e 94 92 1e 	call	0x3d24	; 0x3d24 <draw_character>
			draw_character(' ',0,20);
    1c74:	80 e2       	ldi	r24, 0x20	; 32
    1c76:	60 e0       	ldi	r22, 0x00	; 0
    1c78:	44 e1       	ldi	r20, 0x14	; 20
    1c7a:	0e 94 92 1e 	call	0x3d24	; 0x3d24 <draw_character>
			refresh();
    1c7e:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <refresh>
		}
	}
	refresh();
    1c82:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <refresh>
	}
if(stage == 1){
    1c86:	80 91 2e 02 	lds	r24, 0x022E
    1c8a:	90 91 2f 02 	lds	r25, 0x022F
    1c8e:	81 30       	cpi	r24, 0x01	; 1
    1c90:	91 05       	cpc	r25, r1
    1c92:	09 f0       	breq	.+2      	; 0x1c96 <__vector_9+0xd8>
    1c94:	eb c0       	rjmp	.+470    	; 0x1e6c <__vector_9+0x2ae>
	buttonPressed=0;
    1c96:	10 92 23 02 	sts	0x0223, r1
    1c9a:	10 92 22 02 	sts	0x0222, r1
	if ((PINB>>0)&1){
    1c9e:	18 9b       	sbis	0x03, 0	; 3
    1ca0:	04 c0       	rjmp	.+8      	; 0x1caa <__vector_9+0xec>
		buttonPressed = 1;
    1ca2:	90 93 23 02 	sts	0x0223, r25
    1ca6:	80 93 22 02 	sts	0x0222, r24
	}
	if ((PINB>>1)&1){
    1caa:	83 b1       	in	r24, 0x03	; 3
    1cac:	86 95       	lsr	r24
    1cae:	80 ff       	sbrs	r24, 0
    1cb0:	0f c0       	rjmp	.+30     	; 0x1cd0 <__vector_9+0x112>
		if (buttonPressed){
    1cb2:	80 91 22 02 	lds	r24, 0x0222
    1cb6:	90 91 23 02 	lds	r25, 0x0223
    1cba:	89 2b       	or	r24, r25
    1cbc:	19 f0       	breq	.+6      	; 0x1cc4 <__vector_9+0x106>
			buttonPressed = 3;
    1cbe:	83 e0       	ldi	r24, 0x03	; 3
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	02 c0       	rjmp	.+4      	; 0x1cc8 <__vector_9+0x10a>
		} else {
			buttonPressed = 2;
    1cc4:	82 e0       	ldi	r24, 0x02	; 2
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	90 93 23 02 	sts	0x0223, r25
    1ccc:	80 93 22 02 	sts	0x0222, r24
		}
	}
	if (buttonPressed==1){
    1cd0:	80 91 22 02 	lds	r24, 0x0222
    1cd4:	90 91 23 02 	lds	r25, 0x0223
    1cd8:	01 97       	sbiw	r24, 0x01	; 1
    1cda:	e1 f5       	brne	.+120    	; 0x1d54 <__vector_9+0x196>
		if(sprite.dx == 1){
    1cdc:	e0 90 54 02 	lds	r14, 0x0254
    1ce0:	f0 90 55 02 	lds	r15, 0x0255
    1ce4:	00 91 56 02 	lds	r16, 0x0256
    1ce8:	10 91 57 02 	lds	r17, 0x0257
    1cec:	c8 01       	movw	r24, r16
    1cee:	b7 01       	movw	r22, r14
    1cf0:	20 e0       	ldi	r18, 0x00	; 0
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	40 e8       	ldi	r20, 0x80	; 128
    1cf6:	5f e3       	ldi	r21, 0x3F	; 63
    1cf8:	0e 94 85 1b 	call	0x370a	; 0x370a <__cmpsf2>
    1cfc:	88 23       	and	r24, r24
    1cfe:	09 f4       	brne	.+2      	; 0x1d02 <__vector_9+0x144>
    1d00:	5d c0       	rjmp	.+186    	; 0x1dbc <__vector_9+0x1fe>
			sprite.dx = 0;
			sprite.dy = -1;
		}
		else if( sprite.dx == -1){
    1d02:	c8 01       	movw	r24, r16
    1d04:	b7 01       	movw	r22, r14
    1d06:	20 e0       	ldi	r18, 0x00	; 0
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	40 e8       	ldi	r20, 0x80	; 128
    1d0c:	5f eb       	ldi	r21, 0xBF	; 191
    1d0e:	0e 94 85 1b 	call	0x370a	; 0x370a <__cmpsf2>
    1d12:	88 23       	and	r24, r24
    1d14:	c1 f1       	breq	.+112    	; 0x1d86 <__vector_9+0x1c8>
			sprite.dx = 0;
			sprite.dy = 1;
		}
		else if( sprite.dy == 1){
    1d16:	e0 90 58 02 	lds	r14, 0x0258
    1d1a:	f0 90 59 02 	lds	r15, 0x0259
    1d1e:	00 91 5a 02 	lds	r16, 0x025A
    1d22:	10 91 5b 02 	lds	r17, 0x025B
    1d26:	c8 01       	movw	r24, r16
    1d28:	b7 01       	movw	r22, r14
    1d2a:	20 e0       	ldi	r18, 0x00	; 0
    1d2c:	30 e0       	ldi	r19, 0x00	; 0
    1d2e:	40 e8       	ldi	r20, 0x80	; 128
    1d30:	5f e3       	ldi	r21, 0x3F	; 63
    1d32:	0e 94 85 1b 	call	0x370a	; 0x370a <__cmpsf2>
    1d36:	88 23       	and	r24, r24
    1d38:	09 f4       	brne	.+2      	; 0x1d3c <__vector_9+0x17e>
    1d3a:	72 c0       	rjmp	.+228    	; 0x1e20 <__vector_9+0x262>
			sprite.dx = 1;
			sprite.dy = 0;
		}
		else if( sprite.dy == -1){
    1d3c:	c8 01       	movw	r24, r16
    1d3e:	b7 01       	movw	r22, r14
    1d40:	20 e0       	ldi	r18, 0x00	; 0
    1d42:	30 e0       	ldi	r19, 0x00	; 0
    1d44:	40 e8       	ldi	r20, 0x80	; 128
    1d46:	5f eb       	ldi	r21, 0xBF	; 191
    1d48:	0e 94 85 1b 	call	0x370a	; 0x370a <__cmpsf2>
    1d4c:	88 23       	and	r24, r24
    1d4e:	09 f0       	breq	.+2      	; 0x1d52 <__vector_9+0x194>
    1d50:	7f c0       	rjmp	.+254    	; 0x1e50 <__vector_9+0x292>
    1d52:	57 c0       	rjmp	.+174    	; 0x1e02 <__vector_9+0x244>
			sprite.dx = -1;
			sprite.dy = 0;

		}
	} else if (buttonPressed==2){
    1d54:	80 91 22 02 	lds	r24, 0x0222
    1d58:	90 91 23 02 	lds	r25, 0x0223
    1d5c:	02 97       	sbiw	r24, 0x02	; 2
    1d5e:	09 f0       	breq	.+2      	; 0x1d62 <__vector_9+0x1a4>
    1d60:	77 c0       	rjmp	.+238    	; 0x1e50 <__vector_9+0x292>
		if(sprite.dx == 1){
    1d62:	e0 90 54 02 	lds	r14, 0x0254
    1d66:	f0 90 55 02 	lds	r15, 0x0255
    1d6a:	00 91 56 02 	lds	r16, 0x0256
    1d6e:	10 91 57 02 	lds	r17, 0x0257
    1d72:	c8 01       	movw	r24, r16
    1d74:	b7 01       	movw	r22, r14
    1d76:	20 e0       	ldi	r18, 0x00	; 0
    1d78:	30 e0       	ldi	r19, 0x00	; 0
    1d7a:	40 e8       	ldi	r20, 0x80	; 128
    1d7c:	5f e3       	ldi	r21, 0x3F	; 63
    1d7e:	0e 94 85 1b 	call	0x370a	; 0x370a <__cmpsf2>
    1d82:	88 23       	and	r24, r24
    1d84:	89 f4       	brne	.+34     	; 0x1da8 <__vector_9+0x1ea>
			sprite.dx = 0;
    1d86:	80 e0       	ldi	r24, 0x00	; 0
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	a0 e0       	ldi	r26, 0x00	; 0
    1d8c:	b0 e0       	ldi	r27, 0x00	; 0
    1d8e:	80 93 54 02 	sts	0x0254, r24
    1d92:	90 93 55 02 	sts	0x0255, r25
    1d96:	a0 93 56 02 	sts	0x0256, r26
    1d9a:	b0 93 57 02 	sts	0x0257, r27
			sprite.dy = 1;
    1d9e:	80 e0       	ldi	r24, 0x00	; 0
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	a0 e8       	ldi	r26, 0x80	; 128
    1da4:	bf e3       	ldi	r27, 0x3F	; 63
    1da6:	4c c0       	rjmp	.+152    	; 0x1e40 <__vector_9+0x282>
		}
		else if( sprite.dx == -1){
    1da8:	c8 01       	movw	r24, r16
    1daa:	b7 01       	movw	r22, r14
    1dac:	20 e0       	ldi	r18, 0x00	; 0
    1dae:	30 e0       	ldi	r19, 0x00	; 0
    1db0:	40 e8       	ldi	r20, 0x80	; 128
    1db2:	5f eb       	ldi	r21, 0xBF	; 191
    1db4:	0e 94 85 1b 	call	0x370a	; 0x370a <__cmpsf2>
    1db8:	88 23       	and	r24, r24
    1dba:	89 f4       	brne	.+34     	; 0x1dde <__vector_9+0x220>
			sprite.dx = 0;
    1dbc:	80 e0       	ldi	r24, 0x00	; 0
    1dbe:	90 e0       	ldi	r25, 0x00	; 0
    1dc0:	a0 e0       	ldi	r26, 0x00	; 0
    1dc2:	b0 e0       	ldi	r27, 0x00	; 0
    1dc4:	80 93 54 02 	sts	0x0254, r24
    1dc8:	90 93 55 02 	sts	0x0255, r25
    1dcc:	a0 93 56 02 	sts	0x0256, r26
    1dd0:	b0 93 57 02 	sts	0x0257, r27
			sprite.dy = -1;
    1dd4:	80 e0       	ldi	r24, 0x00	; 0
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	a0 e8       	ldi	r26, 0x80	; 128
    1dda:	bf eb       	ldi	r27, 0xBF	; 191
    1ddc:	31 c0       	rjmp	.+98     	; 0x1e40 <__vector_9+0x282>
		}
		else if( sprite.dy == 1){
    1dde:	e0 90 58 02 	lds	r14, 0x0258
    1de2:	f0 90 59 02 	lds	r15, 0x0259
    1de6:	00 91 5a 02 	lds	r16, 0x025A
    1dea:	10 91 5b 02 	lds	r17, 0x025B
    1dee:	c8 01       	movw	r24, r16
    1df0:	b7 01       	movw	r22, r14
    1df2:	20 e0       	ldi	r18, 0x00	; 0
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	40 e8       	ldi	r20, 0x80	; 128
    1df8:	5f e3       	ldi	r21, 0x3F	; 63
    1dfa:	0e 94 85 1b 	call	0x370a	; 0x370a <__cmpsf2>
    1dfe:	88 23       	and	r24, r24
    1e00:	29 f4       	brne	.+10     	; 0x1e0c <__vector_9+0x24e>
			sprite.dx = -1;
    1e02:	80 e0       	ldi	r24, 0x00	; 0
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	a0 e8       	ldi	r26, 0x80	; 128
    1e08:	bf eb       	ldi	r27, 0xBF	; 191
    1e0a:	0e c0       	rjmp	.+28     	; 0x1e28 <__vector_9+0x26a>
			sprite.dy = 0;
		}
		else if( sprite.dy == -1){
    1e0c:	c8 01       	movw	r24, r16
    1e0e:	b7 01       	movw	r22, r14
    1e10:	20 e0       	ldi	r18, 0x00	; 0
    1e12:	30 e0       	ldi	r19, 0x00	; 0
    1e14:	40 e8       	ldi	r20, 0x80	; 128
    1e16:	5f eb       	ldi	r21, 0xBF	; 191
    1e18:	0e 94 85 1b 	call	0x370a	; 0x370a <__cmpsf2>
    1e1c:	88 23       	and	r24, r24
    1e1e:	c1 f4       	brne	.+48     	; 0x1e50 <__vector_9+0x292>
			sprite.dx = 1;
    1e20:	80 e0       	ldi	r24, 0x00	; 0
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	a0 e8       	ldi	r26, 0x80	; 128
    1e26:	bf e3       	ldi	r27, 0x3F	; 63
    1e28:	80 93 54 02 	sts	0x0254, r24
    1e2c:	90 93 55 02 	sts	0x0255, r25
    1e30:	a0 93 56 02 	sts	0x0256, r26
    1e34:	b0 93 57 02 	sts	0x0257, r27
			sprite.dy = 0;
    1e38:	80 e0       	ldi	r24, 0x00	; 0
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	a0 e0       	ldi	r26, 0x00	; 0
    1e3e:	b0 e0       	ldi	r27, 0x00	; 0
    1e40:	80 93 58 02 	sts	0x0258, r24
    1e44:	90 93 59 02 	sts	0x0259, r25
    1e48:	a0 93 5a 02 	sts	0x025A, r26
    1e4c:	b0 93 5b 02 	sts	0x025B, r27

		}
	}
	if ((PINB>>0)&1){
    1e50:	18 9b       	sbis	0x03, 0	; 3
    1e52:	0a c0       	rjmp	.+20     	; 0x1e68 <__vector_9+0x2aa>
		if ((PINB>>1)&1){
    1e54:	83 b1       	in	r24, 0x03	; 3
    1e56:	86 95       	lsr	r24
    1e58:	80 ff       	sbrs	r24, 0
    1e5a:	06 c0       	rjmp	.+12     	; 0x1e68 <__vector_9+0x2aa>
		jumpingCount=10;	
    1e5c:	8a e0       	ldi	r24, 0x0A	; 10
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	90 93 9c 01 	sts	0x019C, r25
    1e64:	80 93 9b 01 	sts	0x019B, r24
		}
	}
	refresh();
    1e68:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <refresh>
	}
	

	}
}
    1e6c:	ff 91       	pop	r31
    1e6e:	ef 91       	pop	r30
    1e70:	bf 91       	pop	r27
    1e72:	af 91       	pop	r26
    1e74:	9f 91       	pop	r25
    1e76:	8f 91       	pop	r24
    1e78:	7f 91       	pop	r23
    1e7a:	6f 91       	pop	r22
    1e7c:	5f 91       	pop	r21
    1e7e:	4f 91       	pop	r20
    1e80:	3f 91       	pop	r19
    1e82:	2f 91       	pop	r18
    1e84:	1f 91       	pop	r17
    1e86:	0f 91       	pop	r16
    1e88:	ff 90       	pop	r15
    1e8a:	ef 90       	pop	r14
    1e8c:	0f 90       	pop	r0
    1e8e:	0f be       	out	0x3f, r0	; 63
    1e90:	0f 90       	pop	r0
    1e92:	1f 90       	pop	r1
    1e94:	18 95       	reti

00001e96 <draw_stage>:
		}
	}
}
}

void draw_stage() {
    1e96:	2f 92       	push	r2
    1e98:	3f 92       	push	r3
    1e9a:	4f 92       	push	r4
    1e9c:	5f 92       	push	r5
    1e9e:	6f 92       	push	r6
    1ea0:	7f 92       	push	r7
    1ea2:	8f 92       	push	r8
    1ea4:	9f 92       	push	r9
    1ea6:	af 92       	push	r10
    1ea8:	bf 92       	push	r11
    1eaa:	cf 92       	push	r12
    1eac:	df 92       	push	r13
    1eae:	ef 92       	push	r14
    1eb0:	ff 92       	push	r15
    1eb2:	0f 93       	push	r16
    1eb4:	1f 93       	push	r17
    1eb6:	df 93       	push	r29
    1eb8:	cf 93       	push	r28
    1eba:	cd b7       	in	r28, 0x3d	; 61
    1ebc:	de b7       	in	r29, 0x3e	; 62
    1ebe:	a0 97       	sbiw	r28, 0x20	; 32
    1ec0:	0f b6       	in	r0, 0x3f	; 63
    1ec2:	f8 94       	cli
    1ec4:	de bf       	out	0x3e, r29	; 62
    1ec6:	0f be       	out	0x3f, r0	; 63
    1ec8:	cd bf       	out	0x3d, r28	; 61
	draw_line(border1[0],border1[1],border1[2],border1[3]);
    1eca:	60 91 17 01 	lds	r22, 0x0117
    1ece:	70 91 18 01 	lds	r23, 0x0118
    1ed2:	80 91 19 01 	lds	r24, 0x0119
    1ed6:	90 91 1a 01 	lds	r25, 0x011A
    1eda:	e0 90 1b 01 	lds	r14, 0x011B
    1ede:	f0 90 1c 01 	lds	r15, 0x011C
    1ee2:	00 91 1d 01 	lds	r16, 0x011D
    1ee6:	10 91 1e 01 	lds	r17, 0x011E
    1eea:	a0 90 1f 01 	lds	r10, 0x011F
    1eee:	b0 90 20 01 	lds	r11, 0x0120
    1ef2:	c0 90 21 01 	lds	r12, 0x0121
    1ef6:	d0 90 22 01 	lds	r13, 0x0122
    1efa:	20 90 23 01 	lds	r2, 0x0123
    1efe:	30 90 24 01 	lds	r3, 0x0124
    1f02:	40 90 25 01 	lds	r4, 0x0125
    1f06:	50 90 26 01 	lds	r5, 0x0126
    1f0a:	0e 94 8e 1b 	call	0x371c	; 0x371c <__fixunssfsi>
    1f0e:	69 83       	std	Y+1, r22	; 0x01
    1f10:	7a 83       	std	Y+2, r23	; 0x02
    1f12:	8b 83       	std	Y+3, r24	; 0x03
    1f14:	9c 83       	std	Y+4, r25	; 0x04
    1f16:	c8 01       	movw	r24, r16
    1f18:	b7 01       	movw	r22, r14
    1f1a:	0e 94 8e 1b 	call	0x371c	; 0x371c <__fixunssfsi>
    1f1e:	3b 01       	movw	r6, r22
    1f20:	4c 01       	movw	r8, r24
    1f22:	c6 01       	movw	r24, r12
    1f24:	b5 01       	movw	r22, r10
    1f26:	0e 94 8e 1b 	call	0x371c	; 0x371c <__fixunssfsi>
    1f2a:	6b 01       	movw	r12, r22
    1f2c:	7c 01       	movw	r14, r24
    1f2e:	c2 01       	movw	r24, r4
    1f30:	b1 01       	movw	r22, r2
    1f32:	0e 94 8e 1b 	call	0x371c	; 0x371c <__fixunssfsi>
    1f36:	8b 01       	movw	r16, r22
    1f38:	9c 01       	movw	r18, r24
    1f3a:	89 81       	ldd	r24, Y+1	; 0x01
    1f3c:	66 2d       	mov	r22, r6
    1f3e:	4c 2d       	mov	r20, r12
    1f40:	20 2f       	mov	r18, r16
    1f42:	0e 94 ab 1c 	call	0x3956	; 0x3956 <draw_line>
	draw_line(border2[0],border2[1],border2[2],border2[3]);
    1f46:	60 91 27 01 	lds	r22, 0x0127
    1f4a:	70 91 28 01 	lds	r23, 0x0128
    1f4e:	80 91 29 01 	lds	r24, 0x0129
    1f52:	90 91 2a 01 	lds	r25, 0x012A
    1f56:	e0 90 2b 01 	lds	r14, 0x012B
    1f5a:	f0 90 2c 01 	lds	r15, 0x012C
    1f5e:	00 91 2d 01 	lds	r16, 0x012D
    1f62:	10 91 2e 01 	lds	r17, 0x012E
    1f66:	a0 90 2f 01 	lds	r10, 0x012F
    1f6a:	b0 90 30 01 	lds	r11, 0x0130
    1f6e:	c0 90 31 01 	lds	r12, 0x0131
    1f72:	d0 90 32 01 	lds	r13, 0x0132
    1f76:	20 90 33 01 	lds	r2, 0x0133
    1f7a:	30 90 34 01 	lds	r3, 0x0134
    1f7e:	40 90 35 01 	lds	r4, 0x0135
    1f82:	50 90 36 01 	lds	r5, 0x0136
    1f86:	0e 94 8e 1b 	call	0x371c	; 0x371c <__fixunssfsi>
    1f8a:	6d 83       	std	Y+5, r22	; 0x05
    1f8c:	7e 83       	std	Y+6, r23	; 0x06
    1f8e:	8f 83       	std	Y+7, r24	; 0x07
    1f90:	98 87       	std	Y+8, r25	; 0x08
    1f92:	c8 01       	movw	r24, r16
    1f94:	b7 01       	movw	r22, r14
    1f96:	0e 94 8e 1b 	call	0x371c	; 0x371c <__fixunssfsi>
    1f9a:	3b 01       	movw	r6, r22
    1f9c:	4c 01       	movw	r8, r24
    1f9e:	c6 01       	movw	r24, r12
    1fa0:	b5 01       	movw	r22, r10
    1fa2:	0e 94 8e 1b 	call	0x371c	; 0x371c <__fixunssfsi>
    1fa6:	6b 01       	movw	r12, r22
    1fa8:	7c 01       	movw	r14, r24
    1faa:	c2 01       	movw	r24, r4
    1fac:	b1 01       	movw	r22, r2
    1fae:	0e 94 8e 1b 	call	0x371c	; 0x371c <__fixunssfsi>
    1fb2:	8b 01       	movw	r16, r22
    1fb4:	9c 01       	movw	r18, r24
    1fb6:	8d 81       	ldd	r24, Y+5	; 0x05
    1fb8:	66 2d       	mov	r22, r6
    1fba:	4c 2d       	mov	r20, r12
    1fbc:	20 2f       	mov	r18, r16
    1fbe:	0e 94 ab 1c 	call	0x3956	; 0x3956 <draw_line>
	draw_line(border3[0],border3[1],border3[2],border3[3]);
    1fc2:	60 91 37 01 	lds	r22, 0x0137
    1fc6:	70 91 38 01 	lds	r23, 0x0138
    1fca:	80 91 39 01 	lds	r24, 0x0139
    1fce:	90 91 3a 01 	lds	r25, 0x013A
    1fd2:	e0 90 3b 01 	lds	r14, 0x013B
    1fd6:	f0 90 3c 01 	lds	r15, 0x013C
    1fda:	00 91 3d 01 	lds	r16, 0x013D
    1fde:	10 91 3e 01 	lds	r17, 0x013E
    1fe2:	a0 90 3f 01 	lds	r10, 0x013F
    1fe6:	b0 90 40 01 	lds	r11, 0x0140
    1fea:	c0 90 41 01 	lds	r12, 0x0141
    1fee:	d0 90 42 01 	lds	r13, 0x0142
    1ff2:	20 90 43 01 	lds	r2, 0x0143
    1ff6:	30 90 44 01 	lds	r3, 0x0144
    1ffa:	40 90 45 01 	lds	r4, 0x0145
    1ffe:	50 90 46 01 	lds	r5, 0x0146
    2002:	0e 94 8e 1b 	call	0x371c	; 0x371c <__fixunssfsi>
    2006:	69 87       	std	Y+9, r22	; 0x09
    2008:	7a 87       	std	Y+10, r23	; 0x0a
    200a:	8b 87       	std	Y+11, r24	; 0x0b
    200c:	9c 87       	std	Y+12, r25	; 0x0c
    200e:	c8 01       	movw	r24, r16
    2010:	b7 01       	movw	r22, r14
    2012:	0e 94 8e 1b 	call	0x371c	; 0x371c <__fixunssfsi>
    2016:	3b 01       	movw	r6, r22
    2018:	4c 01       	movw	r8, r24
    201a:	c6 01       	movw	r24, r12
    201c:	b5 01       	movw	r22, r10
    201e:	0e 94 8e 1b 	call	0x371c	; 0x371c <__fixunssfsi>
    2022:	6b 01       	movw	r12, r22
    2024:	7c 01       	movw	r14, r24
    2026:	c2 01       	movw	r24, r4
    2028:	b1 01       	movw	r22, r2
    202a:	0e 94 8e 1b 	call	0x371c	; 0x371c <__fixunssfsi>
    202e:	8b 01       	movw	r16, r22
    2030:	9c 01       	movw	r18, r24
    2032:	89 85       	ldd	r24, Y+9	; 0x09
    2034:	66 2d       	mov	r22, r6
    2036:	4c 2d       	mov	r20, r12
    2038:	20 2f       	mov	r18, r16
    203a:	0e 94 ab 1c 	call	0x3956	; 0x3956 <draw_line>
	draw_line(border4[0],border4[1],border4[2],border4[3]);
    203e:	60 91 47 01 	lds	r22, 0x0147
    2042:	70 91 48 01 	lds	r23, 0x0148
    2046:	80 91 49 01 	lds	r24, 0x0149
    204a:	90 91 4a 01 	lds	r25, 0x014A
    204e:	e0 90 4b 01 	lds	r14, 0x014B
    2052:	f0 90 4c 01 	lds	r15, 0x014C
    2056:	00 91 4d 01 	lds	r16, 0x014D
    205a:	10 91 4e 01 	lds	r17, 0x014E
    205e:	a0 90 4f 01 	lds	r10, 0x014F
    2062:	b0 90 50 01 	lds	r11, 0x0150
    2066:	c0 90 51 01 	lds	r12, 0x0151
    206a:	d0 90 52 01 	lds	r13, 0x0152
    206e:	20 90 53 01 	lds	r2, 0x0153
    2072:	30 90 54 01 	lds	r3, 0x0154
    2076:	40 90 55 01 	lds	r4, 0x0155
    207a:	50 90 56 01 	lds	r5, 0x0156
    207e:	0e 94 8e 1b 	call	0x371c	; 0x371c <__fixunssfsi>
    2082:	6d 87       	std	Y+13, r22	; 0x0d
    2084:	7e 87       	std	Y+14, r23	; 0x0e
    2086:	8f 87       	std	Y+15, r24	; 0x0f
    2088:	98 8b       	std	Y+16, r25	; 0x10
    208a:	c8 01       	movw	r24, r16
    208c:	b7 01       	movw	r22, r14
    208e:	0e 94 8e 1b 	call	0x371c	; 0x371c <__fixunssfsi>
    2092:	3b 01       	movw	r6, r22
    2094:	4c 01       	movw	r8, r24
    2096:	c6 01       	movw	r24, r12
    2098:	b5 01       	movw	r22, r10
    209a:	0e 94 8e 1b 	call	0x371c	; 0x371c <__fixunssfsi>
    209e:	6b 01       	movw	r12, r22
    20a0:	7c 01       	movw	r14, r24
    20a2:	c2 01       	movw	r24, r4
    20a4:	b1 01       	movw	r22, r2
    20a6:	0e 94 8e 1b 	call	0x371c	; 0x371c <__fixunssfsi>
    20aa:	8b 01       	movw	r16, r22
    20ac:	9c 01       	movw	r18, r24
    20ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    20b0:	66 2d       	mov	r22, r6
    20b2:	4c 2d       	mov	r20, r12
    20b4:	20 2f       	mov	r18, r16
    20b6:	0e 94 ab 1c 	call	0x3956	; 0x3956 <draw_line>
	draw_line(border5[0],border5[1],border5[2],border5[3]);
    20ba:	60 91 57 01 	lds	r22, 0x0157
    20be:	70 91 58 01 	lds	r23, 0x0158
    20c2:	80 91 59 01 	lds	r24, 0x0159
    20c6:	90 91 5a 01 	lds	r25, 0x015A
    20ca:	e0 90 5b 01 	lds	r14, 0x015B
    20ce:	f0 90 5c 01 	lds	r15, 0x015C
    20d2:	00 91 5d 01 	lds	r16, 0x015D
    20d6:	10 91 5e 01 	lds	r17, 0x015E
    20da:	a0 90 5f 01 	lds	r10, 0x015F
    20de:	b0 90 60 01 	lds	r11, 0x0160
    20e2:	c0 90 61 01 	lds	r12, 0x0161
    20e6:	d0 90 62 01 	lds	r13, 0x0162
    20ea:	20 90 63 01 	lds	r2, 0x0163
    20ee:	30 90 64 01 	lds	r3, 0x0164
    20f2:	40 90 65 01 	lds	r4, 0x0165
    20f6:	50 90 66 01 	lds	r5, 0x0166
    20fa:	0e 94 8e 1b 	call	0x371c	; 0x371c <__fixunssfsi>
    20fe:	69 8b       	std	Y+17, r22	; 0x11
    2100:	7a 8b       	std	Y+18, r23	; 0x12
    2102:	8b 8b       	std	Y+19, r24	; 0x13
    2104:	9c 8b       	std	Y+20, r25	; 0x14
    2106:	c8 01       	movw	r24, r16
    2108:	b7 01       	movw	r22, r14
    210a:	0e 94 8e 1b 	call	0x371c	; 0x371c <__fixunssfsi>
    210e:	3b 01       	movw	r6, r22
    2110:	4c 01       	movw	r8, r24
    2112:	c6 01       	movw	r24, r12
    2114:	b5 01       	movw	r22, r10
    2116:	0e 94 8e 1b 	call	0x371c	; 0x371c <__fixunssfsi>
    211a:	6b 01       	movw	r12, r22
    211c:	7c 01       	movw	r14, r24
    211e:	c2 01       	movw	r24, r4
    2120:	b1 01       	movw	r22, r2
    2122:	0e 94 8e 1b 	call	0x371c	; 0x371c <__fixunssfsi>
    2126:	8b 01       	movw	r16, r22
    2128:	9c 01       	movw	r18, r24
    212a:	89 89       	ldd	r24, Y+17	; 0x11
    212c:	66 2d       	mov	r22, r6
    212e:	4c 2d       	mov	r20, r12
    2130:	20 2f       	mov	r18, r16
    2132:	0e 94 ab 1c 	call	0x3956	; 0x3956 <draw_line>
	draw_line(border6[0],border6[1],border6[2],border6[3]);
    2136:	60 91 67 01 	lds	r22, 0x0167
    213a:	70 91 68 01 	lds	r23, 0x0168
    213e:	80 91 69 01 	lds	r24, 0x0169
    2142:	90 91 6a 01 	lds	r25, 0x016A
    2146:	e0 90 6b 01 	lds	r14, 0x016B
    214a:	f0 90 6c 01 	lds	r15, 0x016C
    214e:	00 91 6d 01 	lds	r16, 0x016D
    2152:	10 91 6e 01 	lds	r17, 0x016E
    2156:	a0 90 6f 01 	lds	r10, 0x016F
    215a:	b0 90 70 01 	lds	r11, 0x0170
    215e:	c0 90 71 01 	lds	r12, 0x0171
    2162:	d0 90 72 01 	lds	r13, 0x0172
    2166:	20 90 73 01 	lds	r2, 0x0173
    216a:	30 90 74 01 	lds	r3, 0x0174
    216e:	40 90 75 01 	lds	r4, 0x0175
    2172:	50 90 76 01 	lds	r5, 0x0176
    2176:	0e 94 8e 1b 	call	0x371c	; 0x371c <__fixunssfsi>
    217a:	6d 8b       	std	Y+21, r22	; 0x15
    217c:	7e 8b       	std	Y+22, r23	; 0x16
    217e:	8f 8b       	std	Y+23, r24	; 0x17
    2180:	98 8f       	std	Y+24, r25	; 0x18
    2182:	c8 01       	movw	r24, r16
    2184:	b7 01       	movw	r22, r14
    2186:	0e 94 8e 1b 	call	0x371c	; 0x371c <__fixunssfsi>
    218a:	3b 01       	movw	r6, r22
    218c:	4c 01       	movw	r8, r24
    218e:	c6 01       	movw	r24, r12
    2190:	b5 01       	movw	r22, r10
    2192:	0e 94 8e 1b 	call	0x371c	; 0x371c <__fixunssfsi>
    2196:	6b 01       	movw	r12, r22
    2198:	7c 01       	movw	r14, r24
    219a:	c2 01       	movw	r24, r4
    219c:	b1 01       	movw	r22, r2
    219e:	0e 94 8e 1b 	call	0x371c	; 0x371c <__fixunssfsi>
    21a2:	8b 01       	movw	r16, r22
    21a4:	9c 01       	movw	r18, r24
    21a6:	8d 89       	ldd	r24, Y+21	; 0x15
    21a8:	66 2d       	mov	r22, r6
    21aa:	4c 2d       	mov	r20, r12
    21ac:	20 2f       	mov	r18, r16
    21ae:	0e 94 ab 1c 	call	0x3956	; 0x3956 <draw_line>
	draw_line(border7[0],border7[1],border7[2],border7[3]);
    21b2:	60 91 77 01 	lds	r22, 0x0177
    21b6:	70 91 78 01 	lds	r23, 0x0178
    21ba:	80 91 79 01 	lds	r24, 0x0179
    21be:	90 91 7a 01 	lds	r25, 0x017A
    21c2:	e0 90 7b 01 	lds	r14, 0x017B
    21c6:	f0 90 7c 01 	lds	r15, 0x017C
    21ca:	00 91 7d 01 	lds	r16, 0x017D
    21ce:	10 91 7e 01 	lds	r17, 0x017E
    21d2:	a0 90 7f 01 	lds	r10, 0x017F
    21d6:	b0 90 80 01 	lds	r11, 0x0180
    21da:	c0 90 81 01 	lds	r12, 0x0181
    21de:	d0 90 82 01 	lds	r13, 0x0182
    21e2:	20 90 83 01 	lds	r2, 0x0183
    21e6:	30 90 84 01 	lds	r3, 0x0184
    21ea:	40 90 85 01 	lds	r4, 0x0185
    21ee:	50 90 86 01 	lds	r5, 0x0186
    21f2:	0e 94 8e 1b 	call	0x371c	; 0x371c <__fixunssfsi>
    21f6:	69 8f       	std	Y+25, r22	; 0x19
    21f8:	7a 8f       	std	Y+26, r23	; 0x1a
    21fa:	8b 8f       	std	Y+27, r24	; 0x1b
    21fc:	9c 8f       	std	Y+28, r25	; 0x1c
    21fe:	c8 01       	movw	r24, r16
    2200:	b7 01       	movw	r22, r14
    2202:	0e 94 8e 1b 	call	0x371c	; 0x371c <__fixunssfsi>
    2206:	3b 01       	movw	r6, r22
    2208:	4c 01       	movw	r8, r24
    220a:	c6 01       	movw	r24, r12
    220c:	b5 01       	movw	r22, r10
    220e:	0e 94 8e 1b 	call	0x371c	; 0x371c <__fixunssfsi>
    2212:	6b 01       	movw	r12, r22
    2214:	7c 01       	movw	r14, r24
    2216:	c2 01       	movw	r24, r4
    2218:	b1 01       	movw	r22, r2
    221a:	0e 94 8e 1b 	call	0x371c	; 0x371c <__fixunssfsi>
    221e:	8b 01       	movw	r16, r22
    2220:	9c 01       	movw	r18, r24
    2222:	89 8d       	ldd	r24, Y+25	; 0x19
    2224:	66 2d       	mov	r22, r6
    2226:	4c 2d       	mov	r20, r12
    2228:	20 2f       	mov	r18, r16
    222a:	0e 94 ab 1c 	call	0x3956	; 0x3956 <draw_line>
	draw_line(border8[0],border8[1],border8[2],border8[3]);
    222e:	60 91 87 01 	lds	r22, 0x0187
    2232:	70 91 88 01 	lds	r23, 0x0188
    2236:	80 91 89 01 	lds	r24, 0x0189
    223a:	90 91 8a 01 	lds	r25, 0x018A
    223e:	e0 90 8b 01 	lds	r14, 0x018B
    2242:	f0 90 8c 01 	lds	r15, 0x018C
    2246:	00 91 8d 01 	lds	r16, 0x018D
    224a:	10 91 8e 01 	lds	r17, 0x018E
    224e:	a0 90 8f 01 	lds	r10, 0x018F
    2252:	b0 90 90 01 	lds	r11, 0x0190
    2256:	c0 90 91 01 	lds	r12, 0x0191
    225a:	d0 90 92 01 	lds	r13, 0x0192
    225e:	20 90 93 01 	lds	r2, 0x0193
    2262:	30 90 94 01 	lds	r3, 0x0194
    2266:	40 90 95 01 	lds	r4, 0x0195
    226a:	50 90 96 01 	lds	r5, 0x0196
    226e:	0e 94 8e 1b 	call	0x371c	; 0x371c <__fixunssfsi>
    2272:	6d 8f       	std	Y+29, r22	; 0x1d
    2274:	7e 8f       	std	Y+30, r23	; 0x1e
    2276:	8f 8f       	std	Y+31, r24	; 0x1f
    2278:	98 a3       	std	Y+32, r25	; 0x20
    227a:	c8 01       	movw	r24, r16
    227c:	b7 01       	movw	r22, r14
    227e:	0e 94 8e 1b 	call	0x371c	; 0x371c <__fixunssfsi>
    2282:	3b 01       	movw	r6, r22
    2284:	4c 01       	movw	r8, r24
    2286:	c6 01       	movw	r24, r12
    2288:	b5 01       	movw	r22, r10
    228a:	0e 94 8e 1b 	call	0x371c	; 0x371c <__fixunssfsi>
    228e:	6b 01       	movw	r12, r22
    2290:	7c 01       	movw	r14, r24
    2292:	c2 01       	movw	r24, r4
    2294:	b1 01       	movw	r22, r2
    2296:	0e 94 8e 1b 	call	0x371c	; 0x371c <__fixunssfsi>
    229a:	8b 01       	movw	r16, r22
    229c:	9c 01       	movw	r18, r24
    229e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22a0:	66 2d       	mov	r22, r6
    22a2:	4c 2d       	mov	r20, r12
    22a4:	20 2f       	mov	r18, r16
    22a6:	0e 94 ab 1c 	call	0x3956	; 0x3956 <draw_line>
}
    22aa:	a0 96       	adiw	r28, 0x20	; 32
    22ac:	0f b6       	in	r0, 0x3f	; 63
    22ae:	f8 94       	cli
    22b0:	de bf       	out	0x3e, r29	; 62
    22b2:	0f be       	out	0x3f, r0	; 63
    22b4:	cd bf       	out	0x3d, r28	; 61
    22b6:	cf 91       	pop	r28
    22b8:	df 91       	pop	r29
    22ba:	1f 91       	pop	r17
    22bc:	0f 91       	pop	r16
    22be:	ff 90       	pop	r15
    22c0:	ef 90       	pop	r14
    22c2:	df 90       	pop	r13
    22c4:	cf 90       	pop	r12
    22c6:	bf 90       	pop	r11
    22c8:	af 90       	pop	r10
    22ca:	9f 90       	pop	r9
    22cc:	8f 90       	pop	r8
    22ce:	7f 90       	pop	r7
    22d0:	6f 90       	pop	r6
    22d2:	5f 90       	pop	r5
    22d4:	4f 90       	pop	r4
    22d6:	3f 90       	pop	r3
    22d8:	2f 90       	pop	r2
    22da:	08 95       	ret

000022dc <draw_pit>:
			}
		}
}

void draw_pit(){
		draw_line(pit_points[0],pit_points[1],pit_points[2],pit_points[1]);
    22dc:	80 91 a3 01 	lds	r24, 0x01A3
    22e0:	90 91 a4 01 	lds	r25, 0x01A4
    22e4:	60 91 a5 01 	lds	r22, 0x01A5
    22e8:	70 91 a6 01 	lds	r23, 0x01A6
    22ec:	40 91 a7 01 	lds	r20, 0x01A7
    22f0:	50 91 a8 01 	lds	r21, 0x01A8
    22f4:	20 91 a5 01 	lds	r18, 0x01A5
    22f8:	30 91 a6 01 	lds	r19, 0x01A6
    22fc:	0e 94 ab 1c 	call	0x3956	; 0x3956 <draw_line>
		draw_line(pit_points[0],pit_points[1],pit_points[0],pit_points[3]);
    2300:	80 91 a3 01 	lds	r24, 0x01A3
    2304:	90 91 a4 01 	lds	r25, 0x01A4
    2308:	60 91 a5 01 	lds	r22, 0x01A5
    230c:	70 91 a6 01 	lds	r23, 0x01A6
    2310:	40 91 a3 01 	lds	r20, 0x01A3
    2314:	50 91 a4 01 	lds	r21, 0x01A4
    2318:	20 91 a9 01 	lds	r18, 0x01A9
    231c:	30 91 aa 01 	lds	r19, 0x01AA
    2320:	0e 94 ab 1c 	call	0x3956	; 0x3956 <draw_line>
		draw_line(pit_points[0],pit_points[3],pit_points[2],pit_points[3]);
    2324:	80 91 a3 01 	lds	r24, 0x01A3
    2328:	90 91 a4 01 	lds	r25, 0x01A4
    232c:	60 91 a9 01 	lds	r22, 0x01A9
    2330:	70 91 aa 01 	lds	r23, 0x01AA
    2334:	40 91 a7 01 	lds	r20, 0x01A7
    2338:	50 91 a8 01 	lds	r21, 0x01A8
    233c:	20 91 a9 01 	lds	r18, 0x01A9
    2340:	30 91 aa 01 	lds	r19, 0x01AA
    2344:	0e 94 ab 1c 	call	0x3956	; 0x3956 <draw_line>
		draw_line(pit_points[2],pit_points[1],pit_points[2],pit_points[3]);
    2348:	80 91 a7 01 	lds	r24, 0x01A7
    234c:	90 91 a8 01 	lds	r25, 0x01A8
    2350:	60 91 a5 01 	lds	r22, 0x01A5
    2354:	70 91 a6 01 	lds	r23, 0x01A6
    2358:	40 91 a7 01 	lds	r20, 0x01A7
    235c:	50 91 a8 01 	lds	r21, 0x01A8
    2360:	20 91 a9 01 	lds	r18, 0x01A9
    2364:	30 91 aa 01 	lds	r19, 0x01AA
    2368:	0c 94 ab 1c 	jmp	0x3956	; 0x3956 <draw_line>

0000236c <update_zombies>:
	if(jumpingCount <= 0){
	pit_collision(&sprite);
	}
} 

void update_zombies( ) {
    236c:	cf 92       	push	r12
    236e:	df 92       	push	r13
    2370:	ef 92       	push	r14
    2372:	ff 92       	push	r15
    2374:	0f 93       	push	r16
    2376:	1f 93       	push	r17
    2378:	cf 93       	push	r28
    237a:	df 93       	push	r29
    237c:	c4 e6       	ldi	r28, 0x64	; 100
    237e:	d2 e0       	ldi	r29, 0x02	; 2
	for ( int i = 0; i < ZOMBIE_COUNT; i++ ) {
		update_sprite(&zombies[i]);
		if(zombies[i].x <16){
			zombies[i].dx = -zombies[i].dx;
		}
		if ( zombies[i].x > (LCD_X - zombies[i].width)-1){
    2380:	93 e5       	ldi	r25, 0x53	; 83
    2382:	c9 2e       	mov	r12, r25
    2384:	d1 2c       	mov	r13, r1
			zombies[i].dx = -zombies[i].dx;
		}
		if(zombies[i].y <1){
			zombies[i].dy = -zombies[i].dy;
		}
		if ( zombies[i].y > (LCD_Y - zombies[i].height)-1){
    2386:	8f e2       	ldi	r24, 0x2F	; 47
    2388:	e8 2e       	mov	r14, r24
    238a:	f1 2c       	mov	r15, r1
	if(jumpingCount <= 0){
	pit_collision(&sprite);
	}
} 

void update_zombies( ) {
    238c:	1c 2f       	mov	r17, r28
    238e:	0d 2f       	mov	r16, r29
	for ( int i = 0; i < ZOMBIE_COUNT; i++ ) {
		update_sprite(&zombies[i]);
    2390:	ce 01       	movw	r24, r28
    2392:	0e 94 78 04 	call	0x8f0	; 0x8f0 <update_sprite>
		if(zombies[i].x <16){
    2396:	68 81       	ld	r22, Y
    2398:	79 81       	ldd	r23, Y+1	; 0x01
    239a:	8a 81       	ldd	r24, Y+2	; 0x02
    239c:	9b 81       	ldd	r25, Y+3	; 0x03
    239e:	20 e0       	ldi	r18, 0x00	; 0
    23a0:	30 e0       	ldi	r19, 0x00	; 0
    23a2:	40 e8       	ldi	r20, 0x80	; 128
    23a4:	51 e4       	ldi	r21, 0x41	; 65
    23a6:	0e 94 85 1b 	call	0x370a	; 0x370a <__cmpsf2>
    23aa:	88 23       	and	r24, r24
    23ac:	4c f4       	brge	.+18     	; 0x23c0 <update_zombies+0x54>
			zombies[i].dx = -zombies[i].dx;
    23ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    23b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    23b2:	af 85       	ldd	r26, Y+15	; 0x0f
    23b4:	b8 89       	ldd	r27, Y+16	; 0x10
    23b6:	b0 58       	subi	r27, 0x80	; 128
    23b8:	8d 87       	std	Y+13, r24	; 0x0d
    23ba:	9e 87       	std	Y+14, r25	; 0x0e
    23bc:	af 87       	std	Y+15, r26	; 0x0f
    23be:	b8 8b       	std	Y+16, r27	; 0x10
		}
		if ( zombies[i].x > (LCD_X - zombies[i].width)-1){
    23c0:	88 85       	ldd	r24, Y+8	; 0x08
    23c2:	b6 01       	movw	r22, r12
    23c4:	68 1b       	sub	r22, r24
    23c6:	71 09       	sbc	r23, r1
    23c8:	88 27       	eor	r24, r24
    23ca:	77 fd       	sbrc	r23, 7
    23cc:	80 95       	com	r24
    23ce:	98 2f       	mov	r25, r24
    23d0:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__floatsisf>
    23d4:	9b 01       	movw	r18, r22
    23d6:	ac 01       	movw	r20, r24
    23d8:	68 81       	ld	r22, Y
    23da:	79 81       	ldd	r23, Y+1	; 0x01
    23dc:	8a 81       	ldd	r24, Y+2	; 0x02
    23de:	9b 81       	ldd	r25, Y+3	; 0x03
    23e0:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__gesf2>
    23e4:	18 16       	cp	r1, r24
    23e6:	4c f4       	brge	.+18     	; 0x23fa <update_zombies+0x8e>
			zombies[i].dx = -zombies[i].dx;
    23e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    23ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    23ec:	af 85       	ldd	r26, Y+15	; 0x0f
    23ee:	b8 89       	ldd	r27, Y+16	; 0x10
    23f0:	b0 58       	subi	r27, 0x80	; 128
    23f2:	8d 87       	std	Y+13, r24	; 0x0d
    23f4:	9e 87       	std	Y+14, r25	; 0x0e
    23f6:	af 87       	std	Y+15, r26	; 0x0f
    23f8:	b8 8b       	std	Y+16, r27	; 0x10
		}
		if(zombies[i].y <1){
    23fa:	6c 81       	ldd	r22, Y+4	; 0x04
    23fc:	7d 81       	ldd	r23, Y+5	; 0x05
    23fe:	8e 81       	ldd	r24, Y+6	; 0x06
    2400:	9f 81       	ldd	r25, Y+7	; 0x07
    2402:	20 e0       	ldi	r18, 0x00	; 0
    2404:	30 e0       	ldi	r19, 0x00	; 0
    2406:	40 e8       	ldi	r20, 0x80	; 128
    2408:	5f e3       	ldi	r21, 0x3F	; 63
    240a:	0e 94 85 1b 	call	0x370a	; 0x370a <__cmpsf2>
    240e:	88 23       	and	r24, r24
    2410:	4c f4       	brge	.+18     	; 0x2424 <update_zombies+0xb8>
			zombies[i].dy = -zombies[i].dy;
    2412:	89 89       	ldd	r24, Y+17	; 0x11
    2414:	9a 89       	ldd	r25, Y+18	; 0x12
    2416:	ab 89       	ldd	r26, Y+19	; 0x13
    2418:	bc 89       	ldd	r27, Y+20	; 0x14
    241a:	b0 58       	subi	r27, 0x80	; 128
    241c:	89 8b       	std	Y+17, r24	; 0x11
    241e:	9a 8b       	std	Y+18, r25	; 0x12
    2420:	ab 8b       	std	Y+19, r26	; 0x13
    2422:	bc 8b       	std	Y+20, r27	; 0x14
		}
		if ( zombies[i].y > (LCD_Y - zombies[i].height)-1){
    2424:	89 85       	ldd	r24, Y+9	; 0x09
    2426:	b7 01       	movw	r22, r14
    2428:	68 1b       	sub	r22, r24
    242a:	71 09       	sbc	r23, r1
    242c:	88 27       	eor	r24, r24
    242e:	77 fd       	sbrc	r23, 7
    2430:	80 95       	com	r24
    2432:	98 2f       	mov	r25, r24
    2434:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__floatsisf>
    2438:	9b 01       	movw	r18, r22
    243a:	ac 01       	movw	r20, r24
    243c:	6c 81       	ldd	r22, Y+4	; 0x04
    243e:	7d 81       	ldd	r23, Y+5	; 0x05
    2440:	8e 81       	ldd	r24, Y+6	; 0x06
    2442:	9f 81       	ldd	r25, Y+7	; 0x07
    2444:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__gesf2>
    2448:	18 16       	cp	r1, r24
    244a:	4c f4       	brge	.+18     	; 0x245e <update_zombies+0xf2>
			zombies[i].dy = -zombies[i].dy;
    244c:	89 89       	ldd	r24, Y+17	; 0x11
    244e:	9a 89       	ldd	r25, Y+18	; 0x12
    2450:	ab 89       	ldd	r26, Y+19	; 0x13
    2452:	bc 89       	ldd	r27, Y+20	; 0x14
    2454:	b0 58       	subi	r27, 0x80	; 128
    2456:	89 8b       	std	Y+17, r24	; 0x11
    2458:	9a 8b       	std	Y+18, r25	; 0x12
    245a:	ab 8b       	std	Y+19, r26	; 0x13
    245c:	bc 8b       	std	Y+20, r27	; 0x14
		}
		draw_sprite(&zombies[i]);
    245e:	81 2f       	mov	r24, r17
    2460:	90 2f       	mov	r25, r16
    2462:	0e 94 8c 1f 	call	0x3f18	; 0x3f18 <draw_sprite>
    2466:	65 96       	adiw	r28, 0x15	; 21
	pit_collision(&sprite);
	}
} 

void update_zombies( ) {
	for ( int i = 0; i < ZOMBIE_COUNT; i++ ) {
    2468:	83 e0       	ldi	r24, 0x03	; 3
    246a:	cc 30       	cpi	r28, 0x0C	; 12
    246c:	d8 07       	cpc	r29, r24
    246e:	09 f0       	breq	.+2      	; 0x2472 <update_zombies+0x106>
    2470:	8d cf       	rjmp	.-230    	; 0x238c <update_zombies+0x20>
		if ( zombies[i].y > (LCD_Y - zombies[i].height)-1){
			zombies[i].dy = -zombies[i].dy;
		}
		draw_sprite(&zombies[i]);
	}
}
    2472:	df 91       	pop	r29
    2474:	cf 91       	pop	r28
    2476:	1f 91       	pop	r17
    2478:	0f 91       	pop	r16
    247a:	ff 90       	pop	r15
    247c:	ef 90       	pop	r14
    247e:	df 90       	pop	r13
    2480:	cf 90       	pop	r12
    2482:	08 95       	ret

00002484 <reset_game>:
		draw_line(pit_points[0],pit_points[1],pit_points[0],pit_points[3]);
		draw_line(pit_points[0],pit_points[3],pit_points[2],pit_points[3]);
		draw_line(pit_points[2],pit_points[1],pit_points[2],pit_points[3]);
}

void reset_game() {
    2484:	bf 92       	push	r11
    2486:	cf 92       	push	r12
    2488:	df 92       	push	r13
    248a:	ef 92       	push	r14
    248c:	ff 92       	push	r15
    248e:	0f 93       	push	r16
    2490:	1f 93       	push	r17
    2492:	cf 93       	push	r28
    2494:	df 93       	push	r29
	sprite.x =((LCD_X/2)+5);
    2496:	80 e0       	ldi	r24, 0x00	; 0
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	ac e3       	ldi	r26, 0x3C	; 60
    249c:	b2 e4       	ldi	r27, 0x42	; 66
    249e:	80 93 47 02 	sts	0x0247, r24
    24a2:	90 93 48 02 	sts	0x0248, r25
    24a6:	a0 93 49 02 	sts	0x0249, r26
    24aa:	b0 93 4a 02 	sts	0x024A, r27
	sprite.y = LCD_Y/2;
    24ae:	80 e0       	ldi	r24, 0x00	; 0
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	a0 ec       	ldi	r26, 0xC0	; 192
    24b4:	b1 e4       	ldi	r27, 0x41	; 65
    24b6:	80 93 4b 02 	sts	0x024B, r24
    24ba:	90 93 4c 02 	sts	0x024C, r25
    24be:	a0 93 4d 02 	sts	0x024D, r26
    24c2:	b0 93 4e 02 	sts	0x024E, r27
    24c6:	24 e6       	ldi	r18, 0x64	; 100
    24c8:	e2 2e       	mov	r14, r18
    24ca:	22 e0       	ldi	r18, 0x02	; 2
    24cc:	f2 2e       	mov	r15, r18
    24ce:	cc 24       	eor	r12, r12
    24d0:	dd 24       	eor	r13, r13
	while(tempY > 12 && tempY< 23){
		tempY = 2+ rand() %30;
	}
	zombies[i].x = tempX;
	zombies[i].y = tempY;
	zombies[i].is_visible=1;
    24d2:	bb 24       	eor	r11, r11
    24d4:	b3 94       	inc	r11

void reset_game() {
	sprite.x =((LCD_X/2)+5);
	sprite.y = LCD_Y/2;
for ( int i = 0; i < ZOMBIE_COUNT; i++ ) {
	srand(clockCounter + (i * globalCounter));
    24d6:	20 91 2a 02 	lds	r18, 0x022A
    24da:	30 91 2b 02 	lds	r19, 0x022B
    24de:	80 91 26 02 	lds	r24, 0x0226
    24e2:	90 91 27 02 	lds	r25, 0x0227
    24e6:	ac 01       	movw	r20, r24
    24e8:	c4 9e       	mul	r12, r20
    24ea:	c0 01       	movw	r24, r0
    24ec:	c5 9e       	mul	r12, r21
    24ee:	90 0d       	add	r25, r0
    24f0:	d4 9e       	mul	r13, r20
    24f2:	90 0d       	add	r25, r0
    24f4:	11 24       	eor	r1, r1
    24f6:	82 0f       	add	r24, r18
    24f8:	93 1f       	adc	r25, r19
    24fa:	0e 94 fe 20 	call	0x41fc	; 0x41fc <srand>
    24fe:	0d e2       	ldi	r16, 0x2D	; 45
    2500:	10 e0       	ldi	r17, 0x00	; 0
    2502:	09 c0       	rjmp	.+18     	; 0x2516 <reset_game+0x92>
	int tempX=45;
	int tempY=22;
	
	while(tempX > 35 && tempX < 55){
		tempX = 18 + rand() %60;
    2504:	0e 94 fb 20 	call	0x41f6	; 0x41f6 <rand>
    2508:	6c e3       	ldi	r22, 0x3C	; 60
    250a:	70 e0       	ldi	r23, 0x00	; 0
    250c:	0e 94 54 20 	call	0x40a8	; 0x40a8 <__divmodhi4>
    2510:	8c 01       	movw	r16, r24
    2512:	0e 5e       	subi	r16, 0xEE	; 238
    2514:	1f 4f       	sbci	r17, 0xFF	; 255
for ( int i = 0; i < ZOMBIE_COUNT; i++ ) {
	srand(clockCounter + (i * globalCounter));
	int tempX=45;
	int tempY=22;
	
	while(tempX > 35 && tempX < 55){
    2516:	c8 01       	movw	r24, r16
    2518:	84 97       	sbiw	r24, 0x24	; 36
    251a:	43 97       	sbiw	r24, 0x13	; 19
    251c:	98 f3       	brcs	.-26     	; 0x2504 <reset_game+0x80>
    251e:	c6 e1       	ldi	r28, 0x16	; 22
    2520:	d0 e0       	ldi	r29, 0x00	; 0
    2522:	08 c0       	rjmp	.+16     	; 0x2534 <reset_game+0xb0>
		tempX = 18 + rand() %60;
	}
	while(tempY > 12 && tempY< 23){
		tempY = 2+ rand() %30;
    2524:	0e 94 fb 20 	call	0x41f6	; 0x41f6 <rand>
    2528:	6e e1       	ldi	r22, 0x1E	; 30
    252a:	70 e0       	ldi	r23, 0x00	; 0
    252c:	0e 94 54 20 	call	0x40a8	; 0x40a8 <__divmodhi4>
    2530:	ec 01       	movw	r28, r24
    2532:	22 96       	adiw	r28, 0x02	; 2
	int tempY=22;
	
	while(tempX > 35 && tempX < 55){
		tempX = 18 + rand() %60;
	}
	while(tempY > 12 && tempY< 23){
    2534:	ce 01       	movw	r24, r28
    2536:	0d 97       	sbiw	r24, 0x0d	; 13
    2538:	0a 97       	sbiw	r24, 0x0a	; 10
    253a:	a0 f3       	brcs	.-24     	; 0x2524 <reset_game+0xa0>
		tempY = 2+ rand() %30;
	}
	zombies[i].x = tempX;
    253c:	b8 01       	movw	r22, r16
    253e:	88 27       	eor	r24, r24
    2540:	77 fd       	sbrc	r23, 7
    2542:	80 95       	com	r24
    2544:	98 2f       	mov	r25, r24
    2546:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__floatsisf>
    254a:	f7 01       	movw	r30, r14
    254c:	60 83       	st	Z, r22
    254e:	71 83       	std	Z+1, r23	; 0x01
    2550:	82 83       	std	Z+2, r24	; 0x02
    2552:	93 83       	std	Z+3, r25	; 0x03
	zombies[i].y = tempY;
    2554:	be 01       	movw	r22, r28
    2556:	88 27       	eor	r24, r24
    2558:	77 fd       	sbrc	r23, 7
    255a:	80 95       	com	r24
    255c:	98 2f       	mov	r25, r24
    255e:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__floatsisf>
    2562:	f7 01       	movw	r30, r14
    2564:	64 83       	std	Z+4, r22	; 0x04
    2566:	75 83       	std	Z+5, r23	; 0x05
    2568:	86 83       	std	Z+6, r24	; 0x06
    256a:	97 83       	std	Z+7, r25	; 0x07
	zombies[i].is_visible=1;
    256c:	b2 86       	std	Z+10, r11	; 0x0a
}

void reset_game() {
	sprite.x =((LCD_X/2)+5);
	sprite.y = LCD_Y/2;
for ( int i = 0; i < ZOMBIE_COUNT; i++ ) {
    256e:	08 94       	sec
    2570:	c1 1c       	adc	r12, r1
    2572:	d1 1c       	adc	r13, r1
    2574:	45 e1       	ldi	r20, 0x15	; 21
    2576:	50 e0       	ldi	r21, 0x00	; 0
    2578:	e4 0e       	add	r14, r20
    257a:	f5 1e       	adc	r15, r21
    257c:	58 e0       	ldi	r21, 0x08	; 8
    257e:	c5 16       	cp	r12, r21
    2580:	d1 04       	cpc	r13, r1
    2582:	09 f0       	breq	.+2      	; 0x2586 <reset_game+0x102>
    2584:	a8 cf       	rjmp	.-176    	; 0x24d6 <reset_game+0x52>
	}
	zombies[i].x = tempX;
	zombies[i].y = tempY;
	zombies[i].is_visible=1;
}
}
    2586:	df 91       	pop	r29
    2588:	cf 91       	pop	r28
    258a:	1f 91       	pop	r17
    258c:	0f 91       	pop	r16
    258e:	ff 90       	pop	r15
    2590:	ef 90       	pop	r14
    2592:	df 90       	pop	r13
    2594:	cf 90       	pop	r12
    2596:	bf 90       	pop	r11
    2598:	08 95       	ret

0000259a <check_collison>:

void check_collison() {
    259a:	2f 92       	push	r2
    259c:	3f 92       	push	r3
    259e:	4f 92       	push	r4
    25a0:	5f 92       	push	r5
    25a2:	6f 92       	push	r6
    25a4:	7f 92       	push	r7
    25a6:	8f 92       	push	r8
    25a8:	9f 92       	push	r9
    25aa:	af 92       	push	r10
    25ac:	bf 92       	push	r11
    25ae:	cf 92       	push	r12
    25b0:	df 92       	push	r13
    25b2:	ef 92       	push	r14
    25b4:	ff 92       	push	r15
    25b6:	0f 93       	push	r16
    25b8:	1f 93       	push	r17
    25ba:	df 93       	push	r29
    25bc:	cf 93       	push	r28
    25be:	cd b7       	in	r28, 0x3d	; 61
    25c0:	de b7       	in	r29, 0x3e	; 62
    25c2:	2c 97       	sbiw	r28, 0x0c	; 12
    25c4:	0f b6       	in	r0, 0x3f	; 63
    25c6:	f8 94       	cli
    25c8:	de bf       	out	0x3e, r29	; 62
    25ca:	0f be       	out	0x3f, r0	; 63
    25cc:	cd bf       	out	0x3d, r28	; 61
    25ce:	64 e6       	ldi	r22, 0x64	; 100
    25d0:	86 2e       	mov	r8, r22
    25d2:	62 e0       	ldi	r22, 0x02	; 2
    25d4:	96 2e       	mov	r9, r22
    25d6:	34 01       	movw	r6, r8
			reset_game();
			if(cooldown < 0){
			lives--;
			held=0;
			upgrade=0;
			gameOverCount= ZOMBIE_COUNT;
    25d8:	58 e0       	ldi	r21, 0x08	; 8
    25da:	a5 2e       	mov	r10, r21
    25dc:	b1 2c       	mov	r11, r1
			cooldown=50;
    25de:	42 e3       	ldi	r20, 0x32	; 50
    25e0:	c4 2e       	mov	r12, r20
    25e2:	d1 2c       	mov	r13, r1
}

void check_collison() {
	for ( int i = 0; i < ZOMBIE_COUNT; i++ ) {
	int zomX = zombies[i].x;
	int zomY = zombies[i].y;
    25e4:	d3 01       	movw	r26, r6
    25e6:	14 96       	adiw	r26, 0x04	; 4
    25e8:	ed 90       	ld	r14, X+
    25ea:	fd 90       	ld	r15, X+
    25ec:	0d 91       	ld	r16, X+
    25ee:	1c 91       	ld	r17, X
    25f0:	17 97       	sbiw	r26, 0x07	; 7
		if(zomX == sprite.x && zomY == sprite.y){
    25f2:	6d 91       	ld	r22, X+
    25f4:	7d 91       	ld	r23, X+
    25f6:	8d 91       	ld	r24, X+
    25f8:	9c 91       	ld	r25, X
    25fa:	0e 94 89 1b 	call	0x3712	; 0x3712 <__fixsfsi>
    25fe:	88 27       	eor	r24, r24
    2600:	77 fd       	sbrc	r23, 7
    2602:	80 95       	com	r24
    2604:	98 2f       	mov	r25, r24
    2606:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__floatsisf>
    260a:	20 91 47 02 	lds	r18, 0x0247
    260e:	30 91 48 02 	lds	r19, 0x0248
    2612:	40 91 49 02 	lds	r20, 0x0249
    2616:	50 91 4a 02 	lds	r21, 0x024A
    261a:	0e 94 85 1b 	call	0x370a	; 0x370a <__cmpsf2>
    261e:	88 23       	and	r24, r24
    2620:	b1 f5       	brne	.+108    	; 0x268e <check_collison+0xf4>
    2622:	c8 01       	movw	r24, r16
    2624:	b7 01       	movw	r22, r14
    2626:	0e 94 89 1b 	call	0x3712	; 0x3712 <__fixsfsi>
    262a:	88 27       	eor	r24, r24
    262c:	77 fd       	sbrc	r23, 7
    262e:	80 95       	com	r24
    2630:	98 2f       	mov	r25, r24
    2632:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__floatsisf>
    2636:	20 91 4b 02 	lds	r18, 0x024B
    263a:	30 91 4c 02 	lds	r19, 0x024C
    263e:	40 91 4d 02 	lds	r20, 0x024D
    2642:	50 91 4e 02 	lds	r21, 0x024E
    2646:	0e 94 85 1b 	call	0x370a	; 0x370a <__cmpsf2>
    264a:	88 23       	and	r24, r24
    264c:	01 f5       	brne	.+64     	; 0x268e <check_collison+0xf4>
			reset_game();
    264e:	1a df       	rcall	.-460    	; 0x2484 <reset_game>
			if(cooldown < 0){
    2650:	80 91 1e 02 	lds	r24, 0x021E
    2654:	90 91 1f 02 	lds	r25, 0x021F
    2658:	97 ff       	sbrs	r25, 7
    265a:	19 c0       	rjmp	.+50     	; 0x268e <check_collison+0xf4>
			lives--;
    265c:	80 91 a1 01 	lds	r24, 0x01A1
    2660:	90 91 a2 01 	lds	r25, 0x01A2
    2664:	01 97       	sbiw	r24, 0x01	; 1
    2666:	90 93 a2 01 	sts	0x01A2, r25
    266a:	80 93 a1 01 	sts	0x01A1, r24
			held=0;
    266e:	10 92 1b 02 	sts	0x021B, r1
    2672:	10 92 1a 02 	sts	0x021A, r1
			upgrade=0;
    2676:	10 92 19 02 	sts	0x0219, r1
    267a:	10 92 18 02 	sts	0x0218, r1
			gameOverCount= ZOMBIE_COUNT;
    267e:	b0 92 ac 01 	sts	0x01AC, r11
    2682:	a0 92 ab 01 	sts	0x01AB, r10
			cooldown=50;
    2686:	d0 92 1f 02 	sts	0x021F, r13
    268a:	c0 92 1e 02 	sts	0x021E, r12
    268e:	e5 e1       	ldi	r30, 0x15	; 21
    2690:	f0 e0       	ldi	r31, 0x00	; 0
    2692:	6e 0e       	add	r6, r30
    2694:	7f 1e       	adc	r7, r31
	zombies[i].is_visible=1;
}
}

void check_collison() {
	for ( int i = 0; i < ZOMBIE_COUNT; i++ ) {
    2696:	fc e0       	ldi	r31, 0x0C	; 12
    2698:	6f 16       	cp	r6, r31
    269a:	f3 e0       	ldi	r31, 0x03	; 3
    269c:	7f 06       	cpc	r7, r31
    269e:	09 f0       	breq	.+2      	; 0x26a2 <check_collison+0x108>
    26a0:	a1 cf       	rjmp	.-190    	; 0x25e4 <check_collison+0x4a>
			cooldown=50;
		}
	}
	}
	
	if(held==1){
    26a2:	80 91 1a 02 	lds	r24, 0x021A
    26a6:	90 91 1b 02 	lds	r25, 0x021B
    26aa:	01 97       	sbiw	r24, 0x01	; 1
    26ac:	09 f0       	breq	.+2      	; 0x26b0 <check_collison+0x116>
    26ae:	a3 c0       	rjmp	.+326    	; 0x27f6 <check_collison+0x25c>
		for ( int i = 0; i < ZOMBIE_COUNT; i++ ) {
		int tempX = zombies[i].x;
		int tempY = zombies[i].y;
			if((tempX > sword.x -1 && tempX < sword.x + 2 )&& (tempY > sword.y -1 && tempY < sword.y + 2)){
    26b0:	80 91 32 02 	lds	r24, 0x0232
    26b4:	90 91 33 02 	lds	r25, 0x0233
    26b8:	a0 91 34 02 	lds	r26, 0x0234
    26bc:	b0 91 35 02 	lds	r27, 0x0235
    26c0:	89 87       	std	Y+9, r24	; 0x09
    26c2:	9a 87       	std	Y+10, r25	; 0x0a
    26c4:	ab 87       	std	Y+11, r26	; 0x0b
    26c6:	bc 87       	std	Y+12, r27	; 0x0c
    26c8:	bc 01       	movw	r22, r24
    26ca:	cd 01       	movw	r24, r26
    26cc:	20 e0       	ldi	r18, 0x00	; 0
    26ce:	30 e0       	ldi	r19, 0x00	; 0
    26d0:	40 e8       	ldi	r20, 0x80	; 128
    26d2:	5f e3       	ldi	r21, 0x3F	; 63
    26d4:	b5 d7       	rcall	.+3946   	; 0x3640 <__subsf3>
    26d6:	6d 83       	std	Y+5, r22	; 0x05
    26d8:	7e 83       	std	Y+6, r23	; 0x06
    26da:	8f 83       	std	Y+7, r24	; 0x07
    26dc:	98 87       	std	Y+8, r25	; 0x08
    26de:	40 90 36 02 	lds	r4, 0x0236
    26e2:	50 90 37 02 	lds	r5, 0x0237
    26e6:	60 90 38 02 	lds	r6, 0x0238
    26ea:	70 90 39 02 	lds	r7, 0x0239
    26ee:	34 e6       	ldi	r19, 0x64	; 100
    26f0:	23 2e       	mov	r2, r19
    26f2:	32 e0       	ldi	r19, 0x02	; 2
    26f4:	33 2e       	mov	r3, r19
	}
	
	if(held==1){
		for ( int i = 0; i < ZOMBIE_COUNT; i++ ) {
		int tempX = zombies[i].x;
		int tempY = zombies[i].y;
    26f6:	d1 01       	movw	r26, r2
    26f8:	14 96       	adiw	r26, 0x04	; 4
    26fa:	ad 90       	ld	r10, X+
    26fc:	bd 90       	ld	r11, X+
    26fe:	cd 90       	ld	r12, X+
    2700:	dc 90       	ld	r13, X
    2702:	17 97       	sbiw	r26, 0x07	; 7
			if((tempX > sword.x -1 && tempX < sword.x + 2 )&& (tempY > sword.y -1 && tempY < sword.y + 2)){
    2704:	6d 91       	ld	r22, X+
    2706:	7d 91       	ld	r23, X+
    2708:	8d 91       	ld	r24, X+
    270a:	9c 91       	ld	r25, X
    270c:	0e 94 89 1b 	call	0x3712	; 0x3712 <__fixsfsi>
    2710:	88 27       	eor	r24, r24
    2712:	77 fd       	sbrc	r23, 7
    2714:	80 95       	com	r24
    2716:	98 2f       	mov	r25, r24
    2718:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__floatsisf>
    271c:	7b 01       	movw	r14, r22
    271e:	8c 01       	movw	r16, r24
    2720:	2d 81       	ldd	r18, Y+5	; 0x05
    2722:	3e 81       	ldd	r19, Y+6	; 0x06
    2724:	4f 81       	ldd	r20, Y+7	; 0x07
    2726:	58 85       	ldd	r21, Y+8	; 0x08
    2728:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__gesf2>
    272c:	18 16       	cp	r1, r24
    272e:	0c f0       	brlt	.+2      	; 0x2732 <check_collison+0x198>
    2730:	58 c0       	rjmp	.+176    	; 0x27e2 <check_collison+0x248>
    2732:	69 85       	ldd	r22, Y+9	; 0x09
    2734:	7a 85       	ldd	r23, Y+10	; 0x0a
    2736:	8b 85       	ldd	r24, Y+11	; 0x0b
    2738:	9c 85       	ldd	r25, Y+12	; 0x0c
    273a:	20 e0       	ldi	r18, 0x00	; 0
    273c:	30 e0       	ldi	r19, 0x00	; 0
    273e:	40 e0       	ldi	r20, 0x00	; 0
    2740:	50 e4       	ldi	r21, 0x40	; 64
    2742:	7f d7       	rcall	.+3838   	; 0x3642 <__addsf3>
    2744:	9b 01       	movw	r18, r22
    2746:	ac 01       	movw	r20, r24
    2748:	c8 01       	movw	r24, r16
    274a:	b7 01       	movw	r22, r14
    274c:	de d7       	rcall	.+4028   	; 0x370a <__cmpsf2>
    274e:	88 23       	and	r24, r24
    2750:	0c f0       	brlt	.+2      	; 0x2754 <check_collison+0x1ba>
    2752:	47 c0       	rjmp	.+142    	; 0x27e2 <check_collison+0x248>
    2754:	c6 01       	movw	r24, r12
    2756:	b5 01       	movw	r22, r10
    2758:	dc d7       	rcall	.+4024   	; 0x3712 <__fixsfsi>
    275a:	88 27       	eor	r24, r24
    275c:	77 fd       	sbrc	r23, 7
    275e:	80 95       	com	r24
    2760:	98 2f       	mov	r25, r24
    2762:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__floatsisf>
    2766:	7b 01       	movw	r14, r22
    2768:	8c 01       	movw	r16, r24
    276a:	c3 01       	movw	r24, r6
    276c:	b2 01       	movw	r22, r4
    276e:	20 e0       	ldi	r18, 0x00	; 0
    2770:	30 e0       	ldi	r19, 0x00	; 0
    2772:	40 e8       	ldi	r20, 0x80	; 128
    2774:	5f e3       	ldi	r21, 0x3F	; 63
    2776:	64 d7       	rcall	.+3784   	; 0x3640 <__subsf3>
    2778:	9b 01       	movw	r18, r22
    277a:	ac 01       	movw	r20, r24
    277c:	c8 01       	movw	r24, r16
    277e:	b7 01       	movw	r22, r14
    2780:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__gesf2>
    2784:	18 16       	cp	r1, r24
    2786:	6c f5       	brge	.+90     	; 0x27e2 <check_collison+0x248>
    2788:	c3 01       	movw	r24, r6
    278a:	b2 01       	movw	r22, r4
    278c:	20 e0       	ldi	r18, 0x00	; 0
    278e:	30 e0       	ldi	r19, 0x00	; 0
    2790:	40 e0       	ldi	r20, 0x00	; 0
    2792:	50 e4       	ldi	r21, 0x40	; 64
    2794:	56 d7       	rcall	.+3756   	; 0x3642 <__addsf3>
    2796:	9b 01       	movw	r18, r22
    2798:	ac 01       	movw	r20, r24
    279a:	c8 01       	movw	r24, r16
    279c:	b7 01       	movw	r22, r14
    279e:	b5 d7       	rcall	.+3946   	; 0x370a <__cmpsf2>
    27a0:	88 23       	and	r24, r24
    27a2:	fc f4       	brge	.+62     	; 0x27e2 <check_collison+0x248>
				zombies[i].x=-10;
    27a4:	80 e0       	ldi	r24, 0x00	; 0
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	a0 e2       	ldi	r26, 0x20	; 32
    27aa:	b1 ec       	ldi	r27, 0xC1	; 193
    27ac:	f1 01       	movw	r30, r2
    27ae:	80 83       	st	Z, r24
    27b0:	91 83       	std	Z+1, r25	; 0x01
    27b2:	a2 83       	std	Z+2, r26	; 0x02
    27b4:	b3 83       	std	Z+3, r27	; 0x03
				zombies[i].y=-10;
    27b6:	84 83       	std	Z+4, r24	; 0x04
    27b8:	95 83       	std	Z+5, r25	; 0x05
    27ba:	a6 83       	std	Z+6, r26	; 0x06
    27bc:	b7 83       	std	Z+7, r27	; 0x07
				scoreCounter = scoreCounter+2;
    27be:	80 91 28 02 	lds	r24, 0x0228
    27c2:	90 91 29 02 	lds	r25, 0x0229
    27c6:	02 96       	adiw	r24, 0x02	; 2
    27c8:	90 93 29 02 	sts	0x0229, r25
    27cc:	80 93 28 02 	sts	0x0228, r24
				gameOverCount--;
    27d0:	80 91 ab 01 	lds	r24, 0x01AB
    27d4:	90 91 ac 01 	lds	r25, 0x01AC
    27d8:	01 97       	sbiw	r24, 0x01	; 1
    27da:	90 93 ac 01 	sts	0x01AC, r25
    27de:	80 93 ab 01 	sts	0x01AB, r24
    27e2:	85 e1       	ldi	r24, 0x15	; 21
    27e4:	90 e0       	ldi	r25, 0x00	; 0
    27e6:	28 0e       	add	r2, r24
    27e8:	39 1e       	adc	r3, r25
		}
	}
	}
	
	if(held==1){
		for ( int i = 0; i < ZOMBIE_COUNT; i++ ) {
    27ea:	9c e0       	ldi	r25, 0x0C	; 12
    27ec:	29 16       	cp	r2, r25
    27ee:	93 e0       	ldi	r25, 0x03	; 3
    27f0:	39 06       	cpc	r3, r25
    27f2:	09 f0       	breq	.+2      	; 0x27f6 <check_collison+0x25c>
    27f4:	80 cf       	rjmp	.-256    	; 0x26f6 <check_collison+0x15c>
				scoreCounter = scoreCounter+2;
				gameOverCount--;
		}
	}
}
	if(explosionTime > 0){
    27f6:	80 91 9d 01 	lds	r24, 0x019D
    27fa:	90 91 9e 01 	lds	r25, 0x019E
    27fe:	18 16       	cp	r1, r24
    2800:	19 06       	cpc	r1, r25
    2802:	0c f0       	brlt	.+2      	; 0x2806 <check_collison+0x26c>
    2804:	88 c0       	rjmp	.+272    	; 0x2916 <check_collison+0x37c>
		for ( int i = 0; i < ZOMBIE_COUNT; i++ ) {
		int tempX = zombies[i].x;
		int tempY = zombies[i].y;
			if((tempX > bomb.x && tempX < bomb.x + 10 )&& (tempY > bomb.y && tempY < bomb.y + 10)){
    2806:	80 91 0c 03 	lds	r24, 0x030C
    280a:	90 91 0d 03 	lds	r25, 0x030D
    280e:	a0 91 0e 03 	lds	r26, 0x030E
    2812:	b0 91 0f 03 	lds	r27, 0x030F
    2816:	89 83       	std	Y+1, r24	; 0x01
    2818:	9a 83       	std	Y+2, r25	; 0x02
    281a:	ab 83       	std	Y+3, r26	; 0x03
    281c:	bc 83       	std	Y+4, r27	; 0x04
    281e:	40 90 10 03 	lds	r4, 0x0310
    2822:	50 90 11 03 	lds	r5, 0x0311
    2826:	60 90 12 03 	lds	r6, 0x0312
    282a:	70 90 13 03 	lds	r7, 0x0313
	}
}
	if(explosionTime > 0){
		for ( int i = 0; i < ZOMBIE_COUNT; i++ ) {
		int tempX = zombies[i].x;
		int tempY = zombies[i].y;
    282e:	d4 01       	movw	r26, r8
    2830:	14 96       	adiw	r26, 0x04	; 4
    2832:	ad 90       	ld	r10, X+
    2834:	bd 90       	ld	r11, X+
    2836:	cd 90       	ld	r12, X+
    2838:	dc 90       	ld	r13, X
    283a:	17 97       	sbiw	r26, 0x07	; 7
			if((tempX > bomb.x && tempX < bomb.x + 10 )&& (tempY > bomb.y && tempY < bomb.y + 10)){
    283c:	6d 91       	ld	r22, X+
    283e:	7d 91       	ld	r23, X+
    2840:	8d 91       	ld	r24, X+
    2842:	9c 91       	ld	r25, X
    2844:	66 d7       	rcall	.+3788   	; 0x3712 <__fixsfsi>
    2846:	88 27       	eor	r24, r24
    2848:	77 fd       	sbrc	r23, 7
    284a:	80 95       	com	r24
    284c:	98 2f       	mov	r25, r24
    284e:	94 d7       	rcall	.+3880   	; 0x3778 <__floatsisf>
    2850:	7b 01       	movw	r14, r22
    2852:	8c 01       	movw	r16, r24
    2854:	29 81       	ldd	r18, Y+1	; 0x01
    2856:	3a 81       	ldd	r19, Y+2	; 0x02
    2858:	4b 81       	ldd	r20, Y+3	; 0x03
    285a:	5c 81       	ldd	r21, Y+4	; 0x04
    285c:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__gesf2>
    2860:	18 16       	cp	r1, r24
    2862:	0c f0       	brlt	.+2      	; 0x2866 <check_collison+0x2cc>
    2864:	4e c0       	rjmp	.+156    	; 0x2902 <check_collison+0x368>
    2866:	69 81       	ldd	r22, Y+1	; 0x01
    2868:	7a 81       	ldd	r23, Y+2	; 0x02
    286a:	8b 81       	ldd	r24, Y+3	; 0x03
    286c:	9c 81       	ldd	r25, Y+4	; 0x04
    286e:	20 e0       	ldi	r18, 0x00	; 0
    2870:	30 e0       	ldi	r19, 0x00	; 0
    2872:	40 e2       	ldi	r20, 0x20	; 32
    2874:	51 e4       	ldi	r21, 0x41	; 65
    2876:	e5 d6       	rcall	.+3530   	; 0x3642 <__addsf3>
    2878:	9b 01       	movw	r18, r22
    287a:	ac 01       	movw	r20, r24
    287c:	c8 01       	movw	r24, r16
    287e:	b7 01       	movw	r22, r14
    2880:	44 d7       	rcall	.+3720   	; 0x370a <__cmpsf2>
    2882:	88 23       	and	r24, r24
    2884:	0c f0       	brlt	.+2      	; 0x2888 <check_collison+0x2ee>
    2886:	3d c0       	rjmp	.+122    	; 0x2902 <check_collison+0x368>
    2888:	c6 01       	movw	r24, r12
    288a:	b5 01       	movw	r22, r10
    288c:	42 d7       	rcall	.+3716   	; 0x3712 <__fixsfsi>
    288e:	88 27       	eor	r24, r24
    2890:	77 fd       	sbrc	r23, 7
    2892:	80 95       	com	r24
    2894:	98 2f       	mov	r25, r24
    2896:	70 d7       	rcall	.+3808   	; 0x3778 <__floatsisf>
    2898:	7b 01       	movw	r14, r22
    289a:	8c 01       	movw	r16, r24
    289c:	a3 01       	movw	r20, r6
    289e:	92 01       	movw	r18, r4
    28a0:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__gesf2>
    28a4:	18 16       	cp	r1, r24
    28a6:	6c f5       	brge	.+90     	; 0x2902 <check_collison+0x368>
    28a8:	c3 01       	movw	r24, r6
    28aa:	b2 01       	movw	r22, r4
    28ac:	20 e0       	ldi	r18, 0x00	; 0
    28ae:	30 e0       	ldi	r19, 0x00	; 0
    28b0:	40 e2       	ldi	r20, 0x20	; 32
    28b2:	51 e4       	ldi	r21, 0x41	; 65
    28b4:	c6 d6       	rcall	.+3468   	; 0x3642 <__addsf3>
    28b6:	9b 01       	movw	r18, r22
    28b8:	ac 01       	movw	r20, r24
    28ba:	c8 01       	movw	r24, r16
    28bc:	b7 01       	movw	r22, r14
    28be:	25 d7       	rcall	.+3658   	; 0x370a <__cmpsf2>
    28c0:	88 23       	and	r24, r24
    28c2:	fc f4       	brge	.+62     	; 0x2902 <check_collison+0x368>
				zombies[i].x=-10;
    28c4:	80 e0       	ldi	r24, 0x00	; 0
    28c6:	90 e0       	ldi	r25, 0x00	; 0
    28c8:	a0 e2       	ldi	r26, 0x20	; 32
    28ca:	b1 ec       	ldi	r27, 0xC1	; 193
    28cc:	f4 01       	movw	r30, r8
    28ce:	80 83       	st	Z, r24
    28d0:	91 83       	std	Z+1, r25	; 0x01
    28d2:	a2 83       	std	Z+2, r26	; 0x02
    28d4:	b3 83       	std	Z+3, r27	; 0x03
				zombies[i].y=-10;
    28d6:	84 83       	std	Z+4, r24	; 0x04
    28d8:	95 83       	std	Z+5, r25	; 0x05
    28da:	a6 83       	std	Z+6, r26	; 0x06
    28dc:	b7 83       	std	Z+7, r27	; 0x07
				scoreCounter = scoreCounter+2;
    28de:	80 91 28 02 	lds	r24, 0x0228
    28e2:	90 91 29 02 	lds	r25, 0x0229
    28e6:	02 96       	adiw	r24, 0x02	; 2
    28e8:	90 93 29 02 	sts	0x0229, r25
    28ec:	80 93 28 02 	sts	0x0228, r24
				gameOverCount--;
    28f0:	80 91 ab 01 	lds	r24, 0x01AB
    28f4:	90 91 ac 01 	lds	r25, 0x01AC
    28f8:	01 97       	sbiw	r24, 0x01	; 1
    28fa:	90 93 ac 01 	sts	0x01AC, r25
    28fe:	80 93 ab 01 	sts	0x01AB, r24
    2902:	85 e1       	ldi	r24, 0x15	; 21
    2904:	90 e0       	ldi	r25, 0x00	; 0
    2906:	88 0e       	add	r8, r24
    2908:	99 1e       	adc	r9, r25
				gameOverCount--;
		}
	}
}
	if(explosionTime > 0){
		for ( int i = 0; i < ZOMBIE_COUNT; i++ ) {
    290a:	9c e0       	ldi	r25, 0x0C	; 12
    290c:	89 16       	cp	r8, r25
    290e:	93 e0       	ldi	r25, 0x03	; 3
    2910:	99 06       	cpc	r9, r25
    2912:	09 f0       	breq	.+2      	; 0x2916 <check_collison+0x37c>
    2914:	8c cf       	rjmp	.-232    	; 0x282e <check_collison+0x294>
				scoreCounter = scoreCounter+2;
				gameOverCount--;
		}
	}
}
}
    2916:	2c 96       	adiw	r28, 0x0c	; 12
    2918:	0f b6       	in	r0, 0x3f	; 63
    291a:	f8 94       	cli
    291c:	de bf       	out	0x3e, r29	; 62
    291e:	0f be       	out	0x3f, r0	; 63
    2920:	cd bf       	out	0x3d, r28	; 61
    2922:	cf 91       	pop	r28
    2924:	df 91       	pop	r29
    2926:	1f 91       	pop	r17
    2928:	0f 91       	pop	r16
    292a:	ff 90       	pop	r15
    292c:	ef 90       	pop	r14
    292e:	df 90       	pop	r13
    2930:	cf 90       	pop	r12
    2932:	bf 90       	pop	r11
    2934:	af 90       	pop	r10
    2936:	9f 90       	pop	r9
    2938:	8f 90       	pop	r8
    293a:	7f 90       	pop	r7
    293c:	6f 90       	pop	r6
    293e:	5f 90       	pop	r5
    2940:	4f 90       	pop	r4
    2942:	3f 90       	pop	r3
    2944:	2f 90       	pop	r2
    2946:	08 95       	ret

00002948 <update_weapon>:
		}
	}
	
}

void update_weapon(){
    2948:	af 92       	push	r10
    294a:	bf 92       	push	r11
    294c:	cf 92       	push	r12
    294e:	df 92       	push	r13
    2950:	ef 92       	push	r14
    2952:	ff 92       	push	r15
    2954:	0f 93       	push	r16
    2956:	1f 93       	push	r17
    2958:	cf 93       	push	r28
    295a:	df 93       	push	r29
	
if(upgrade==0){
    295c:	80 91 18 02 	lds	r24, 0x0218
    2960:	90 91 19 02 	lds	r25, 0x0219
    2964:	89 2b       	or	r24, r25
    2966:	09 f0       	breq	.+2      	; 0x296a <update_weapon+0x22>
    2968:	ed c0       	rjmp	.+474    	; 0x2b44 <update_weapon+0x1fc>
	
	if(tagged==0){
    296a:	80 91 2c 02 	lds	r24, 0x022C
    296e:	90 91 2d 02 	lds	r25, 0x022D
    2972:	89 2b       	or	r24, r25
    2974:	09 f0       	breq	.+2      	; 0x2978 <update_weapon+0x30>
    2976:	79 c0       	rjmp	.+242    	; 0x2a6a <update_weapon+0x122>
	int tempX=45;
	int tempY=22;
	srand(seedcount * globalCounter);
    2978:	20 91 9f 01 	lds	r18, 0x019F
    297c:	30 91 a0 01 	lds	r19, 0x01A0
    2980:	80 91 26 02 	lds	r24, 0x0226
    2984:	90 91 27 02 	lds	r25, 0x0227
    2988:	ac 01       	movw	r20, r24
    298a:	42 9f       	mul	r20, r18
    298c:	c0 01       	movw	r24, r0
    298e:	43 9f       	mul	r20, r19
    2990:	90 0d       	add	r25, r0
    2992:	52 9f       	mul	r21, r18
    2994:	90 0d       	add	r25, r0
    2996:	11 24       	eor	r1, r1
    2998:	0e 94 fe 20 	call	0x41fc	; 0x41fc <srand>
    299c:	cd e2       	ldi	r28, 0x2D	; 45
    299e:	d0 e0       	ldi	r29, 0x00	; 0
    29a0:	11 c0       	rjmp	.+34     	; 0x29c4 <update_weapon+0x7c>
	
	while(tempX > 35 && tempX < 55){
		tempX = 18 + rand() %60;
    29a2:	0e 94 fb 20 	call	0x41f6	; 0x41f6 <rand>
    29a6:	6c e3       	ldi	r22, 0x3C	; 60
    29a8:	70 e0       	ldi	r23, 0x00	; 0
    29aa:	0e 94 54 20 	call	0x40a8	; 0x40a8 <__divmodhi4>
    29ae:	ec 01       	movw	r28, r24
    29b0:	62 96       	adiw	r28, 0x12	; 18
		seedcount++;
    29b2:	80 91 9f 01 	lds	r24, 0x019F
    29b6:	90 91 a0 01 	lds	r25, 0x01A0
    29ba:	01 96       	adiw	r24, 0x01	; 1
    29bc:	90 93 a0 01 	sts	0x01A0, r25
    29c0:	80 93 9f 01 	sts	0x019F, r24
	if(tagged==0){
	int tempX=45;
	int tempY=22;
	srand(seedcount * globalCounter);
	
	while(tempX > 35 && tempX < 55){
    29c4:	ce 01       	movw	r24, r28
    29c6:	84 97       	sbiw	r24, 0x24	; 36
    29c8:	43 97       	sbiw	r24, 0x13	; 19
    29ca:	58 f3       	brcs	.-42     	; 0x29a2 <update_weapon+0x5a>
    29cc:	06 e1       	ldi	r16, 0x16	; 22
    29ce:	10 e0       	ldi	r17, 0x00	; 0
    29d0:	12 c0       	rjmp	.+36     	; 0x29f6 <update_weapon+0xae>
		tempX = 18 + rand() %60;
		seedcount++;
	}
	
	while(tempY > 12 && tempY< 23){
		tempY = 2+ rand() %30;
    29d2:	0e 94 fb 20 	call	0x41f6	; 0x41f6 <rand>
    29d6:	6e e1       	ldi	r22, 0x1E	; 30
    29d8:	70 e0       	ldi	r23, 0x00	; 0
    29da:	0e 94 54 20 	call	0x40a8	; 0x40a8 <__divmodhi4>
    29de:	8c 01       	movw	r16, r24
    29e0:	0e 5f       	subi	r16, 0xFE	; 254
    29e2:	1f 4f       	sbci	r17, 0xFF	; 255
		seedcount++;
    29e4:	80 91 9f 01 	lds	r24, 0x019F
    29e8:	90 91 a0 01 	lds	r25, 0x01A0
    29ec:	01 96       	adiw	r24, 0x01	; 1
    29ee:	90 93 a0 01 	sts	0x01A0, r25
    29f2:	80 93 9f 01 	sts	0x019F, r24
	while(tempX > 35 && tempX < 55){
		tempX = 18 + rand() %60;
		seedcount++;
	}
	
	while(tempY > 12 && tempY< 23){
    29f6:	c8 01       	movw	r24, r16
    29f8:	0d 97       	sbiw	r24, 0x0d	; 13
    29fa:	0a 97       	sbiw	r24, 0x0a	; 10
    29fc:	50 f3       	brcs	.-44     	; 0x29d2 <update_weapon+0x8a>
		tempY = 2+ rand() %30;
		seedcount++;
	}
		sword.dx=0;
    29fe:	80 e0       	ldi	r24, 0x00	; 0
    2a00:	90 e0       	ldi	r25, 0x00	; 0
    2a02:	a0 e0       	ldi	r26, 0x00	; 0
    2a04:	b0 e0       	ldi	r27, 0x00	; 0
    2a06:	80 93 3f 02 	sts	0x023F, r24
    2a0a:	90 93 40 02 	sts	0x0240, r25
    2a0e:	a0 93 41 02 	sts	0x0241, r26
    2a12:	b0 93 42 02 	sts	0x0242, r27
		sword.dy=0;
    2a16:	80 93 43 02 	sts	0x0243, r24
    2a1a:	90 93 44 02 	sts	0x0244, r25
    2a1e:	a0 93 45 02 	sts	0x0245, r26
    2a22:	b0 93 46 02 	sts	0x0246, r27
		sword.x = tempX;
    2a26:	be 01       	movw	r22, r28
    2a28:	88 27       	eor	r24, r24
    2a2a:	77 fd       	sbrc	r23, 7
    2a2c:	80 95       	com	r24
    2a2e:	98 2f       	mov	r25, r24
    2a30:	a3 d6       	rcall	.+3398   	; 0x3778 <__floatsisf>
    2a32:	60 93 32 02 	sts	0x0232, r22
    2a36:	70 93 33 02 	sts	0x0233, r23
    2a3a:	80 93 34 02 	sts	0x0234, r24
    2a3e:	90 93 35 02 	sts	0x0235, r25
		sword.y = tempY;
    2a42:	b8 01       	movw	r22, r16
    2a44:	88 27       	eor	r24, r24
    2a46:	77 fd       	sbrc	r23, 7
    2a48:	80 95       	com	r24
    2a4a:	98 2f       	mov	r25, r24
    2a4c:	95 d6       	rcall	.+3370   	; 0x3778 <__floatsisf>
    2a4e:	60 93 36 02 	sts	0x0236, r22
    2a52:	70 93 37 02 	sts	0x0237, r23
    2a56:	80 93 38 02 	sts	0x0238, r24
    2a5a:	90 93 39 02 	sts	0x0239, r25
		tagged=1;
    2a5e:	81 e0       	ldi	r24, 0x01	; 1
    2a60:	90 e0       	ldi	r25, 0x00	; 0
    2a62:	90 93 2d 02 	sts	0x022D, r25
    2a66:	80 93 2c 02 	sts	0x022C, r24
	}
		
		if((sprite.x > sword.x -1 && sprite.x < sword.x + 2 )&& (sprite.y > sword.y -1 && sprite.y < sword.y + 2)){
    2a6a:	a0 90 47 02 	lds	r10, 0x0247
    2a6e:	b0 90 48 02 	lds	r11, 0x0248
    2a72:	c0 90 49 02 	lds	r12, 0x0249
    2a76:	d0 90 4a 02 	lds	r13, 0x024A
    2a7a:	e0 90 32 02 	lds	r14, 0x0232
    2a7e:	f0 90 33 02 	lds	r15, 0x0233
    2a82:	00 91 34 02 	lds	r16, 0x0234
    2a86:	10 91 35 02 	lds	r17, 0x0235
    2a8a:	c8 01       	movw	r24, r16
    2a8c:	b7 01       	movw	r22, r14
    2a8e:	20 e0       	ldi	r18, 0x00	; 0
    2a90:	30 e0       	ldi	r19, 0x00	; 0
    2a92:	40 e8       	ldi	r20, 0x80	; 128
    2a94:	5f e3       	ldi	r21, 0x3F	; 63
    2a96:	d4 d5       	rcall	.+2984   	; 0x3640 <__subsf3>
    2a98:	9b 01       	movw	r18, r22
    2a9a:	ac 01       	movw	r20, r24
    2a9c:	c6 01       	movw	r24, r12
    2a9e:	b5 01       	movw	r22, r10
    2aa0:	1b d7       	rcall	.+3638   	; 0x38d8 <__gesf2>
    2aa2:	18 16       	cp	r1, r24
    2aa4:	0c f0       	brlt	.+2      	; 0x2aa8 <update_weapon+0x160>
    2aa6:	4e c0       	rjmp	.+156    	; 0x2b44 <update_weapon+0x1fc>
    2aa8:	c8 01       	movw	r24, r16
    2aaa:	b7 01       	movw	r22, r14
    2aac:	20 e0       	ldi	r18, 0x00	; 0
    2aae:	30 e0       	ldi	r19, 0x00	; 0
    2ab0:	40 e0       	ldi	r20, 0x00	; 0
    2ab2:	50 e4       	ldi	r21, 0x40	; 64
    2ab4:	c6 d5       	rcall	.+2956   	; 0x3642 <__addsf3>
    2ab6:	9b 01       	movw	r18, r22
    2ab8:	ac 01       	movw	r20, r24
    2aba:	c6 01       	movw	r24, r12
    2abc:	b5 01       	movw	r22, r10
    2abe:	25 d6       	rcall	.+3146   	; 0x370a <__cmpsf2>
    2ac0:	88 23       	and	r24, r24
    2ac2:	0c f0       	brlt	.+2      	; 0x2ac6 <update_weapon+0x17e>
    2ac4:	3f c0       	rjmp	.+126    	; 0x2b44 <update_weapon+0x1fc>
    2ac6:	a0 90 4b 02 	lds	r10, 0x024B
    2aca:	b0 90 4c 02 	lds	r11, 0x024C
    2ace:	c0 90 4d 02 	lds	r12, 0x024D
    2ad2:	d0 90 4e 02 	lds	r13, 0x024E
    2ad6:	e0 90 36 02 	lds	r14, 0x0236
    2ada:	f0 90 37 02 	lds	r15, 0x0237
    2ade:	00 91 38 02 	lds	r16, 0x0238
    2ae2:	10 91 39 02 	lds	r17, 0x0239
    2ae6:	c8 01       	movw	r24, r16
    2ae8:	b7 01       	movw	r22, r14
    2aea:	20 e0       	ldi	r18, 0x00	; 0
    2aec:	30 e0       	ldi	r19, 0x00	; 0
    2aee:	40 e8       	ldi	r20, 0x80	; 128
    2af0:	5f e3       	ldi	r21, 0x3F	; 63
    2af2:	a6 d5       	rcall	.+2892   	; 0x3640 <__subsf3>
    2af4:	9b 01       	movw	r18, r22
    2af6:	ac 01       	movw	r20, r24
    2af8:	c6 01       	movw	r24, r12
    2afa:	b5 01       	movw	r22, r10
    2afc:	ed d6       	rcall	.+3546   	; 0x38d8 <__gesf2>
    2afe:	18 16       	cp	r1, r24
    2b00:	0c f5       	brge	.+66     	; 0x2b44 <update_weapon+0x1fc>
    2b02:	c8 01       	movw	r24, r16
    2b04:	b7 01       	movw	r22, r14
    2b06:	20 e0       	ldi	r18, 0x00	; 0
    2b08:	30 e0       	ldi	r19, 0x00	; 0
    2b0a:	40 e0       	ldi	r20, 0x00	; 0
    2b0c:	50 e4       	ldi	r21, 0x40	; 64
    2b0e:	99 d5       	rcall	.+2866   	; 0x3642 <__addsf3>
    2b10:	9b 01       	movw	r18, r22
    2b12:	ac 01       	movw	r20, r24
    2b14:	c6 01       	movw	r24, r12
    2b16:	b5 01       	movw	r22, r10
    2b18:	f8 d5       	rcall	.+3056   	; 0x370a <__cmpsf2>
    2b1a:	88 23       	and	r24, r24
    2b1c:	9c f4       	brge	.+38     	; 0x2b44 <update_weapon+0x1fc>
			upgrade=1;
    2b1e:	21 e0       	ldi	r18, 0x01	; 1
    2b20:	30 e0       	ldi	r19, 0x00	; 0
    2b22:	30 93 19 02 	sts	0x0219, r19
    2b26:	20 93 18 02 	sts	0x0218, r18
			scoreCounter = scoreCounter+3;
    2b2a:	80 91 28 02 	lds	r24, 0x0228
    2b2e:	90 91 29 02 	lds	r25, 0x0229
    2b32:	03 96       	adiw	r24, 0x03	; 3
    2b34:	90 93 29 02 	sts	0x0229, r25
    2b38:	80 93 28 02 	sts	0x0228, r24
			held=1;
    2b3c:	30 93 1b 02 	sts	0x021B, r19
    2b40:	20 93 1a 02 	sts	0x021A, r18
		}
		}
	
	if(upgrade==1){
    2b44:	80 91 18 02 	lds	r24, 0x0218
    2b48:	90 91 19 02 	lds	r25, 0x0219
    2b4c:	01 97       	sbiw	r24, 0x01	; 1
    2b4e:	09 f0       	breq	.+2      	; 0x2b52 <update_weapon+0x20a>
    2b50:	c2 c0       	rjmp	.+388    	; 0x2cd6 <update_weapon+0x38e>
		if(sprite.dx==1){
    2b52:	a0 90 54 02 	lds	r10, 0x0254
    2b56:	b0 90 55 02 	lds	r11, 0x0255
    2b5a:	c0 90 56 02 	lds	r12, 0x0256
    2b5e:	d0 90 57 02 	lds	r13, 0x0257
    2b62:	c6 01       	movw	r24, r12
    2b64:	b5 01       	movw	r22, r10
    2b66:	20 e0       	ldi	r18, 0x00	; 0
    2b68:	30 e0       	ldi	r19, 0x00	; 0
    2b6a:	40 e8       	ldi	r20, 0x80	; 128
    2b6c:	5f e3       	ldi	r21, 0x3F	; 63
    2b6e:	cd d5       	rcall	.+2970   	; 0x370a <__cmpsf2>
    2b70:	88 23       	and	r24, r24
    2b72:	a1 f4       	brne	.+40     	; 0x2b9c <update_weapon+0x254>
			sword.bitmap = bitswordside;
    2b74:	8a eb       	ldi	r24, 0xBA	; 186
    2b76:	91 e0       	ldi	r25, 0x01	; 1
    2b78:	90 93 3e 02 	sts	0x023E, r25
    2b7c:	80 93 3d 02 	sts	0x023D, r24
			sword.x = ((sprite.x)+3);
    2b80:	60 91 47 02 	lds	r22, 0x0247
    2b84:	70 91 48 02 	lds	r23, 0x0248
    2b88:	80 91 49 02 	lds	r24, 0x0249
    2b8c:	90 91 4a 02 	lds	r25, 0x024A
    2b90:	20 e0       	ldi	r18, 0x00	; 0
    2b92:	30 e0       	ldi	r19, 0x00	; 0
    2b94:	40 e4       	ldi	r20, 0x40	; 64
    2b96:	50 e4       	ldi	r21, 0x40	; 64
    2b98:	54 d5       	rcall	.+2728   	; 0x3642 <__addsf3>
    2b9a:	1c c0       	rjmp	.+56     	; 0x2bd4 <update_weapon+0x28c>
			sword.y = sprite.y;
		}
		if(sprite.dx==-1){
    2b9c:	c6 01       	movw	r24, r12
    2b9e:	b5 01       	movw	r22, r10
    2ba0:	20 e0       	ldi	r18, 0x00	; 0
    2ba2:	30 e0       	ldi	r19, 0x00	; 0
    2ba4:	40 e8       	ldi	r20, 0x80	; 128
    2ba6:	5f eb       	ldi	r21, 0xBF	; 191
    2ba8:	b0 d5       	rcall	.+2912   	; 0x370a <__cmpsf2>
    2baa:	88 23       	and	r24, r24
    2bac:	59 f5       	brne	.+86     	; 0x2c04 <update_weapon+0x2bc>
			sword.bitmap = bitswordside;
    2bae:	8a eb       	ldi	r24, 0xBA	; 186
    2bb0:	91 e0       	ldi	r25, 0x01	; 1
    2bb2:	90 93 3e 02 	sts	0x023E, r25
    2bb6:	80 93 3d 02 	sts	0x023D, r24
			sword.x = ((sprite.x)-3);
    2bba:	60 91 47 02 	lds	r22, 0x0247
    2bbe:	70 91 48 02 	lds	r23, 0x0248
    2bc2:	80 91 49 02 	lds	r24, 0x0249
    2bc6:	90 91 4a 02 	lds	r25, 0x024A
    2bca:	20 e0       	ldi	r18, 0x00	; 0
    2bcc:	30 e0       	ldi	r19, 0x00	; 0
    2bce:	40 e4       	ldi	r20, 0x40	; 64
    2bd0:	50 e4       	ldi	r21, 0x40	; 64
    2bd2:	36 d5       	rcall	.+2668   	; 0x3640 <__subsf3>
    2bd4:	60 93 32 02 	sts	0x0232, r22
    2bd8:	70 93 33 02 	sts	0x0233, r23
    2bdc:	80 93 34 02 	sts	0x0234, r24
    2be0:	90 93 35 02 	sts	0x0235, r25
			sword.y = sprite.y;
    2be4:	80 91 4b 02 	lds	r24, 0x024B
    2be8:	90 91 4c 02 	lds	r25, 0x024C
    2bec:	a0 91 4d 02 	lds	r26, 0x024D
    2bf0:	b0 91 4e 02 	lds	r27, 0x024E
    2bf4:	80 93 36 02 	sts	0x0236, r24
    2bf8:	90 93 37 02 	sts	0x0237, r25
    2bfc:	a0 93 38 02 	sts	0x0238, r26
    2c00:	b0 93 39 02 	sts	0x0239, r27
		}
		if(sprite.dy==1){
    2c04:	e0 90 58 02 	lds	r14, 0x0258
    2c08:	f0 90 59 02 	lds	r15, 0x0259
    2c0c:	00 91 5a 02 	lds	r16, 0x025A
    2c10:	10 91 5b 02 	lds	r17, 0x025B
    2c14:	c8 01       	movw	r24, r16
    2c16:	b7 01       	movw	r22, r14
    2c18:	20 e0       	ldi	r18, 0x00	; 0
    2c1a:	30 e0       	ldi	r19, 0x00	; 0
    2c1c:	40 e8       	ldi	r20, 0x80	; 128
    2c1e:	5f e3       	ldi	r21, 0x3F	; 63
    2c20:	74 d5       	rcall	.+2792   	; 0x370a <__cmpsf2>
    2c22:	88 23       	and	r24, r24
    2c24:	a1 f4       	brne	.+40     	; 0x2c4e <update_weapon+0x306>
			sword.bitmap = bitsword;
    2c26:	87 eb       	ldi	r24, 0xB7	; 183
    2c28:	91 e0       	ldi	r25, 0x01	; 1
    2c2a:	90 93 3e 02 	sts	0x023E, r25
    2c2e:	80 93 3d 02 	sts	0x023D, r24
			sword.y = ((sprite.y)+3);
    2c32:	60 91 4b 02 	lds	r22, 0x024B
    2c36:	70 91 4c 02 	lds	r23, 0x024C
    2c3a:	80 91 4d 02 	lds	r24, 0x024D
    2c3e:	90 91 4e 02 	lds	r25, 0x024E
    2c42:	20 e0       	ldi	r18, 0x00	; 0
    2c44:	30 e0       	ldi	r19, 0x00	; 0
    2c46:	40 e4       	ldi	r20, 0x40	; 64
    2c48:	50 e4       	ldi	r21, 0x40	; 64
    2c4a:	fb d4       	rcall	.+2550   	; 0x3642 <__addsf3>
    2c4c:	1c c0       	rjmp	.+56     	; 0x2c86 <update_weapon+0x33e>
			sword.x = sprite.x;
		}
		if(sprite.dy==-1){
    2c4e:	c8 01       	movw	r24, r16
    2c50:	b7 01       	movw	r22, r14
    2c52:	20 e0       	ldi	r18, 0x00	; 0
    2c54:	30 e0       	ldi	r19, 0x00	; 0
    2c56:	40 e8       	ldi	r20, 0x80	; 128
    2c58:	5f eb       	ldi	r21, 0xBF	; 191
    2c5a:	57 d5       	rcall	.+2734   	; 0x370a <__cmpsf2>
    2c5c:	88 23       	and	r24, r24
    2c5e:	59 f5       	brne	.+86     	; 0x2cb6 <update_weapon+0x36e>
			sword.bitmap = bitsword;
    2c60:	87 eb       	ldi	r24, 0xB7	; 183
    2c62:	91 e0       	ldi	r25, 0x01	; 1
    2c64:	90 93 3e 02 	sts	0x023E, r25
    2c68:	80 93 3d 02 	sts	0x023D, r24
			sword.y = ((sprite.y)-3);
    2c6c:	60 91 4b 02 	lds	r22, 0x024B
    2c70:	70 91 4c 02 	lds	r23, 0x024C
    2c74:	80 91 4d 02 	lds	r24, 0x024D
    2c78:	90 91 4e 02 	lds	r25, 0x024E
    2c7c:	20 e0       	ldi	r18, 0x00	; 0
    2c7e:	30 e0       	ldi	r19, 0x00	; 0
    2c80:	40 e4       	ldi	r20, 0x40	; 64
    2c82:	50 e4       	ldi	r21, 0x40	; 64
    2c84:	dd d4       	rcall	.+2490   	; 0x3640 <__subsf3>
    2c86:	60 93 36 02 	sts	0x0236, r22
    2c8a:	70 93 37 02 	sts	0x0237, r23
    2c8e:	80 93 38 02 	sts	0x0238, r24
    2c92:	90 93 39 02 	sts	0x0239, r25
			sword.x = sprite.x;
    2c96:	80 91 47 02 	lds	r24, 0x0247
    2c9a:	90 91 48 02 	lds	r25, 0x0248
    2c9e:	a0 91 49 02 	lds	r26, 0x0249
    2ca2:	b0 91 4a 02 	lds	r27, 0x024A
    2ca6:	80 93 32 02 	sts	0x0232, r24
    2caa:	90 93 33 02 	sts	0x0233, r25
    2cae:	a0 93 34 02 	sts	0x0234, r26
    2cb2:	b0 93 35 02 	sts	0x0235, r27
		}
			sword.dx = sprite.dx;
    2cb6:	a0 92 3f 02 	sts	0x023F, r10
    2cba:	b0 92 40 02 	sts	0x0240, r11
    2cbe:	c0 92 41 02 	sts	0x0241, r12
    2cc2:	d0 92 42 02 	sts	0x0242, r13
			sword.dy = sprite.dy;
    2cc6:	e0 92 43 02 	sts	0x0243, r14
    2cca:	f0 92 44 02 	sts	0x0244, r15
    2cce:	00 93 45 02 	sts	0x0245, r16
    2cd2:	10 93 46 02 	sts	0x0246, r17
	}
}
    2cd6:	df 91       	pop	r29
    2cd8:	cf 91       	pop	r28
    2cda:	1f 91       	pop	r17
    2cdc:	0f 91       	pop	r16
    2cde:	ff 90       	pop	r15
    2ce0:	ef 90       	pop	r14
    2ce2:	df 90       	pop	r13
    2ce4:	cf 90       	pop	r12
    2ce6:	bf 90       	pop	r11
    2ce8:	af 90       	pop	r10
    2cea:	08 95       	ret

00002cec <update_bomb>:
		}
		}
		}
}

void update_bomb(){
    2cec:	af 92       	push	r10
    2cee:	bf 92       	push	r11
    2cf0:	cf 92       	push	r12
    2cf2:	df 92       	push	r13
    2cf4:	ef 92       	push	r14
    2cf6:	ff 92       	push	r15
    2cf8:	0f 93       	push	r16
    2cfa:	1f 93       	push	r17
	
	if((sprite.x > bomb.x -1 && sprite.x < bomb.x + 2 )&& (sprite.y > bomb.y -1 && sprite.y < bomb.y + 2)){
    2cfc:	a0 90 47 02 	lds	r10, 0x0247
    2d00:	b0 90 48 02 	lds	r11, 0x0248
    2d04:	c0 90 49 02 	lds	r12, 0x0249
    2d08:	d0 90 4a 02 	lds	r13, 0x024A
    2d0c:	e0 90 0c 03 	lds	r14, 0x030C
    2d10:	f0 90 0d 03 	lds	r15, 0x030D
    2d14:	00 91 0e 03 	lds	r16, 0x030E
    2d18:	10 91 0f 03 	lds	r17, 0x030F
    2d1c:	c8 01       	movw	r24, r16
    2d1e:	b7 01       	movw	r22, r14
    2d20:	20 e0       	ldi	r18, 0x00	; 0
    2d22:	30 e0       	ldi	r19, 0x00	; 0
    2d24:	40 e8       	ldi	r20, 0x80	; 128
    2d26:	5f e3       	ldi	r21, 0x3F	; 63
    2d28:	8b d4       	rcall	.+2326   	; 0x3640 <__subsf3>
    2d2a:	9b 01       	movw	r18, r22
    2d2c:	ac 01       	movw	r20, r24
    2d2e:	c6 01       	movw	r24, r12
    2d30:	b5 01       	movw	r22, r10
    2d32:	d2 d5       	rcall	.+2980   	; 0x38d8 <__gesf2>
    2d34:	18 16       	cp	r1, r24
    2d36:	0c f0       	brlt	.+2      	; 0x2d3a <update_bomb+0x4e>
    2d38:	55 c0       	rjmp	.+170    	; 0x2de4 <update_bomb+0xf8>
    2d3a:	c8 01       	movw	r24, r16
    2d3c:	b7 01       	movw	r22, r14
    2d3e:	20 e0       	ldi	r18, 0x00	; 0
    2d40:	30 e0       	ldi	r19, 0x00	; 0
    2d42:	40 e0       	ldi	r20, 0x00	; 0
    2d44:	50 e4       	ldi	r21, 0x40	; 64
    2d46:	7d d4       	rcall	.+2298   	; 0x3642 <__addsf3>
    2d48:	9b 01       	movw	r18, r22
    2d4a:	ac 01       	movw	r20, r24
    2d4c:	c6 01       	movw	r24, r12
    2d4e:	b5 01       	movw	r22, r10
    2d50:	dc d4       	rcall	.+2488   	; 0x370a <__cmpsf2>
    2d52:	88 23       	and	r24, r24
    2d54:	0c f0       	brlt	.+2      	; 0x2d58 <update_bomb+0x6c>
    2d56:	46 c0       	rjmp	.+140    	; 0x2de4 <update_bomb+0xf8>
    2d58:	a0 90 4b 02 	lds	r10, 0x024B
    2d5c:	b0 90 4c 02 	lds	r11, 0x024C
    2d60:	c0 90 4d 02 	lds	r12, 0x024D
    2d64:	d0 90 4e 02 	lds	r13, 0x024E
    2d68:	e0 90 10 03 	lds	r14, 0x0310
    2d6c:	f0 90 11 03 	lds	r15, 0x0311
    2d70:	00 91 12 03 	lds	r16, 0x0312
    2d74:	10 91 13 03 	lds	r17, 0x0313
    2d78:	c8 01       	movw	r24, r16
    2d7a:	b7 01       	movw	r22, r14
    2d7c:	20 e0       	ldi	r18, 0x00	; 0
    2d7e:	30 e0       	ldi	r19, 0x00	; 0
    2d80:	40 e8       	ldi	r20, 0x80	; 128
    2d82:	5f e3       	ldi	r21, 0x3F	; 63
    2d84:	5d d4       	rcall	.+2234   	; 0x3640 <__subsf3>
    2d86:	9b 01       	movw	r18, r22
    2d88:	ac 01       	movw	r20, r24
    2d8a:	c6 01       	movw	r24, r12
    2d8c:	b5 01       	movw	r22, r10
    2d8e:	a4 d5       	rcall	.+2888   	; 0x38d8 <__gesf2>
    2d90:	18 16       	cp	r1, r24
    2d92:	44 f5       	brge	.+80     	; 0x2de4 <update_bomb+0xf8>
    2d94:	c8 01       	movw	r24, r16
    2d96:	b7 01       	movw	r22, r14
    2d98:	20 e0       	ldi	r18, 0x00	; 0
    2d9a:	30 e0       	ldi	r19, 0x00	; 0
    2d9c:	40 e0       	ldi	r20, 0x00	; 0
    2d9e:	50 e4       	ldi	r21, 0x40	; 64
    2da0:	50 d4       	rcall	.+2208   	; 0x3642 <__addsf3>
    2da2:	9b 01       	movw	r18, r22
    2da4:	ac 01       	movw	r20, r24
    2da6:	c6 01       	movw	r24, r12
    2da8:	b5 01       	movw	r22, r10
    2daa:	af d4       	rcall	.+2398   	; 0x370a <__cmpsf2>
    2dac:	88 23       	and	r24, r24
    2dae:	d4 f4       	brge	.+52     	; 0x2de4 <update_bomb+0xf8>
			active=2;
    2db0:	82 e0       	ldi	r24, 0x02	; 2
    2db2:	90 e0       	ldi	r25, 0x00	; 0
    2db4:	90 93 1d 02 	sts	0x021D, r25
    2db8:	80 93 1c 02 	sts	0x021C, r24
			bomb.x=-10;
    2dbc:	80 e0       	ldi	r24, 0x00	; 0
    2dbe:	90 e0       	ldi	r25, 0x00	; 0
    2dc0:	a0 e2       	ldi	r26, 0x20	; 32
    2dc2:	b1 ec       	ldi	r27, 0xC1	; 193
    2dc4:	80 93 0c 03 	sts	0x030C, r24
    2dc8:	90 93 0d 03 	sts	0x030D, r25
    2dcc:	a0 93 0e 03 	sts	0x030E, r26
    2dd0:	b0 93 0f 03 	sts	0x030F, r27
			bomb.y=-10;
    2dd4:	80 93 10 03 	sts	0x0310, r24
    2dd8:	90 93 11 03 	sts	0x0311, r25
    2ddc:	a0 93 12 03 	sts	0x0312, r26
    2de0:	b0 93 13 03 	sts	0x0313, r27
		}
		
	if(active > 1){
    2de4:	80 91 1c 02 	lds	r24, 0x021C
    2de8:	90 91 1d 02 	lds	r25, 0x021D
    2dec:	02 97       	sbiw	r24, 0x02	; 2
    2dee:	24 f0       	brlt	.+8      	; 0x2df8 <update_bomb+0x10c>
		draw_character('o', 4 ,19);
    2df0:	8f e6       	ldi	r24, 0x6F	; 111
    2df2:	64 e0       	ldi	r22, 0x04	; 4
    2df4:	43 e1       	ldi	r20, 0x13	; 19
    2df6:	96 d7       	rcall	.+3884   	; 0x3d24 <draw_character>
	}
	
	if(active==2){
    2df8:	80 91 1c 02 	lds	r24, 0x021C
    2dfc:	90 91 1d 02 	lds	r25, 0x021D
    2e00:	02 97       	sbiw	r24, 0x02	; 2
    2e02:	61 f5       	brne	.+88     	; 0x2e5c <update_bomb+0x170>
		if(jumpingCount > 8){
    2e04:	80 91 9b 01 	lds	r24, 0x019B
    2e08:	90 91 9c 01 	lds	r25, 0x019C
    2e0c:	09 97       	sbiw	r24, 0x09	; 9
    2e0e:	34 f1       	brlt	.+76     	; 0x2e5c <update_bomb+0x170>
			bomb.x = sprite.x;
    2e10:	80 91 47 02 	lds	r24, 0x0247
    2e14:	90 91 48 02 	lds	r25, 0x0248
    2e18:	a0 91 49 02 	lds	r26, 0x0249
    2e1c:	b0 91 4a 02 	lds	r27, 0x024A
    2e20:	80 93 0c 03 	sts	0x030C, r24
    2e24:	90 93 0d 03 	sts	0x030D, r25
    2e28:	a0 93 0e 03 	sts	0x030E, r26
    2e2c:	b0 93 0f 03 	sts	0x030F, r27
			bomb.y = sprite.y;
    2e30:	80 91 4b 02 	lds	r24, 0x024B
    2e34:	90 91 4c 02 	lds	r25, 0x024C
    2e38:	a0 91 4d 02 	lds	r26, 0x024D
    2e3c:	b0 91 4e 02 	lds	r27, 0x024E
    2e40:	80 93 10 03 	sts	0x0310, r24
    2e44:	90 93 11 03 	sts	0x0311, r25
    2e48:	a0 93 12 03 	sts	0x0312, r26
    2e4c:	b0 93 13 03 	sts	0x0313, r27
			active=1;
    2e50:	81 e0       	ldi	r24, 0x01	; 1
    2e52:	90 e0       	ldi	r25, 0x00	; 0
    2e54:	90 93 1d 02 	sts	0x021D, r25
    2e58:	80 93 1c 02 	sts	0x021C, r24
		}
	}
	if(active==1){	
    2e5c:	80 91 1c 02 	lds	r24, 0x021C
    2e60:	90 91 1d 02 	lds	r25, 0x021D
    2e64:	01 97       	sbiw	r24, 0x01	; 1
    2e66:	09 f0       	breq	.+2      	; 0x2e6a <update_bomb+0x17e>
    2e68:	cd c0       	rjmp	.+410    	; 0x3004 <update_bomb+0x318>
		if(jumpingCount==0){
    2e6a:	80 91 9b 01 	lds	r24, 0x019B
    2e6e:	90 91 9c 01 	lds	r25, 0x019C
    2e72:	89 2b       	or	r24, r25
    2e74:	d9 f5       	brne	.+118    	; 0x2eec <update_bomb+0x200>
			bomb.bitmap=bitexplosion;
    2e76:	80 ec       	ldi	r24, 0xC0	; 192
    2e78:	91 e0       	ldi	r25, 0x01	; 1
    2e7a:	90 93 18 03 	sts	0x0318, r25
    2e7e:	80 93 17 03 	sts	0x0317, r24
			bomb.width=10;
    2e82:	8a e0       	ldi	r24, 0x0A	; 10
    2e84:	80 93 14 03 	sts	0x0314, r24
			bomb.height=10;
    2e88:	80 93 15 03 	sts	0x0315, r24
			bomb.x= bomb.x-1;
    2e8c:	60 91 0c 03 	lds	r22, 0x030C
    2e90:	70 91 0d 03 	lds	r23, 0x030D
    2e94:	80 91 0e 03 	lds	r24, 0x030E
    2e98:	90 91 0f 03 	lds	r25, 0x030F
    2e9c:	20 e0       	ldi	r18, 0x00	; 0
    2e9e:	30 e0       	ldi	r19, 0x00	; 0
    2ea0:	40 e8       	ldi	r20, 0x80	; 128
    2ea2:	5f e3       	ldi	r21, 0x3F	; 63
    2ea4:	cd d3       	rcall	.+1946   	; 0x3640 <__subsf3>
    2ea6:	60 93 0c 03 	sts	0x030C, r22
    2eaa:	70 93 0d 03 	sts	0x030D, r23
    2eae:	80 93 0e 03 	sts	0x030E, r24
    2eb2:	90 93 0f 03 	sts	0x030F, r25
			bomb.y= bomb.y-1;
    2eb6:	60 91 10 03 	lds	r22, 0x0310
    2eba:	70 91 11 03 	lds	r23, 0x0311
    2ebe:	80 91 12 03 	lds	r24, 0x0312
    2ec2:	90 91 13 03 	lds	r25, 0x0313
    2ec6:	20 e0       	ldi	r18, 0x00	; 0
    2ec8:	30 e0       	ldi	r19, 0x00	; 0
    2eca:	40 e8       	ldi	r20, 0x80	; 128
    2ecc:	5f e3       	ldi	r21, 0x3F	; 63
    2ece:	b8 d3       	rcall	.+1904   	; 0x3640 <__subsf3>
    2ed0:	60 93 10 03 	sts	0x0310, r22
    2ed4:	70 93 11 03 	sts	0x0311, r23
    2ed8:	80 93 12 03 	sts	0x0312, r24
    2edc:	90 93 13 03 	sts	0x0313, r25
			explosionTime=5;
    2ee0:	85 e0       	ldi	r24, 0x05	; 5
    2ee2:	90 e0       	ldi	r25, 0x00	; 0
    2ee4:	90 93 9e 01 	sts	0x019E, r25
    2ee8:	80 93 9d 01 	sts	0x019D, r24
		}
		if(explosionTime==0){
    2eec:	80 91 9d 01 	lds	r24, 0x019D
    2ef0:	90 91 9e 01 	lds	r25, 0x019E
    2ef4:	89 2b       	or	r24, r25
    2ef6:	09 f0       	breq	.+2      	; 0x2efa <update_bomb+0x20e>
    2ef8:	85 c0       	rjmp	.+266    	; 0x3004 <update_bomb+0x318>
			active=0;
    2efa:	10 92 1d 02 	sts	0x021D, r1
    2efe:	10 92 1c 02 	sts	0x021C, r1
			bomb.bitmap=bitbomb;
    2f02:	8d eb       	ldi	r24, 0xBD	; 189
    2f04:	91 e0       	ldi	r25, 0x01	; 1
    2f06:	90 93 18 03 	sts	0x0318, r25
    2f0a:	80 93 17 03 	sts	0x0317, r24
			bomb.width=3;
    2f0e:	83 e0       	ldi	r24, 0x03	; 3
    2f10:	80 93 14 03 	sts	0x0314, r24
			bomb.height=3;
    2f14:	80 93 15 03 	sts	0x0315, r24
			srand(clockCounter + (seedcount * globalCounter));
    2f18:	40 91 2a 02 	lds	r20, 0x022A
    2f1c:	50 91 2b 02 	lds	r21, 0x022B
    2f20:	20 91 9f 01 	lds	r18, 0x019F
    2f24:	30 91 a0 01 	lds	r19, 0x01A0
    2f28:	80 91 26 02 	lds	r24, 0x0226
    2f2c:	90 91 27 02 	lds	r25, 0x0227
    2f30:	bc 01       	movw	r22, r24
    2f32:	62 9f       	mul	r22, r18
    2f34:	c0 01       	movw	r24, r0
    2f36:	63 9f       	mul	r22, r19
    2f38:	90 0d       	add	r25, r0
    2f3a:	72 9f       	mul	r23, r18
    2f3c:	90 0d       	add	r25, r0
    2f3e:	11 24       	eor	r1, r1
    2f40:	84 0f       	add	r24, r20
    2f42:	95 1f       	adc	r25, r21
    2f44:	0e 94 fe 20 	call	0x41fc	; 0x41fc <srand>
			grePosX=45;
    2f48:	8d e2       	ldi	r24, 0x2D	; 45
    2f4a:	90 e0       	ldi	r25, 0x00	; 0
    2f4c:	90 93 98 01 	sts	0x0198, r25
    2f50:	80 93 97 01 	sts	0x0197, r24
			grePosY=22;
    2f54:	86 e1       	ldi	r24, 0x16	; 22
    2f56:	90 e0       	ldi	r25, 0x00	; 0
    2f58:	90 93 9a 01 	sts	0x019A, r25
    2f5c:	80 93 99 01 	sts	0x0199, r24
    2f60:	0b c0       	rjmp	.+22     	; 0x2f78 <update_bomb+0x28c>
	
			while(grePosX > 35 && grePosX < 55){
				grePosX = 18 + rand() %60;
    2f62:	0e 94 fb 20 	call	0x41f6	; 0x41f6 <rand>
    2f66:	6c e3       	ldi	r22, 0x3C	; 60
    2f68:	70 e0       	ldi	r23, 0x00	; 0
    2f6a:	0e 94 54 20 	call	0x40a8	; 0x40a8 <__divmodhi4>
    2f6e:	42 96       	adiw	r24, 0x12	; 18
    2f70:	90 93 98 01 	sts	0x0198, r25
    2f74:	80 93 97 01 	sts	0x0197, r24
			bomb.height=3;
			srand(clockCounter + (seedcount * globalCounter));
			grePosX=45;
			grePosY=22;
	
			while(grePosX > 35 && grePosX < 55){
    2f78:	80 91 97 01 	lds	r24, 0x0197
    2f7c:	90 91 98 01 	lds	r25, 0x0198
    2f80:	84 97       	sbiw	r24, 0x24	; 36
    2f82:	94 f0       	brlt	.+36     	; 0x2fa8 <update_bomb+0x2bc>
    2f84:	80 91 97 01 	lds	r24, 0x0197
    2f88:	90 91 98 01 	lds	r25, 0x0198
    2f8c:	c7 97       	sbiw	r24, 0x37	; 55
    2f8e:	4c f3       	brlt	.-46     	; 0x2f62 <update_bomb+0x276>
    2f90:	0b c0       	rjmp	.+22     	; 0x2fa8 <update_bomb+0x2bc>
				grePosX = 18 + rand() %60;
			}
			while(grePosY > 12 && grePosY< 23){
				grePosY = 2+ rand() %30;
    2f92:	0e 94 fb 20 	call	0x41f6	; 0x41f6 <rand>
    2f96:	6e e1       	ldi	r22, 0x1E	; 30
    2f98:	70 e0       	ldi	r23, 0x00	; 0
    2f9a:	0e 94 54 20 	call	0x40a8	; 0x40a8 <__divmodhi4>
    2f9e:	02 96       	adiw	r24, 0x02	; 2
    2fa0:	90 93 9a 01 	sts	0x019A, r25
    2fa4:	80 93 99 01 	sts	0x0199, r24
			grePosY=22;
	
			while(grePosX > 35 && grePosX < 55){
				grePosX = 18 + rand() %60;
			}
			while(grePosY > 12 && grePosY< 23){
    2fa8:	80 91 99 01 	lds	r24, 0x0199
    2fac:	90 91 9a 01 	lds	r25, 0x019A
    2fb0:	0d 97       	sbiw	r24, 0x0d	; 13
    2fb2:	34 f0       	brlt	.+12     	; 0x2fc0 <update_bomb+0x2d4>
    2fb4:	80 91 99 01 	lds	r24, 0x0199
    2fb8:	90 91 9a 01 	lds	r25, 0x019A
    2fbc:	47 97       	sbiw	r24, 0x17	; 23
    2fbe:	4c f3       	brlt	.-46     	; 0x2f92 <update_bomb+0x2a6>
				grePosY = 2+ rand() %30;
			}
			
			bomb.x=grePosX;
    2fc0:	60 91 97 01 	lds	r22, 0x0197
    2fc4:	70 91 98 01 	lds	r23, 0x0198
    2fc8:	88 27       	eor	r24, r24
    2fca:	77 fd       	sbrc	r23, 7
    2fcc:	80 95       	com	r24
    2fce:	98 2f       	mov	r25, r24
    2fd0:	d3 d3       	rcall	.+1958   	; 0x3778 <__floatsisf>
    2fd2:	60 93 0c 03 	sts	0x030C, r22
    2fd6:	70 93 0d 03 	sts	0x030D, r23
    2fda:	80 93 0e 03 	sts	0x030E, r24
    2fde:	90 93 0f 03 	sts	0x030F, r25
			bomb.y=grePosY;
    2fe2:	60 91 99 01 	lds	r22, 0x0199
    2fe6:	70 91 9a 01 	lds	r23, 0x019A
    2fea:	88 27       	eor	r24, r24
    2fec:	77 fd       	sbrc	r23, 7
    2fee:	80 95       	com	r24
    2ff0:	98 2f       	mov	r25, r24
    2ff2:	c2 d3       	rcall	.+1924   	; 0x3778 <__floatsisf>
    2ff4:	60 93 10 03 	sts	0x0310, r22
    2ff8:	70 93 11 03 	sts	0x0311, r23
    2ffc:	80 93 12 03 	sts	0x0312, r24
    3000:	90 93 13 03 	sts	0x0313, r25
		}
	}
	
}
    3004:	1f 91       	pop	r17
    3006:	0f 91       	pop	r16
    3008:	ff 90       	pop	r15
    300a:	ef 90       	pop	r14
    300c:	df 90       	pop	r13
    300e:	cf 90       	pop	r12
    3010:	bf 90       	pop	r11
    3012:	af 90       	pop	r10
    3014:	08 95       	ret

00003016 <__vector_23>:

	}
}

ISR(TIMER0_OVF_vect)
{
    3016:	1f 92       	push	r1
    3018:	0f 92       	push	r0
    301a:	0f b6       	in	r0, 0x3f	; 63
    301c:	0f 92       	push	r0
    301e:	11 24       	eor	r1, r1
    3020:	ff 92       	push	r15
    3022:	0f 93       	push	r16
    3024:	1f 93       	push	r17
    3026:	2f 93       	push	r18
    3028:	3f 93       	push	r19
    302a:	4f 93       	push	r20
    302c:	5f 93       	push	r21
    302e:	6f 93       	push	r22
    3030:	7f 93       	push	r23
    3032:	8f 93       	push	r24
    3034:	9f 93       	push	r25
    3036:	af 93       	push	r26
    3038:	bf 93       	push	r27
    303a:	ef 93       	push	r30
    303c:	ff 93       	push	r31
    303e:	df 93       	push	r29
    3040:	cf 93       	push	r28
    3042:	cd b7       	in	r28, 0x3d	; 61
    3044:	de b7       	in	r29, 0x3e	; 62
    3046:	2f 97       	sbiw	r28, 0x0f	; 15
    3048:	de bf       	out	0x3e, r29	; 62
    304a:	cd bf       	out	0x3d, r28	; 61
	if(gameOver==0){
    304c:	80 91 24 02 	lds	r24, 0x0224
    3050:	90 91 25 02 	lds	r25, 0x0225
    3054:	89 2b       	or	r24, r25
    3056:	09 f0       	breq	.+2      	; 0x305a <__vector_23+0x44>
    3058:	0d c1       	rjmp	.+538    	; 0x3274 <__vector_23+0x25e>
	if(stage==1){
    305a:	80 91 2e 02 	lds	r24, 0x022E
    305e:	90 91 2f 02 	lds	r25, 0x022F
    3062:	01 97       	sbiw	r24, 0x01	; 1
    3064:	09 f0       	breq	.+2      	; 0x3068 <__vector_23+0x52>
    3066:	06 c1       	rjmp	.+524    	; 0x3274 <__vector_23+0x25e>
	refresh();
    3068:	c2 d6       	rcall	.+3460   	; 0x3dee <refresh>
	TIFR0 |= (1<<TOV0);
    306a:	a8 9a       	sbi	0x15, 0	; 21
	clockCounter++;
    306c:	80 91 2a 02 	lds	r24, 0x022A
    3070:	90 91 2b 02 	lds	r25, 0x022B
    3074:	01 96       	adiw	r24, 0x01	; 1
    3076:	90 93 2b 02 	sts	0x022B, r25
    307a:	80 93 2a 02 	sts	0x022A, r24
	
	if(clockCounter >= MAX_CLOCK_COUNTER_FOR_100MSECOND)
    307e:	80 91 2a 02 	lds	r24, 0x022A
    3082:	90 91 2b 02 	lds	r25, 0x022B
    3086:	03 97       	sbiw	r24, 0x03	; 3
    3088:	0c f4       	brge	.+2      	; 0x308c <__vector_23+0x76>
    308a:	9e c0       	rjmp	.+316    	; 0x31c8 <__vector_23+0x1b2>
	{		
		jumpingCount--;
    308c:	80 91 9b 01 	lds	r24, 0x019B
    3090:	90 91 9c 01 	lds	r25, 0x019C
    3094:	01 97       	sbiw	r24, 0x01	; 1
    3096:	90 93 9c 01 	sts	0x019C, r25
    309a:	80 93 9b 01 	sts	0x019B, r24
		explosionTime--;
    309e:	80 91 9d 01 	lds	r24, 0x019D
    30a2:	90 91 9e 01 	lds	r25, 0x019E
    30a6:	01 97       	sbiw	r24, 0x01	; 1
    30a8:	90 93 9e 01 	sts	0x019E, r25
    30ac:	80 93 9d 01 	sts	0x019D, r24
	
		
		clear();
    30b0:	17 d4       	rcall	.+2094   	; 0x38e0 <clear>
		globalCounter++;
    30b2:	80 91 26 02 	lds	r24, 0x0226
    30b6:	90 91 27 02 	lds	r25, 0x0227
    30ba:	01 96       	adiw	r24, 0x01	; 1
    30bc:	90 93 27 02 	sts	0x0227, r25
    30c0:	80 93 26 02 	sts	0x0226, r24
		if(globalCounter==20){
    30c4:	80 91 26 02 	lds	r24, 0x0226
    30c8:	90 91 27 02 	lds	r25, 0x0227
    30cc:	44 97       	sbiw	r24, 0x14	; 20
    30ce:	69 f4       	brne	.+26     	; 0x30ea <__vector_23+0xd4>
			scoreCounter = scoreCounter+1;
    30d0:	80 91 28 02 	lds	r24, 0x0228
    30d4:	90 91 29 02 	lds	r25, 0x0229
    30d8:	01 96       	adiw	r24, 0x01	; 1
    30da:	90 93 29 02 	sts	0x0229, r25
    30de:	80 93 28 02 	sts	0x0228, r24
			globalCounter=0;
    30e2:	10 92 27 02 	sts	0x0227, r1
    30e6:	10 92 26 02 	sts	0x0226, r1
    30ea:	00 e0       	ldi	r16, 0x00	; 0
    30ec:	10 e0       	ldi	r17, 0x00	; 0
    30ee:	ff 24       	eor	r15, r15
    30f0:	0b c0       	rjmp	.+22     	; 0x3108 <__vector_23+0xf2>
		}
		
		for (int i=0; i<lives; i++){
		draw_character(' ', 4 ,(6 * (i+1)));
    30f2:	0f 5f       	subi	r16, 0xFF	; 255
    30f4:	1f 4f       	sbci	r17, 0xFF	; 255
    30f6:	80 e2       	ldi	r24, 0x20	; 32
    30f8:	64 e0       	ldi	r22, 0x04	; 4
    30fa:	4f 2d       	mov	r20, r15
    30fc:	13 d6       	rcall	.+3110   	; 0x3d24 <draw_character>
		draw_character('*', 4, (6 * i));
    30fe:	4f 2d       	mov	r20, r15
    3100:	46 50       	subi	r20, 0x06	; 6
    3102:	8a e2       	ldi	r24, 0x2A	; 42
    3104:	64 e0       	ldi	r22, 0x04	; 4
    3106:	0e d6       	rcall	.+3100   	; 0x3d24 <draw_character>
		if(globalCounter==20){
			scoreCounter = scoreCounter+1;
			globalCounter=0;
		}
		
		for (int i=0; i<lives; i++){
    3108:	80 91 a1 01 	lds	r24, 0x01A1
    310c:	90 91 a2 01 	lds	r25, 0x01A2
    3110:	26 e0       	ldi	r18, 0x06	; 6
    3112:	f2 0e       	add	r15, r18
    3114:	08 17       	cp	r16, r24
    3116:	19 07       	cpc	r17, r25
    3118:	64 f3       	brlt	.-40     	; 0x30f2 <__vector_23+0xdc>
		draw_character(' ', 4 ,(6 * (i+1)));
		draw_character('*', 4, (6 * i));
		}
				
		if(items[0] == 1){
    311a:	80 91 21 03 	lds	r24, 0x0321
    311e:	90 91 22 03 	lds	r25, 0x0322
    3122:	01 97       	sbiw	r24, 0x01	; 1
    3124:	11 f4       	brne	.+4      	; 0x312a <__vector_23+0x114>
		draw_character('o', 4 ,19);
    3126:	8f e6       	ldi	r24, 0x6F	; 111
    3128:	07 c0       	rjmp	.+14     	; 0x3138 <__vector_23+0x122>
		}
		else if(items[0] == 0){
    312a:	80 91 21 03 	lds	r24, 0x0321
    312e:	90 91 22 03 	lds	r25, 0x0322
    3132:	89 2b       	or	r24, r25
    3134:	21 f4       	brne	.+8      	; 0x313e <__vector_23+0x128>
		draw_character(' ', 4 ,19);
    3136:	80 e2       	ldi	r24, 0x20	; 32
    3138:	64 e0       	ldi	r22, 0x04	; 4
    313a:	43 e1       	ldi	r20, 0x13	; 19
    313c:	f3 d5       	rcall	.+3046   	; 0x3d24 <draw_character>
		}
		if(upgrade == 1){
    313e:	80 91 18 02 	lds	r24, 0x0218
    3142:	90 91 19 02 	lds	r25, 0x0219
    3146:	01 97       	sbiw	r24, 0x01	; 1
    3148:	11 f4       	brne	.+4      	; 0x314e <__vector_23+0x138>
		draw_character('|', 4 ,28);
    314a:	8c e7       	ldi	r24, 0x7C	; 124
    314c:	07 c0       	rjmp	.+14     	; 0x315c <__vector_23+0x146>
		}
		else if(upgrade == 0){
    314e:	80 91 18 02 	lds	r24, 0x0218
    3152:	90 91 19 02 	lds	r25, 0x0219
    3156:	89 2b       	or	r24, r25
    3158:	21 f4       	brne	.+8      	; 0x3162 <__vector_23+0x14c>
		draw_character(' ', 4 ,28);
    315a:	80 e2       	ldi	r24, 0x20	; 32
    315c:	64 e0       	ldi	r22, 0x04	; 4
    315e:	4c e1       	ldi	r20, 0x1C	; 28
    3160:	e1 d5       	rcall	.+3010   	; 0x3d24 <draw_character>
		}
		
		draw_line(14,0,14,47);
    3162:	8e e0       	ldi	r24, 0x0E	; 14
    3164:	60 e0       	ldi	r22, 0x00	; 0
    3166:	4e e0       	ldi	r20, 0x0E	; 14
    3168:	2f e2       	ldi	r18, 0x2F	; 47
    316a:	f5 d3       	rcall	.+2026   	; 0x3956 <draw_line>
		draw_line(83,0,83,47);
    316c:	83 e5       	ldi	r24, 0x53	; 83
    316e:	60 e0       	ldi	r22, 0x00	; 0
    3170:	43 e5       	ldi	r20, 0x53	; 83
    3172:	2f e2       	ldi	r18, 0x2F	; 47
    3174:	f0 d3       	rcall	.+2016   	; 0x3956 <draw_line>
		draw_line(14,0,83,0);
    3176:	8e e0       	ldi	r24, 0x0E	; 14
    3178:	60 e0       	ldi	r22, 0x00	; 0
    317a:	43 e5       	ldi	r20, 0x53	; 83
    317c:	20 e0       	ldi	r18, 0x00	; 0
    317e:	eb d3       	rcall	.+2006   	; 0x3956 <draw_line>
		draw_line(14,47,83,47);
    3180:	8e e0       	ldi	r24, 0x0E	; 14
    3182:	6f e2       	ldi	r22, 0x2F	; 47
    3184:	43 e5       	ldi	r20, 0x53	; 83
    3186:	2f e2       	ldi	r18, 0x2F	; 47
    3188:	e6 d3       	rcall	.+1996   	; 0x3956 <draw_line>
		draw_pit();
    318a:	a8 d8       	rcall	.-3760   	; 0x22dc <draw_pit>
		
		clockCounter = 0;
    318c:	10 92 2b 02 	sts	0x022B, r1
    3190:	10 92 2a 02 	sts	0x022A, r1
		
			if (lives <= 0){
    3194:	80 91 a1 01 	lds	r24, 0x01A1
    3198:	90 91 a2 01 	lds	r25, 0x01A2
    319c:	18 16       	cp	r1, r24
    319e:	19 06       	cpc	r1, r25
    31a0:	34 f0       	brlt	.+12     	; 0x31ae <__vector_23+0x198>
				gameOver=1;
    31a2:	81 e0       	ldi	r24, 0x01	; 1
    31a4:	90 e0       	ldi	r25, 0x00	; 0
    31a6:	90 93 25 02 	sts	0x0225, r25
    31aa:	80 93 24 02 	sts	0x0224, r24
			}
			if (gameOverCount <= 0){
    31ae:	80 91 ab 01 	lds	r24, 0x01AB
    31b2:	90 91 ac 01 	lds	r25, 0x01AC
    31b6:	18 16       	cp	r1, r24
    31b8:	19 06       	cpc	r1, r25
    31ba:	34 f0       	brlt	.+12     	; 0x31c8 <__vector_23+0x1b2>
				gameOver=2;
    31bc:	82 e0       	ldi	r24, 0x02	; 2
    31be:	90 e0       	ldi	r25, 0x00	; 0
    31c0:	90 93 25 02 	sts	0x0225, r25
    31c4:	80 93 24 02 	sts	0x0224, r24
			}
		}

		update_sprite(&sprite);
    31c8:	87 e4       	ldi	r24, 0x47	; 71
    31ca:	92 e0       	ldi	r25, 0x02	; 2
    31cc:	0e 94 78 04 	call	0x8f0	; 0x8f0 <update_sprite>
		update_weapon();
    31d0:	bb db       	rcall	.-2186   	; 0x2948 <update_weapon>
		update_bomb();
    31d2:	8c dd       	rcall	.-1256   	; 0x2cec <update_bomb>
    31d4:	04 e6       	ldi	r16, 0x64	; 100
    31d6:	12 e0       	ldi	r17, 0x02	; 2
		
		for ( int i = 0; i < ZOMBIE_COUNT; i++ ) {
			pit_collision(&zombies[i]);
    31d8:	c8 01       	movw	r24, r16
    31da:	0e 94 a4 0b 	call	0x1748	; 0x1748 <pit_collision>
    31de:	0b 5e       	subi	r16, 0xEB	; 235
    31e0:	1f 4f       	sbci	r17, 0xFF	; 255

		update_sprite(&sprite);
		update_weapon();
		update_bomb();
		
		for ( int i = 0; i < ZOMBIE_COUNT; i++ ) {
    31e2:	83 e0       	ldi	r24, 0x03	; 3
    31e4:	0c 30       	cpi	r16, 0x0C	; 12
    31e6:	18 07       	cpc	r17, r24
    31e8:	b9 f7       	brne	.-18     	; 0x31d8 <__vector_23+0x1c2>
			pit_collision(&zombies[i]);
		}
 		
		z_stage_collision();
    31ea:	0e 94 47 08 	call	0x108e	; 0x108e <z_stage_collision>
		hero_collision();
    31ee:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <hero_collision>
		stage_collision(&sprite);
    31f2:	87 e4       	ldi	r24, 0x47	; 71
    31f4:	92 e0       	ldi	r25, 0x02	; 2
    31f6:	0e 94 42 05 	call	0xa84	; 0xa84 <stage_collision>
		draw_sprite(&sprite);
    31fa:	87 e4       	ldi	r24, 0x47	; 71
    31fc:	92 e0       	ldi	r25, 0x02	; 2
    31fe:	8c d6       	rcall	.+3352   	; 0x3f18 <draw_sprite>
		draw_sprite(&sword);
    3200:	82 e3       	ldi	r24, 0x32	; 50
    3202:	92 e0       	ldi	r25, 0x02	; 2
    3204:	89 d6       	rcall	.+3346   	; 0x3f18 <draw_sprite>
		draw_sprite(&bomb);
    3206:	8c e0       	ldi	r24, 0x0C	; 12
    3208:	93 e0       	ldi	r25, 0x03	; 3
    320a:	86 d6       	rcall	.+3340   	; 0x3f18 <draw_sprite>
		draw_stage();
    320c:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <draw_stage>
		cooldown--;
    3210:	80 91 1e 02 	lds	r24, 0x021E
    3214:	90 91 1f 02 	lds	r25, 0x021F
    3218:	01 97       	sbiw	r24, 0x01	; 1
    321a:	90 93 1f 02 	sts	0x021F, r25
    321e:	80 93 1e 02 	sts	0x021E, r24
		
		update_zombies();
    3222:	a4 d8       	rcall	.-3768   	; 0x236c <update_zombies>
		
		check_collison();
    3224:	ba d9       	rcall	.-3212   	; 0x259a <check_collison>
		
		char score[15];
		sprintf(score, "%d", scoreCounter);
    3226:	20 91 28 02 	lds	r18, 0x0228
    322a:	30 91 29 02 	lds	r19, 0x0229
    322e:	00 d0       	rcall	.+0      	; 0x3230 <__vector_23+0x21a>
    3230:	00 d0       	rcall	.+0      	; 0x3232 <__vector_23+0x21c>
    3232:	00 d0       	rcall	.+0      	; 0x3234 <__vector_23+0x21e>
    3234:	ed b7       	in	r30, 0x3d	; 61
    3236:	fe b7       	in	r31, 0x3e	; 62
    3238:	31 96       	adiw	r30, 0x01	; 1
    323a:	8e 01       	movw	r16, r28
    323c:	0f 5f       	subi	r16, 0xFF	; 255
    323e:	1f 4f       	sbci	r17, 0xFF	; 255
    3240:	ad b7       	in	r26, 0x3d	; 61
    3242:	be b7       	in	r27, 0x3e	; 62
    3244:	12 96       	adiw	r26, 0x02	; 2
    3246:	1c 93       	st	X, r17
    3248:	0e 93       	st	-X, r16
    324a:	11 97       	sbiw	r26, 0x01	; 1
    324c:	80 e0       	ldi	r24, 0x00	; 0
    324e:	91 e0       	ldi	r25, 0x01	; 1
    3250:	93 83       	std	Z+3, r25	; 0x03
    3252:	82 83       	std	Z+2, r24	; 0x02
    3254:	35 83       	std	Z+5, r19	; 0x05
    3256:	24 83       	std	Z+4, r18	; 0x04
    3258:	dc d7       	rcall	.+4024   	; 0x4212 <sprintf>
		draw_string(score, 0, 39);
    325a:	8d b7       	in	r24, 0x3d	; 61
    325c:	9e b7       	in	r25, 0x3e	; 62
    325e:	06 96       	adiw	r24, 0x06	; 6
    3260:	0f b6       	in	r0, 0x3f	; 63
    3262:	f8 94       	cli
    3264:	9e bf       	out	0x3e, r25	; 62
    3266:	0f be       	out	0x3f, r0	; 63
    3268:	8d bf       	out	0x3d, r24	; 61
    326a:	c8 01       	movw	r24, r16
    326c:	60 e0       	ldi	r22, 0x00	; 0
    326e:	47 e2       	ldi	r20, 0x27	; 39
    3270:	a9 d5       	rcall	.+2898   	; 0x3dc4 <draw_string>
		
		refresh();
    3272:	bd d5       	rcall	.+2938   	; 0x3dee <refresh>
	}
	}
    3274:	2f 96       	adiw	r28, 0x0f	; 15
    3276:	de bf       	out	0x3e, r29	; 62
    3278:	cd bf       	out	0x3d, r28	; 61
    327a:	cf 91       	pop	r28
    327c:	df 91       	pop	r29
    327e:	ff 91       	pop	r31
    3280:	ef 91       	pop	r30
    3282:	bf 91       	pop	r27
    3284:	af 91       	pop	r26
    3286:	9f 91       	pop	r25
    3288:	8f 91       	pop	r24
    328a:	7f 91       	pop	r23
    328c:	6f 91       	pop	r22
    328e:	5f 91       	pop	r21
    3290:	4f 91       	pop	r20
    3292:	3f 91       	pop	r19
    3294:	2f 91       	pop	r18
    3296:	1f 91       	pop	r17
    3298:	0f 91       	pop	r16
    329a:	ff 90       	pop	r15
    329c:	0f 90       	pop	r0
    329e:	0f be       	out	0x3f, r0	; 63
    32a0:	0f 90       	pop	r0
    32a2:	1f 90       	pop	r1
    32a4:	18 95       	reti

000032a6 <Init>:
	return 0;
}

void Init()
{
	DDRB |= (1<<PB2)|(1<<PB3);	//LED0 and LED1 as outputs
    32a6:	84 b1       	in	r24, 0x04	; 4
    32a8:	8c 60       	ori	r24, 0x0C	; 12
    32aa:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~((1<<PB0)|(1<<PB1));	//Switch0 and Switch1 as input
    32ac:	84 b1       	in	r24, 0x04	; 4
    32ae:	8c 7f       	andi	r24, 0xFC	; 252
    32b0:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00; 	// Turn everything off to start with
    32b2:	15 b8       	out	0x05, r1	; 5
	LCDInitialise( LCD_DEFAULT_CONTRAST );
    32b4:	8f e3       	ldi	r24, 0x3F	; 63
    32b6:	cd d5       	rcall	.+2970   	; 0x3e52 <LCDInitialise>
	clear();
    32b8:	13 d3       	rcall	.+1574   	; 0x38e0 <clear>
	refresh();
}
    32ba:	99 c5       	rjmp	.+2866   	; 0x3dee <refresh>

000032bc <main>:
		BYTE( 01111111 ),
		BYTE( 00101110 ),
	};

int main(void)
{
    32bc:	bf 92       	push	r11
    32be:	cf 92       	push	r12
    32c0:	df 92       	push	r13
    32c2:	ef 92       	push	r14
    32c4:	ff 92       	push	r15
    32c6:	0f 93       	push	r16
    32c8:	1f 93       	push	r17
    32ca:	cf 93       	push	r28
    32cc:	df 93       	push	r29
	//Initialize
	CPU_PRESCALE(CPU_8MHz);
    32ce:	80 e8       	ldi	r24, 0x80	; 128
    32d0:	80 93 61 00 	sts	0x0061, r24
    32d4:	11 e0       	ldi	r17, 0x01	; 1
    32d6:	10 93 61 00 	sts	0x0061, r17
	Init();
    32da:	e5 df       	rcall	.-54     	; 0x32a6 <Init>
	PinChangeInit();
    32dc:	0e 94 64 04 	call	0x8c8	; 0x8c8 <PinChangeInit>
	title_screen();	
    32e0:	3e d1       	rcall	.+636    	; 0x355e <title_screen>
	TimerInit();
    32e2:	0e 94 51 04 	call	0x8a2	; 0x8a2 <TimerInit>
	
	clear();
    32e6:	fc d2       	rcall	.+1528   	; 0x38e0 <clear>
	init_sprite(&sprite, ((LCD_X/2)+5), LCD_Y/2, 3, 3, bithero );
    32e8:	87 e4       	ldi	r24, 0x47	; 71
    32ea:	92 e0       	ldi	r25, 0x02	; 2
    32ec:	6f e2       	ldi	r22, 0x2F	; 47
    32ee:	48 e1       	ldi	r20, 0x18	; 24
    32f0:	23 e0       	ldi	r18, 0x03	; 3
    32f2:	03 e0       	ldi	r16, 0x03	; 3
    32f4:	a1 eb       	ldi	r26, 0xB1	; 177
    32f6:	ea 2e       	mov	r14, r26
    32f8:	a1 e0       	ldi	r26, 0x01	; 1
    32fa:	fa 2e       	mov	r15, r26
    32fc:	dd d5       	rcall	.+3002   	; 0x3eb8 <init_sprite>
	sprite.is_visible=1;
    32fe:	10 93 51 02 	sts	0x0251, r17
	sprite.dx=-1;
    3302:	80 e0       	ldi	r24, 0x00	; 0
    3304:	90 e0       	ldi	r25, 0x00	; 0
    3306:	a0 e8       	ldi	r26, 0x80	; 128
    3308:	bf eb       	ldi	r27, 0xBF	; 191
    330a:	80 93 54 02 	sts	0x0254, r24
    330e:	90 93 55 02 	sts	0x0255, r25
    3312:	a0 93 56 02 	sts	0x0256, r26
    3316:	b0 93 57 02 	sts	0x0257, r27
	draw_sprite(&sprite);
    331a:	87 e4       	ldi	r24, 0x47	; 71
    331c:	92 e0       	ldi	r25, 0x02	; 2
    331e:	fc d5       	rcall	.+3064   	; 0x3f18 <draw_sprite>
    3320:	c4 e6       	ldi	r28, 0x64	; 100
    3322:	d2 e0       	ldi	r29, 0x02	; 2
    3324:	cc 24       	eor	r12, r12
    3326:	dd 24       	eor	r13, r13
		tempY = 2+ rand() %30;
		seedcount++;
	}
	swit=-swit;
	init_sprite(&zombies[i], tempX, tempY, 3, 3, bitzom );
	zombies[i].is_visible=1;
    3328:	bb 24       	eor	r11, r11
    332a:	b3 94       	inc	r11
	draw_sprite(&sprite);
	
for ( int i = 0; i < ZOMBIE_COUNT; i++ ) {
	int tempX=45;
	int tempY=22;
	srand(pincount* i* seedcount);
    332c:	80 91 20 02 	lds	r24, 0x0220
    3330:	90 91 21 02 	lds	r25, 0x0221
    3334:	20 91 9f 01 	lds	r18, 0x019F
    3338:	30 91 a0 01 	lds	r19, 0x01A0
    333c:	ac 01       	movw	r20, r24
    333e:	24 9f       	mul	r18, r20
    3340:	c0 01       	movw	r24, r0
    3342:	25 9f       	mul	r18, r21
    3344:	90 0d       	add	r25, r0
    3346:	34 9f       	mul	r19, r20
    3348:	90 0d       	add	r25, r0
    334a:	11 24       	eor	r1, r1
    334c:	9c 01       	movw	r18, r24
    334e:	2c 9d       	mul	r18, r12
    3350:	c0 01       	movw	r24, r0
    3352:	2d 9d       	mul	r18, r13
    3354:	90 0d       	add	r25, r0
    3356:	3c 9d       	mul	r19, r12
    3358:	90 0d       	add	r25, r0
    335a:	11 24       	eor	r1, r1
    335c:	4f d7       	rcall	.+3742   	; 0x41fc <srand>
    335e:	0d e2       	ldi	r16, 0x2D	; 45
    3360:	10 e0       	ldi	r17, 0x00	; 0
    3362:	10 c0       	rjmp	.+32     	; 0x3384 <main+0xc8>
	
	while(tempX > 35 && tempX < 55){
		tempX = 18 + rand() %70;
    3364:	48 d7       	rcall	.+3728   	; 0x41f6 <rand>
    3366:	66 e4       	ldi	r22, 0x46	; 70
    3368:	70 e0       	ldi	r23, 0x00	; 0
    336a:	9e d6       	rcall	.+3388   	; 0x40a8 <__divmodhi4>
    336c:	8c 01       	movw	r16, r24
    336e:	0e 5e       	subi	r16, 0xEE	; 238
    3370:	1f 4f       	sbci	r17, 0xFF	; 255
		seedcount++;
    3372:	80 91 9f 01 	lds	r24, 0x019F
    3376:	90 91 a0 01 	lds	r25, 0x01A0
    337a:	01 96       	adiw	r24, 0x01	; 1
    337c:	90 93 a0 01 	sts	0x01A0, r25
    3380:	80 93 9f 01 	sts	0x019F, r24
for ( int i = 0; i < ZOMBIE_COUNT; i++ ) {
	int tempX=45;
	int tempY=22;
	srand(pincount* i* seedcount);
	
	while(tempX > 35 && tempX < 55){
    3384:	c8 01       	movw	r24, r16
    3386:	84 97       	sbiw	r24, 0x24	; 36
    3388:	43 97       	sbiw	r24, 0x13	; 19
    338a:	60 f3       	brcs	.-40     	; 0x3364 <main+0xa8>
    338c:	46 e1       	ldi	r20, 0x16	; 22
    338e:	50 e0       	ldi	r21, 0x00	; 0
    3390:	10 c0       	rjmp	.+32     	; 0x33b2 <main+0xf6>
		tempX = 18 + rand() %70;
		seedcount++;
	}
	while(tempY > 12 && tempY< 23){
		tempY = 2+ rand() %30;
    3392:	31 d7       	rcall	.+3682   	; 0x41f6 <rand>
    3394:	6e e1       	ldi	r22, 0x1E	; 30
    3396:	70 e0       	ldi	r23, 0x00	; 0
    3398:	87 d6       	rcall	.+3342   	; 0x40a8 <__divmodhi4>
    339a:	ac 01       	movw	r20, r24
    339c:	4e 5f       	subi	r20, 0xFE	; 254
    339e:	5f 4f       	sbci	r21, 0xFF	; 255
		seedcount++;
    33a0:	80 91 9f 01 	lds	r24, 0x019F
    33a4:	90 91 a0 01 	lds	r25, 0x01A0
    33a8:	01 96       	adiw	r24, 0x01	; 1
    33aa:	90 93 a0 01 	sts	0x01A0, r25
    33ae:	80 93 9f 01 	sts	0x019F, r24
	
	while(tempX > 35 && tempX < 55){
		tempX = 18 + rand() %70;
		seedcount++;
	}
	while(tempY > 12 && tempY< 23){
    33b2:	ca 01       	movw	r24, r20
    33b4:	0d 97       	sbiw	r24, 0x0d	; 13
    33b6:	0a 97       	sbiw	r24, 0x0a	; 10
    33b8:	60 f3       	brcs	.-40     	; 0x3392 <main+0xd6>
		tempY = 2+ rand() %30;
		seedcount++;
	}
	swit=-swit;
    33ba:	80 91 ad 01 	lds	r24, 0x01AD
    33be:	90 91 ae 01 	lds	r25, 0x01AE
    33c2:	a0 91 af 01 	lds	r26, 0x01AF
    33c6:	b0 91 b0 01 	lds	r27, 0x01B0
    33ca:	b0 58       	subi	r27, 0x80	; 128
    33cc:	80 93 ad 01 	sts	0x01AD, r24
    33d0:	90 93 ae 01 	sts	0x01AE, r25
    33d4:	a0 93 af 01 	sts	0x01AF, r26
    33d8:	b0 93 b0 01 	sts	0x01B0, r27
	init_sprite(&zombies[i], tempX, tempY, 3, 3, bitzom );
    33dc:	ce 01       	movw	r24, r28
    33de:	60 2f       	mov	r22, r16
    33e0:	23 e0       	ldi	r18, 0x03	; 3
    33e2:	03 e0       	ldi	r16, 0x03	; 3
    33e4:	f4 eb       	ldi	r31, 0xB4	; 180
    33e6:	ef 2e       	mov	r14, r31
    33e8:	f1 e0       	ldi	r31, 0x01	; 1
    33ea:	ff 2e       	mov	r15, r31
    33ec:	65 d5       	rcall	.+2762   	; 0x3eb8 <init_sprite>
	zombies[i].is_visible=1;
    33ee:	ba 86       	std	Y+10, r11	; 0x0a
	zombies[i].dx=-swit;
    33f0:	80 91 ad 01 	lds	r24, 0x01AD
    33f4:	90 91 ae 01 	lds	r25, 0x01AE
    33f8:	a0 91 af 01 	lds	r26, 0x01AF
    33fc:	b0 91 b0 01 	lds	r27, 0x01B0
    3400:	b0 58       	subi	r27, 0x80	; 128
    3402:	8d 87       	std	Y+13, r24	; 0x0d
    3404:	9e 87       	std	Y+14, r25	; 0x0e
    3406:	af 87       	std	Y+15, r26	; 0x0f
    3408:	b8 8b       	std	Y+16, r27	; 0x10
	zombies[i].dy=swit;
    340a:	80 91 ad 01 	lds	r24, 0x01AD
    340e:	90 91 ae 01 	lds	r25, 0x01AE
    3412:	a0 91 af 01 	lds	r26, 0x01AF
    3416:	b0 91 b0 01 	lds	r27, 0x01B0
    341a:	89 8b       	std	Y+17, r24	; 0x11
    341c:	9a 8b       	std	Y+18, r25	; 0x12
    341e:	ab 8b       	std	Y+19, r26	; 0x13
    3420:	bc 8b       	std	Y+20, r27	; 0x14
	draw_sprite(&zombies[i]);
    3422:	ce 01       	movw	r24, r28
    3424:	79 d5       	rcall	.+2802   	; 0x3f18 <draw_sprite>
	seedcount++;
    3426:	80 91 9f 01 	lds	r24, 0x019F
    342a:	90 91 a0 01 	lds	r25, 0x01A0
    342e:	01 96       	adiw	r24, 0x01	; 1
    3430:	90 93 a0 01 	sts	0x01A0, r25
    3434:	80 93 9f 01 	sts	0x019F, r24
	init_sprite(&sprite, ((LCD_X/2)+5), LCD_Y/2, 3, 3, bithero );
	sprite.is_visible=1;
	sprite.dx=-1;
	draw_sprite(&sprite);
	
for ( int i = 0; i < ZOMBIE_COUNT; i++ ) {
    3438:	08 94       	sec
    343a:	c1 1c       	adc	r12, r1
    343c:	d1 1c       	adc	r13, r1
    343e:	65 96       	adiw	r28, 0x15	; 21
    3440:	38 e0       	ldi	r19, 0x08	; 8
    3442:	c3 16       	cp	r12, r19
    3444:	d1 04       	cpc	r13, r1
    3446:	09 f0       	breq	.+2      	; 0x344a <main+0x18e>
    3448:	71 cf       	rjmp	.-286    	; 0x332c <main+0x70>
	zombies[i].dy=swit;
	draw_sprite(&zombies[i]);
	seedcount++;
}

	init_sprite(&sword, sprite.x, ((sprite.y)-3), 3, 3, bitsword );
    344a:	60 91 47 02 	lds	r22, 0x0247
    344e:	70 91 48 02 	lds	r23, 0x0248
    3452:	80 91 49 02 	lds	r24, 0x0249
    3456:	90 91 4a 02 	lds	r25, 0x024A
    345a:	60 d1       	rcall	.+704    	; 0x371c <__fixunssfsi>
    345c:	7b 01       	movw	r14, r22
    345e:	8c 01       	movw	r16, r24
    3460:	60 91 4b 02 	lds	r22, 0x024B
    3464:	70 91 4c 02 	lds	r23, 0x024C
    3468:	80 91 4d 02 	lds	r24, 0x024D
    346c:	90 91 4e 02 	lds	r25, 0x024E
    3470:	20 e0       	ldi	r18, 0x00	; 0
    3472:	30 e0       	ldi	r19, 0x00	; 0
    3474:	40 e4       	ldi	r20, 0x40	; 64
    3476:	50 e4       	ldi	r21, 0x40	; 64
    3478:	e3 d0       	rcall	.+454    	; 0x3640 <__subsf3>
    347a:	50 d1       	rcall	.+672    	; 0x371c <__fixunssfsi>
    347c:	9b 01       	movw	r18, r22
    347e:	ac 01       	movw	r20, r24
    3480:	82 e3       	ldi	r24, 0x32	; 50
    3482:	92 e0       	ldi	r25, 0x02	; 2
    3484:	6e 2d       	mov	r22, r14
    3486:	42 2f       	mov	r20, r18
    3488:	23 e0       	ldi	r18, 0x03	; 3
    348a:	03 e0       	ldi	r16, 0x03	; 3
    348c:	e7 eb       	ldi	r30, 0xB7	; 183
    348e:	ee 2e       	mov	r14, r30
    3490:	e1 e0       	ldi	r30, 0x01	; 1
    3492:	fe 2e       	mov	r15, r30
    3494:	11 d5       	rcall	.+2594   	; 0x3eb8 <init_sprite>
	sword.is_visible=1;
    3496:	b0 92 3c 02 	sts	0x023C, r11
	sword.dx= sprite.dx;
    349a:	80 91 54 02 	lds	r24, 0x0254
    349e:	90 91 55 02 	lds	r25, 0x0255
    34a2:	a0 91 56 02 	lds	r26, 0x0256
    34a6:	b0 91 57 02 	lds	r27, 0x0257
    34aa:	80 93 3f 02 	sts	0x023F, r24
    34ae:	90 93 40 02 	sts	0x0240, r25
    34b2:	a0 93 41 02 	sts	0x0241, r26
    34b6:	b0 93 42 02 	sts	0x0242, r27
	sword.dy= sprite.dy;
    34ba:	80 91 58 02 	lds	r24, 0x0258
    34be:	90 91 59 02 	lds	r25, 0x0259
    34c2:	a0 91 5a 02 	lds	r26, 0x025A
    34c6:	b0 91 5b 02 	lds	r27, 0x025B
    34ca:	80 93 43 02 	sts	0x0243, r24
    34ce:	90 93 44 02 	sts	0x0244, r25
    34d2:	a0 93 45 02 	sts	0x0245, r26
    34d6:	b0 93 46 02 	sts	0x0246, r27
	draw_sprite(&sword);
    34da:	82 e3       	ldi	r24, 0x32	; 50
    34dc:	92 e0       	ldi	r25, 0x02	; 2
    34de:	1c d5       	rcall	.+2616   	; 0x3f18 <draw_sprite>
		
	init_sprite(&bomb, grePosX, grePosY, 3, 3, bitbomb );
    34e0:	60 91 97 01 	lds	r22, 0x0197
    34e4:	70 91 98 01 	lds	r23, 0x0198
    34e8:	40 91 99 01 	lds	r20, 0x0199
    34ec:	50 91 9a 01 	lds	r21, 0x019A
    34f0:	8c e0       	ldi	r24, 0x0C	; 12
    34f2:	93 e0       	ldi	r25, 0x03	; 3
    34f4:	23 e0       	ldi	r18, 0x03	; 3
    34f6:	7d eb       	ldi	r23, 0xBD	; 189
    34f8:	e7 2e       	mov	r14, r23
    34fa:	71 e0       	ldi	r23, 0x01	; 1
    34fc:	f7 2e       	mov	r15, r23
    34fe:	dc d4       	rcall	.+2488   	; 0x3eb8 <init_sprite>
	bomb.is_visible=1;
    3500:	b0 92 16 03 	sts	0x0316, r11
	draw_sprite(&bomb);
    3504:	8c e0       	ldi	r24, 0x0C	; 12
    3506:	93 e0       	ldi	r25, 0x03	; 3
    3508:	07 d5       	rcall	.+2574   	; 0x3f18 <draw_sprite>
	
	while(!gameOver)
    350a:	80 91 24 02 	lds	r24, 0x0224
    350e:	90 91 25 02 	lds	r25, 0x0225
    3512:	89 2b       	or	r24, r25
    3514:	d1 f3       	breq	.-12     	; 0x350a <main+0x24e>
	{
	}
	clear();
    3516:	e4 d1       	rcall	.+968    	; 0x38e0 <clear>
	if(gameOver==1){
    3518:	80 91 24 02 	lds	r24, 0x0224
    351c:	90 91 25 02 	lds	r25, 0x0225
    3520:	01 97       	sbiw	r24, 0x01	; 1
    3522:	29 f4       	brne	.+10     	; 0x352e <main+0x272>
		draw_string("GAME OVER!", LCD_X/2-25, LCD_Y/2-5);
    3524:	83 e0       	ldi	r24, 0x03	; 3
    3526:	91 e0       	ldi	r25, 0x01	; 1
    3528:	61 e1       	ldi	r22, 0x11	; 17
    352a:	43 e1       	ldi	r20, 0x13	; 19
    352c:	4b d4       	rcall	.+2198   	; 0x3dc4 <draw_string>
	}
	if(gameOver==2){
    352e:	80 91 24 02 	lds	r24, 0x0224
    3532:	90 91 25 02 	lds	r25, 0x0225
    3536:	02 97       	sbiw	r24, 0x02	; 2
    3538:	29 f4       	brne	.+10     	; 0x3544 <main+0x288>
		draw_string("YOU WIN!", LCD_X/2-25, LCD_Y/2-5);
    353a:	8e e0       	ldi	r24, 0x0E	; 14
    353c:	91 e0       	ldi	r25, 0x01	; 1
    353e:	61 e1       	ldi	r22, 0x11	; 17
    3540:	43 e1       	ldi	r20, 0x13	; 19
    3542:	40 d4       	rcall	.+2176   	; 0x3dc4 <draw_string>
	}
	refresh();
    3544:	54 d4       	rcall	.+2216   	; 0x3dee <refresh>
		
	return 0;
}
    3546:	80 e0       	ldi	r24, 0x00	; 0
    3548:	90 e0       	ldi	r25, 0x00	; 0
    354a:	df 91       	pop	r29
    354c:	cf 91       	pop	r28
    354e:	1f 91       	pop	r17
    3550:	0f 91       	pop	r16
    3552:	ff 90       	pop	r15
    3554:	ef 90       	pop	r14
    3556:	df 90       	pop	r13
    3558:	cf 90       	pop	r12
    355a:	bf 90       	pop	r11
    355c:	08 95       	ret

0000355e <title_screen>:
	clear();
}

int title_screen() {
	
stage = 0;
    355e:	10 92 2f 02 	sts	0x022F, r1
    3562:	10 92 2e 02 	sts	0x022E, r1
choice = 1;
    3566:	81 e0       	ldi	r24, 0x01	; 1
    3568:	90 e0       	ldi	r25, 0x00	; 0
    356a:	90 93 07 02 	sts	0x0207, r25
    356e:	80 93 06 02 	sts	0x0206, r24
chosen = 0;
    3572:	10 92 31 02 	sts	0x0231, r1
    3576:	10 92 30 02 	sts	0x0230, r1

	clear();
    357a:	b2 d1       	rcall	.+868    	; 0x38e0 <clear>
	draw_string( "Zombie", 25, 0 );
    357c:	88 ec       	ldi	r24, 0xC8	; 200
    357e:	91 e0       	ldi	r25, 0x01	; 1
    3580:	69 e1       	ldi	r22, 0x19	; 25
    3582:	40 e0       	ldi	r20, 0x00	; 0
    3584:	1f d4       	rcall	.+2110   	; 0x3dc4 <draw_string>
	draw_string( "Fear the Humans!", 0, 10 );
    3586:	8f ec       	ldi	r24, 0xCF	; 207
    3588:	91 e0       	ldi	r25, 0x01	; 1
    358a:	60 e0       	ldi	r22, 0x00	; 0
    358c:	4a e0       	ldi	r20, 0x0A	; 10
    358e:	1a d4       	rcall	.+2100   	; 0x3dc4 <draw_string>
	draw_character('*',0,20);
    3590:	8a e2       	ldi	r24, 0x2A	; 42
    3592:	60 e0       	ldi	r22, 0x00	; 0
    3594:	44 e1       	ldi	r20, 0x14	; 20
    3596:	c6 d3       	rcall	.+1932   	; 0x3d24 <draw_character>
	draw_string( "Easy", 6, 20 );
    3598:	80 ee       	ldi	r24, 0xE0	; 224
    359a:	91 e0       	ldi	r25, 0x01	; 1
    359c:	66 e0       	ldi	r22, 0x06	; 6
    359e:	44 e1       	ldi	r20, 0x14	; 20
    35a0:	11 d4       	rcall	.+2082   	; 0x3dc4 <draw_string>
	draw_string( "Hard", 40, 20 );
    35a2:	85 ee       	ldi	r24, 0xE5	; 229
    35a4:	91 e0       	ldi	r25, 0x01	; 1
    35a6:	68 e2       	ldi	r22, 0x28	; 40
    35a8:	44 e1       	ldi	r20, 0x14	; 20
    35aa:	0c d4       	rcall	.+2072   	; 0x3dc4 <draw_string>
	draw_string( "Eliot Wilson", 0, 30 );
    35ac:	8a ee       	ldi	r24, 0xEA	; 234
    35ae:	91 e0       	ldi	r25, 0x01	; 1
    35b0:	60 e0       	ldi	r22, 0x00	; 0
    35b2:	4e e1       	ldi	r20, 0x1E	; 30
    35b4:	07 d4       	rcall	.+2062   	; 0x3dc4 <draw_string>
	draw_string( "n9175504", 0, 40 );
    35b6:	87 ef       	ldi	r24, 0xF7	; 247
    35b8:	91 e0       	ldi	r25, 0x01	; 1
    35ba:	60 e0       	ldi	r22, 0x00	; 0
    35bc:	48 e2       	ldi	r20, 0x28	; 40
    35be:	02 d4       	rcall	.+2052   	; 0x3dc4 <draw_string>
	refresh();
    35c0:	16 d4       	rcall	.+2092   	; 0x3dee <refresh>

	while(!chosen)
    35c2:	80 91 30 02 	lds	r24, 0x0230
    35c6:	90 91 31 02 	lds	r25, 0x0231
    35ca:	89 2b       	or	r24, r25
    35cc:	d1 f3       	breq	.-12     	; 0x35c2 <title_screen+0x64>
	{
	}
	clear();
    35ce:	88 d1       	rcall	.+784    	; 0x38e0 <clear>
	draw_string( "3", 40, 20 );
    35d0:	80 e0       	ldi	r24, 0x00	; 0
    35d2:	92 e0       	ldi	r25, 0x02	; 2
    35d4:	68 e2       	ldi	r22, 0x28	; 40
    35d6:	44 e1       	ldi	r20, 0x14	; 20
    35d8:	f5 d3       	rcall	.+2026   	; 0x3dc4 <draw_string>
	refresh();
    35da:	09 d4       	rcall	.+2066   	; 0x3dee <refresh>
    35dc:	80 e1       	ldi	r24, 0x10	; 16
    35de:	97 e2       	ldi	r25, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    35e0:	28 ec       	ldi	r18, 0xC8	; 200
    35e2:	30 e0       	ldi	r19, 0x00	; 0
    35e4:	f9 01       	movw	r30, r18
    35e6:	31 97       	sbiw	r30, 0x01	; 1
    35e8:	f1 f7       	brne	.-4      	; 0x35e6 <title_screen+0x88>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35ea:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35ec:	d9 f7       	brne	.-10     	; 0x35e4 <title_screen+0x86>
	_delay_ms( 1000 );
	clear();
    35ee:	78 d1       	rcall	.+752    	; 0x38e0 <clear>
	draw_string( "2", 40, 20 );
    35f0:	82 e0       	ldi	r24, 0x02	; 2
    35f2:	92 e0       	ldi	r25, 0x02	; 2
    35f4:	68 e2       	ldi	r22, 0x28	; 40
    35f6:	44 e1       	ldi	r20, 0x14	; 20
    35f8:	e5 d3       	rcall	.+1994   	; 0x3dc4 <draw_string>
	refresh();
    35fa:	f9 d3       	rcall	.+2034   	; 0x3dee <refresh>
    35fc:	80 e1       	ldi	r24, 0x10	; 16
    35fe:	97 e2       	ldi	r25, 0x27	; 39
    3600:	28 ec       	ldi	r18, 0xC8	; 200
    3602:	30 e0       	ldi	r19, 0x00	; 0
    3604:	f9 01       	movw	r30, r18
    3606:	31 97       	sbiw	r30, 0x01	; 1
    3608:	f1 f7       	brne	.-4      	; 0x3606 <title_screen+0xa8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    360a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    360c:	d9 f7       	brne	.-10     	; 0x3604 <title_screen+0xa6>
	_delay_ms( 1000 );
	clear();
    360e:	68 d1       	rcall	.+720    	; 0x38e0 <clear>
	draw_string( "1", 40, 20 );
    3610:	84 e0       	ldi	r24, 0x04	; 4
    3612:	92 e0       	ldi	r25, 0x02	; 2
    3614:	68 e2       	ldi	r22, 0x28	; 40
    3616:	44 e1       	ldi	r20, 0x14	; 20
    3618:	d5 d3       	rcall	.+1962   	; 0x3dc4 <draw_string>
	refresh();
    361a:	e9 d3       	rcall	.+2002   	; 0x3dee <refresh>
    361c:	80 e1       	ldi	r24, 0x10	; 16
    361e:	97 e2       	ldi	r25, 0x27	; 39
    3620:	28 ec       	ldi	r18, 0xC8	; 200
    3622:	30 e0       	ldi	r19, 0x00	; 0
    3624:	f9 01       	movw	r30, r18
    3626:	31 97       	sbiw	r30, 0x01	; 1
    3628:	f1 f7       	brne	.-4      	; 0x3626 <title_screen+0xc8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    362a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    362c:	d9 f7       	brne	.-10     	; 0x3624 <title_screen+0xc6>
	_delay_ms( 1000 );
	stage = 1;
    362e:	81 e0       	ldi	r24, 0x01	; 1
    3630:	90 e0       	ldi	r25, 0x00	; 0
    3632:	90 93 2f 02 	sts	0x022F, r25
    3636:	80 93 2e 02 	sts	0x022E, r24
	return 0;
}
    363a:	80 e0       	ldi	r24, 0x00	; 0
    363c:	90 e0       	ldi	r25, 0x00	; 0
    363e:	08 95       	ret

00003640 <__subsf3>:
    3640:	50 58       	subi	r21, 0x80	; 128

00003642 <__addsf3>:
    3642:	bb 27       	eor	r27, r27
    3644:	aa 27       	eor	r26, r26
    3646:	0e d0       	rcall	.+28     	; 0x3664 <__addsf3x>
    3648:	0d c1       	rjmp	.+538    	; 0x3864 <__fp_round>
    364a:	fe d0       	rcall	.+508    	; 0x3848 <__fp_pscA>
    364c:	30 f0       	brcs	.+12     	; 0x365a <__addsf3+0x18>
    364e:	03 d1       	rcall	.+518    	; 0x3856 <__fp_pscB>
    3650:	20 f0       	brcs	.+8      	; 0x365a <__addsf3+0x18>
    3652:	31 f4       	brne	.+12     	; 0x3660 <__addsf3+0x1e>
    3654:	9f 3f       	cpi	r25, 0xFF	; 255
    3656:	11 f4       	brne	.+4      	; 0x365c <__addsf3+0x1a>
    3658:	1e f4       	brtc	.+6      	; 0x3660 <__addsf3+0x1e>
    365a:	f3 c0       	rjmp	.+486    	; 0x3842 <__fp_nan>
    365c:	0e f4       	brtc	.+2      	; 0x3660 <__addsf3+0x1e>
    365e:	e0 95       	com	r30
    3660:	e7 fb       	bst	r30, 7
    3662:	e9 c0       	rjmp	.+466    	; 0x3836 <__fp_inf>

00003664 <__addsf3x>:
    3664:	e9 2f       	mov	r30, r25
    3666:	0f d1       	rcall	.+542    	; 0x3886 <__fp_split3>
    3668:	80 f3       	brcs	.-32     	; 0x364a <__addsf3+0x8>
    366a:	ba 17       	cp	r27, r26
    366c:	62 07       	cpc	r22, r18
    366e:	73 07       	cpc	r23, r19
    3670:	84 07       	cpc	r24, r20
    3672:	95 07       	cpc	r25, r21
    3674:	18 f0       	brcs	.+6      	; 0x367c <__addsf3x+0x18>
    3676:	71 f4       	brne	.+28     	; 0x3694 <__addsf3x+0x30>
    3678:	9e f5       	brtc	.+102    	; 0x36e0 <__addsf3x+0x7c>
    367a:	27 c1       	rjmp	.+590    	; 0x38ca <__fp_zero>
    367c:	0e f4       	brtc	.+2      	; 0x3680 <__addsf3x+0x1c>
    367e:	e0 95       	com	r30
    3680:	0b 2e       	mov	r0, r27
    3682:	ba 2f       	mov	r27, r26
    3684:	a0 2d       	mov	r26, r0
    3686:	0b 01       	movw	r0, r22
    3688:	b9 01       	movw	r22, r18
    368a:	90 01       	movw	r18, r0
    368c:	0c 01       	movw	r0, r24
    368e:	ca 01       	movw	r24, r20
    3690:	a0 01       	movw	r20, r0
    3692:	11 24       	eor	r1, r1
    3694:	ff 27       	eor	r31, r31
    3696:	59 1b       	sub	r21, r25
    3698:	99 f0       	breq	.+38     	; 0x36c0 <__addsf3x+0x5c>
    369a:	59 3f       	cpi	r21, 0xF9	; 249
    369c:	50 f4       	brcc	.+20     	; 0x36b2 <__addsf3x+0x4e>
    369e:	50 3e       	cpi	r21, 0xE0	; 224
    36a0:	68 f1       	brcs	.+90     	; 0x36fc <__addsf3x+0x98>
    36a2:	1a 16       	cp	r1, r26
    36a4:	f0 40       	sbci	r31, 0x00	; 0
    36a6:	a2 2f       	mov	r26, r18
    36a8:	23 2f       	mov	r18, r19
    36aa:	34 2f       	mov	r19, r20
    36ac:	44 27       	eor	r20, r20
    36ae:	58 5f       	subi	r21, 0xF8	; 248
    36b0:	f3 cf       	rjmp	.-26     	; 0x3698 <__addsf3x+0x34>
    36b2:	46 95       	lsr	r20
    36b4:	37 95       	ror	r19
    36b6:	27 95       	ror	r18
    36b8:	a7 95       	ror	r26
    36ba:	f0 40       	sbci	r31, 0x00	; 0
    36bc:	53 95       	inc	r21
    36be:	c9 f7       	brne	.-14     	; 0x36b2 <__addsf3x+0x4e>
    36c0:	7e f4       	brtc	.+30     	; 0x36e0 <__addsf3x+0x7c>
    36c2:	1f 16       	cp	r1, r31
    36c4:	ba 0b       	sbc	r27, r26
    36c6:	62 0b       	sbc	r22, r18
    36c8:	73 0b       	sbc	r23, r19
    36ca:	84 0b       	sbc	r24, r20
    36cc:	ba f0       	brmi	.+46     	; 0x36fc <__addsf3x+0x98>
    36ce:	91 50       	subi	r25, 0x01	; 1
    36d0:	a1 f0       	breq	.+40     	; 0x36fa <__addsf3x+0x96>
    36d2:	ff 0f       	add	r31, r31
    36d4:	bb 1f       	adc	r27, r27
    36d6:	66 1f       	adc	r22, r22
    36d8:	77 1f       	adc	r23, r23
    36da:	88 1f       	adc	r24, r24
    36dc:	c2 f7       	brpl	.-16     	; 0x36ce <__addsf3x+0x6a>
    36de:	0e c0       	rjmp	.+28     	; 0x36fc <__addsf3x+0x98>
    36e0:	ba 0f       	add	r27, r26
    36e2:	62 1f       	adc	r22, r18
    36e4:	73 1f       	adc	r23, r19
    36e6:	84 1f       	adc	r24, r20
    36e8:	48 f4       	brcc	.+18     	; 0x36fc <__addsf3x+0x98>
    36ea:	87 95       	ror	r24
    36ec:	77 95       	ror	r23
    36ee:	67 95       	ror	r22
    36f0:	b7 95       	ror	r27
    36f2:	f7 95       	ror	r31
    36f4:	9e 3f       	cpi	r25, 0xFE	; 254
    36f6:	08 f0       	brcs	.+2      	; 0x36fa <__addsf3x+0x96>
    36f8:	b3 cf       	rjmp	.-154    	; 0x3660 <__addsf3+0x1e>
    36fa:	93 95       	inc	r25
    36fc:	88 0f       	add	r24, r24
    36fe:	08 f0       	brcs	.+2      	; 0x3702 <__addsf3x+0x9e>
    3700:	99 27       	eor	r25, r25
    3702:	ee 0f       	add	r30, r30
    3704:	97 95       	ror	r25
    3706:	87 95       	ror	r24
    3708:	08 95       	ret

0000370a <__cmpsf2>:
    370a:	71 d0       	rcall	.+226    	; 0x37ee <__fp_cmp>
    370c:	08 f4       	brcc	.+2      	; 0x3710 <__cmpsf2+0x6>
    370e:	81 e0       	ldi	r24, 0x01	; 1
    3710:	08 95       	ret

00003712 <__fixsfsi>:
    3712:	04 d0       	rcall	.+8      	; 0x371c <__fixunssfsi>
    3714:	68 94       	set
    3716:	b1 11       	cpse	r27, r1
    3718:	d9 c0       	rjmp	.+434    	; 0x38cc <__fp_szero>
    371a:	08 95       	ret

0000371c <__fixunssfsi>:
    371c:	bc d0       	rcall	.+376    	; 0x3896 <__fp_splitA>
    371e:	88 f0       	brcs	.+34     	; 0x3742 <__fixunssfsi+0x26>
    3720:	9f 57       	subi	r25, 0x7F	; 127
    3722:	90 f0       	brcs	.+36     	; 0x3748 <__fixunssfsi+0x2c>
    3724:	b9 2f       	mov	r27, r25
    3726:	99 27       	eor	r25, r25
    3728:	b7 51       	subi	r27, 0x17	; 23
    372a:	a0 f0       	brcs	.+40     	; 0x3754 <__fixunssfsi+0x38>
    372c:	d1 f0       	breq	.+52     	; 0x3762 <__fixunssfsi+0x46>
    372e:	66 0f       	add	r22, r22
    3730:	77 1f       	adc	r23, r23
    3732:	88 1f       	adc	r24, r24
    3734:	99 1f       	adc	r25, r25
    3736:	1a f0       	brmi	.+6      	; 0x373e <__fixunssfsi+0x22>
    3738:	ba 95       	dec	r27
    373a:	c9 f7       	brne	.-14     	; 0x372e <__fixunssfsi+0x12>
    373c:	12 c0       	rjmp	.+36     	; 0x3762 <__fixunssfsi+0x46>
    373e:	b1 30       	cpi	r27, 0x01	; 1
    3740:	81 f0       	breq	.+32     	; 0x3762 <__fixunssfsi+0x46>
    3742:	c3 d0       	rcall	.+390    	; 0x38ca <__fp_zero>
    3744:	b1 e0       	ldi	r27, 0x01	; 1
    3746:	08 95       	ret
    3748:	c0 c0       	rjmp	.+384    	; 0x38ca <__fp_zero>
    374a:	67 2f       	mov	r22, r23
    374c:	78 2f       	mov	r23, r24
    374e:	88 27       	eor	r24, r24
    3750:	b8 5f       	subi	r27, 0xF8	; 248
    3752:	39 f0       	breq	.+14     	; 0x3762 <__fixunssfsi+0x46>
    3754:	b9 3f       	cpi	r27, 0xF9	; 249
    3756:	cc f3       	brlt	.-14     	; 0x374a <__fixunssfsi+0x2e>
    3758:	86 95       	lsr	r24
    375a:	77 95       	ror	r23
    375c:	67 95       	ror	r22
    375e:	b3 95       	inc	r27
    3760:	d9 f7       	brne	.-10     	; 0x3758 <__fixunssfsi+0x3c>
    3762:	3e f4       	brtc	.+14     	; 0x3772 <__fixunssfsi+0x56>
    3764:	90 95       	com	r25
    3766:	80 95       	com	r24
    3768:	70 95       	com	r23
    376a:	61 95       	neg	r22
    376c:	7f 4f       	sbci	r23, 0xFF	; 255
    376e:	8f 4f       	sbci	r24, 0xFF	; 255
    3770:	9f 4f       	sbci	r25, 0xFF	; 255
    3772:	08 95       	ret

00003774 <__floatunsisf>:
    3774:	e8 94       	clt
    3776:	09 c0       	rjmp	.+18     	; 0x378a <__floatsisf+0x12>

00003778 <__floatsisf>:
    3778:	97 fb       	bst	r25, 7
    377a:	3e f4       	brtc	.+14     	; 0x378a <__floatsisf+0x12>
    377c:	90 95       	com	r25
    377e:	80 95       	com	r24
    3780:	70 95       	com	r23
    3782:	61 95       	neg	r22
    3784:	7f 4f       	sbci	r23, 0xFF	; 255
    3786:	8f 4f       	sbci	r24, 0xFF	; 255
    3788:	9f 4f       	sbci	r25, 0xFF	; 255
    378a:	99 23       	and	r25, r25
    378c:	a9 f0       	breq	.+42     	; 0x37b8 <__floatsisf+0x40>
    378e:	f9 2f       	mov	r31, r25
    3790:	96 e9       	ldi	r25, 0x96	; 150
    3792:	bb 27       	eor	r27, r27
    3794:	93 95       	inc	r25
    3796:	f6 95       	lsr	r31
    3798:	87 95       	ror	r24
    379a:	77 95       	ror	r23
    379c:	67 95       	ror	r22
    379e:	b7 95       	ror	r27
    37a0:	f1 11       	cpse	r31, r1
    37a2:	f8 cf       	rjmp	.-16     	; 0x3794 <__floatsisf+0x1c>
    37a4:	fa f4       	brpl	.+62     	; 0x37e4 <__floatsisf+0x6c>
    37a6:	bb 0f       	add	r27, r27
    37a8:	11 f4       	brne	.+4      	; 0x37ae <__floatsisf+0x36>
    37aa:	60 ff       	sbrs	r22, 0
    37ac:	1b c0       	rjmp	.+54     	; 0x37e4 <__floatsisf+0x6c>
    37ae:	6f 5f       	subi	r22, 0xFF	; 255
    37b0:	7f 4f       	sbci	r23, 0xFF	; 255
    37b2:	8f 4f       	sbci	r24, 0xFF	; 255
    37b4:	9f 4f       	sbci	r25, 0xFF	; 255
    37b6:	16 c0       	rjmp	.+44     	; 0x37e4 <__floatsisf+0x6c>
    37b8:	88 23       	and	r24, r24
    37ba:	11 f0       	breq	.+4      	; 0x37c0 <__floatsisf+0x48>
    37bc:	96 e9       	ldi	r25, 0x96	; 150
    37be:	11 c0       	rjmp	.+34     	; 0x37e2 <__floatsisf+0x6a>
    37c0:	77 23       	and	r23, r23
    37c2:	21 f0       	breq	.+8      	; 0x37cc <__floatsisf+0x54>
    37c4:	9e e8       	ldi	r25, 0x8E	; 142
    37c6:	87 2f       	mov	r24, r23
    37c8:	76 2f       	mov	r23, r22
    37ca:	05 c0       	rjmp	.+10     	; 0x37d6 <__floatsisf+0x5e>
    37cc:	66 23       	and	r22, r22
    37ce:	71 f0       	breq	.+28     	; 0x37ec <__floatsisf+0x74>
    37d0:	96 e8       	ldi	r25, 0x86	; 134
    37d2:	86 2f       	mov	r24, r22
    37d4:	70 e0       	ldi	r23, 0x00	; 0
    37d6:	60 e0       	ldi	r22, 0x00	; 0
    37d8:	2a f0       	brmi	.+10     	; 0x37e4 <__floatsisf+0x6c>
    37da:	9a 95       	dec	r25
    37dc:	66 0f       	add	r22, r22
    37de:	77 1f       	adc	r23, r23
    37e0:	88 1f       	adc	r24, r24
    37e2:	da f7       	brpl	.-10     	; 0x37da <__floatsisf+0x62>
    37e4:	88 0f       	add	r24, r24
    37e6:	96 95       	lsr	r25
    37e8:	87 95       	ror	r24
    37ea:	97 f9       	bld	r25, 7
    37ec:	08 95       	ret

000037ee <__fp_cmp>:
    37ee:	99 0f       	add	r25, r25
    37f0:	00 08       	sbc	r0, r0
    37f2:	55 0f       	add	r21, r21
    37f4:	aa 0b       	sbc	r26, r26
    37f6:	e0 e8       	ldi	r30, 0x80	; 128
    37f8:	fe ef       	ldi	r31, 0xFE	; 254
    37fa:	16 16       	cp	r1, r22
    37fc:	17 06       	cpc	r1, r23
    37fe:	e8 07       	cpc	r30, r24
    3800:	f9 07       	cpc	r31, r25
    3802:	c0 f0       	brcs	.+48     	; 0x3834 <__fp_cmp+0x46>
    3804:	12 16       	cp	r1, r18
    3806:	13 06       	cpc	r1, r19
    3808:	e4 07       	cpc	r30, r20
    380a:	f5 07       	cpc	r31, r21
    380c:	98 f0       	brcs	.+38     	; 0x3834 <__fp_cmp+0x46>
    380e:	62 1b       	sub	r22, r18
    3810:	73 0b       	sbc	r23, r19
    3812:	84 0b       	sbc	r24, r20
    3814:	95 0b       	sbc	r25, r21
    3816:	39 f4       	brne	.+14     	; 0x3826 <__fp_cmp+0x38>
    3818:	0a 26       	eor	r0, r26
    381a:	61 f0       	breq	.+24     	; 0x3834 <__fp_cmp+0x46>
    381c:	23 2b       	or	r18, r19
    381e:	24 2b       	or	r18, r20
    3820:	25 2b       	or	r18, r21
    3822:	21 f4       	brne	.+8      	; 0x382c <__fp_cmp+0x3e>
    3824:	08 95       	ret
    3826:	0a 26       	eor	r0, r26
    3828:	09 f4       	brne	.+2      	; 0x382c <__fp_cmp+0x3e>
    382a:	a1 40       	sbci	r26, 0x01	; 1
    382c:	a6 95       	lsr	r26
    382e:	8f ef       	ldi	r24, 0xFF	; 255
    3830:	81 1d       	adc	r24, r1
    3832:	81 1d       	adc	r24, r1
    3834:	08 95       	ret

00003836 <__fp_inf>:
    3836:	97 f9       	bld	r25, 7
    3838:	9f 67       	ori	r25, 0x7F	; 127
    383a:	80 e8       	ldi	r24, 0x80	; 128
    383c:	70 e0       	ldi	r23, 0x00	; 0
    383e:	60 e0       	ldi	r22, 0x00	; 0
    3840:	08 95       	ret

00003842 <__fp_nan>:
    3842:	9f ef       	ldi	r25, 0xFF	; 255
    3844:	80 ec       	ldi	r24, 0xC0	; 192
    3846:	08 95       	ret

00003848 <__fp_pscA>:
    3848:	00 24       	eor	r0, r0
    384a:	0a 94       	dec	r0
    384c:	16 16       	cp	r1, r22
    384e:	17 06       	cpc	r1, r23
    3850:	18 06       	cpc	r1, r24
    3852:	09 06       	cpc	r0, r25
    3854:	08 95       	ret

00003856 <__fp_pscB>:
    3856:	00 24       	eor	r0, r0
    3858:	0a 94       	dec	r0
    385a:	12 16       	cp	r1, r18
    385c:	13 06       	cpc	r1, r19
    385e:	14 06       	cpc	r1, r20
    3860:	05 06       	cpc	r0, r21
    3862:	08 95       	ret

00003864 <__fp_round>:
    3864:	09 2e       	mov	r0, r25
    3866:	03 94       	inc	r0
    3868:	00 0c       	add	r0, r0
    386a:	11 f4       	brne	.+4      	; 0x3870 <__fp_round+0xc>
    386c:	88 23       	and	r24, r24
    386e:	52 f0       	brmi	.+20     	; 0x3884 <__fp_round+0x20>
    3870:	bb 0f       	add	r27, r27
    3872:	40 f4       	brcc	.+16     	; 0x3884 <__fp_round+0x20>
    3874:	bf 2b       	or	r27, r31
    3876:	11 f4       	brne	.+4      	; 0x387c <__fp_round+0x18>
    3878:	60 ff       	sbrs	r22, 0
    387a:	04 c0       	rjmp	.+8      	; 0x3884 <__fp_round+0x20>
    387c:	6f 5f       	subi	r22, 0xFF	; 255
    387e:	7f 4f       	sbci	r23, 0xFF	; 255
    3880:	8f 4f       	sbci	r24, 0xFF	; 255
    3882:	9f 4f       	sbci	r25, 0xFF	; 255
    3884:	08 95       	ret

00003886 <__fp_split3>:
    3886:	57 fd       	sbrc	r21, 7
    3888:	90 58       	subi	r25, 0x80	; 128
    388a:	44 0f       	add	r20, r20
    388c:	55 1f       	adc	r21, r21
    388e:	59 f0       	breq	.+22     	; 0x38a6 <__fp_splitA+0x10>
    3890:	5f 3f       	cpi	r21, 0xFF	; 255
    3892:	71 f0       	breq	.+28     	; 0x38b0 <__fp_splitA+0x1a>
    3894:	47 95       	ror	r20

00003896 <__fp_splitA>:
    3896:	88 0f       	add	r24, r24
    3898:	97 fb       	bst	r25, 7
    389a:	99 1f       	adc	r25, r25
    389c:	61 f0       	breq	.+24     	; 0x38b6 <__fp_splitA+0x20>
    389e:	9f 3f       	cpi	r25, 0xFF	; 255
    38a0:	79 f0       	breq	.+30     	; 0x38c0 <__fp_splitA+0x2a>
    38a2:	87 95       	ror	r24
    38a4:	08 95       	ret
    38a6:	12 16       	cp	r1, r18
    38a8:	13 06       	cpc	r1, r19
    38aa:	14 06       	cpc	r1, r20
    38ac:	55 1f       	adc	r21, r21
    38ae:	f2 cf       	rjmp	.-28     	; 0x3894 <__fp_split3+0xe>
    38b0:	46 95       	lsr	r20
    38b2:	f1 df       	rcall	.-30     	; 0x3896 <__fp_splitA>
    38b4:	08 c0       	rjmp	.+16     	; 0x38c6 <__fp_splitA+0x30>
    38b6:	16 16       	cp	r1, r22
    38b8:	17 06       	cpc	r1, r23
    38ba:	18 06       	cpc	r1, r24
    38bc:	99 1f       	adc	r25, r25
    38be:	f1 cf       	rjmp	.-30     	; 0x38a2 <__fp_splitA+0xc>
    38c0:	86 95       	lsr	r24
    38c2:	71 05       	cpc	r23, r1
    38c4:	61 05       	cpc	r22, r1
    38c6:	08 94       	sec
    38c8:	08 95       	ret

000038ca <__fp_zero>:
    38ca:	e8 94       	clt

000038cc <__fp_szero>:
    38cc:	bb 27       	eor	r27, r27
    38ce:	66 27       	eor	r22, r22
    38d0:	77 27       	eor	r23, r23
    38d2:	cb 01       	movw	r24, r22
    38d4:	97 f9       	bld	r25, 7
    38d6:	08 95       	ret

000038d8 <__gesf2>:
    38d8:	8a df       	rcall	.-236    	; 0x37ee <__fp_cmp>
    38da:	08 f4       	brcc	.+2      	; 0x38de <__gesf2+0x6>
    38dc:	8f ef       	ldi	r24, 0xFF	; 255
    38de:	08 95       	ret

000038e0 <clear>:
		LCDWrite(LCD_D, screenBuffer[i]);
	}
	
}

void clear(void) {
    38e0:	e5 e2       	ldi	r30, 0x25	; 37
    38e2:	f3 e0       	ldi	r31, 0x03	; 3
	unsigned int i;
	for(i = 0; i < LCD_BUFFER_SIZE; i++){
		 screenBuffer[i] = 0;
    38e4:	11 92       	st	Z+, r1
	
}

void clear(void) {
	unsigned int i;
	for(i = 0; i < LCD_BUFFER_SIZE; i++){
    38e6:	85 e0       	ldi	r24, 0x05	; 5
    38e8:	ed 31       	cpi	r30, 0x1D	; 29
    38ea:	f8 07       	cpc	r31, r24
    38ec:	d9 f7       	brne	.-10     	; 0x38e4 <clear+0x4>
		 screenBuffer[i] = 0;
	}
}
    38ee:	08 95       	ret

000038f0 <set_pixel>:
void set_pixel(unsigned char x, unsigned char y, unsigned char value){
	// Sanity check (bad things happen otherwise...)
	if (x >= LCD_X || y >= LCD_Y) {
    38f0:	84 35       	cpi	r24, 0x54	; 84
    38f2:	80 f5       	brcc	.+96     	; 0x3954 <set_pixel+0x64>
    38f4:	60 33       	cpi	r22, 0x30	; 48
    38f6:	70 f5       	brcc	.+92     	; 0x3954 <set_pixel+0x64>
		return;
	}

	// Calculate the pixel 'subrow', within that LCD row
	unsigned char row = y/8;
    38f8:	26 2f       	mov	r18, r22
    38fa:	26 95       	lsr	r18
    38fc:	26 95       	lsr	r18
    38fe:	26 95       	lsr	r18
	unsigned char subrow = y%8;
    3900:	67 70       	andi	r22, 0x07	; 7
    3902:	90 e0       	ldi	r25, 0x00	; 0
	
	// Set that particular pixel in our screen buffer
	if (value){
    3904:	44 23       	and	r20, r20
    3906:	99 f0       	breq	.+38     	; 0x392e <set_pixel+0x3e>
		screenBuffer[row*84+x] |= (1 << subrow); //Set Pixel 
    3908:	e4 e5       	ldi	r30, 0x54	; 84
    390a:	2e 9f       	mul	r18, r30
    390c:	f0 01       	movw	r30, r0
    390e:	11 24       	eor	r1, r1
    3910:	e8 0f       	add	r30, r24
    3912:	f9 1f       	adc	r31, r25
    3914:	eb 5d       	subi	r30, 0xDB	; 219
    3916:	fc 4f       	sbci	r31, 0xFC	; 252
    3918:	81 e0       	ldi	r24, 0x01	; 1
    391a:	90 e0       	ldi	r25, 0x00	; 0
    391c:	02 c0       	rjmp	.+4      	; 0x3922 <set_pixel+0x32>
    391e:	88 0f       	add	r24, r24
    3920:	99 1f       	adc	r25, r25
    3922:	6a 95       	dec	r22
    3924:	e2 f7       	brpl	.-8      	; 0x391e <set_pixel+0x2e>
    3926:	20 81       	ld	r18, Z
    3928:	28 2b       	or	r18, r24
    392a:	20 83       	st	Z, r18
    392c:	08 95       	ret
	} else {
		screenBuffer[row*84+x] &= ~(1 << subrow); //Clear Pixel
    392e:	e4 e5       	ldi	r30, 0x54	; 84
    3930:	2e 9f       	mul	r18, r30
    3932:	f0 01       	movw	r30, r0
    3934:	11 24       	eor	r1, r1
    3936:	e8 0f       	add	r30, r24
    3938:	f9 1f       	adc	r31, r25
    393a:	eb 5d       	subi	r30, 0xDB	; 219
    393c:	fc 4f       	sbci	r31, 0xFC	; 252
    393e:	81 e0       	ldi	r24, 0x01	; 1
    3940:	90 e0       	ldi	r25, 0x00	; 0
    3942:	02 c0       	rjmp	.+4      	; 0x3948 <set_pixel+0x58>
    3944:	88 0f       	add	r24, r24
    3946:	99 1f       	adc	r25, r25
    3948:	6a 95       	dec	r22
    394a:	e2 f7       	brpl	.-8      	; 0x3944 <set_pixel+0x54>
    394c:	80 95       	com	r24
    394e:	20 81       	ld	r18, Z
    3950:	28 23       	and	r18, r24
    3952:	20 83       	st	Z, r18
    3954:	08 95       	ret

00003956 <draw_line>:
	}
}

void draw_line(unsigned char x1, unsigned char y1, unsigned char x2, unsigned char y2) {
    3956:	2f 92       	push	r2
    3958:	3f 92       	push	r3
    395a:	4f 92       	push	r4
    395c:	5f 92       	push	r5
    395e:	6f 92       	push	r6
    3960:	7f 92       	push	r7
    3962:	8f 92       	push	r8
    3964:	9f 92       	push	r9
    3966:	af 92       	push	r10
    3968:	bf 92       	push	r11
    396a:	cf 92       	push	r12
    396c:	df 92       	push	r13
    396e:	ef 92       	push	r14
    3970:	ff 92       	push	r15
    3972:	0f 93       	push	r16
    3974:	1f 93       	push	r17
    3976:	df 93       	push	r29
    3978:	cf 93       	push	r28
    397a:	cd b7       	in	r28, 0x3d	; 61
    397c:	de b7       	in	r29, 0x3e	; 62
    397e:	66 97       	sbiw	r28, 0x16	; 22
    3980:	0f b6       	in	r0, 0x3f	; 63
    3982:	f8 94       	cli
    3984:	de bf       	out	0x3e, r29	; 62
    3986:	0f be       	out	0x3f, r0	; 63
    3988:	cd bf       	out	0x3d, r28	; 61
    398a:	c8 2e       	mov	r12, r24
    398c:	d6 2e       	mov	r13, r22
    398e:	49 87       	std	Y+9, r20	; 0x09
    3990:	2a 87       	std	Y+10, r18	; 0x0a
	// Insert algorithm here.
	if (x1 == x2) {
    3992:	84 17       	cp	r24, r20
    3994:	59 f4       	brne	.+22     	; 0x39ac <draw_line+0x56>
    3996:	16 2f       	mov	r17, r22
    3998:	05 c0       	rjmp	.+10     	; 0x39a4 <draw_line+0x4e>
		//Draw Horizontal line
		unsigned char i;
		for (i = y1; i <= y2; i++){
			set_pixel(x1, i, 1);
    399a:	8c 2d       	mov	r24, r12
    399c:	61 2f       	mov	r22, r17
    399e:	41 e0       	ldi	r20, 0x01	; 1
    39a0:	a7 df       	rcall	.-178    	; 0x38f0 <set_pixel>
void draw_line(unsigned char x1, unsigned char y1, unsigned char x2, unsigned char y2) {
	// Insert algorithm here.
	if (x1 == x2) {
		//Draw Horizontal line
		unsigned char i;
		for (i = y1; i <= y2; i++){
    39a2:	1f 5f       	subi	r17, 0xFF	; 255
    39a4:	2a 85       	ldd	r18, Y+10	; 0x0a
    39a6:	21 17       	cp	r18, r17
    39a8:	c0 f7       	brcc	.-16     	; 0x399a <draw_line+0x44>
    39aa:	a3 c1       	rjmp	.+838    	; 0x3cf2 <draw_line+0x39c>
			set_pixel(x1, i, 1);
		}			
	} else if (y1 == y2){
    39ac:	3a 85       	ldd	r19, Y+10	; 0x0a
    39ae:	63 17       	cp	r22, r19
    39b0:	59 f4       	brne	.+22     	; 0x39c8 <draw_line+0x72>
    39b2:	18 2f       	mov	r17, r24
    39b4:	05 c0       	rjmp	.+10     	; 0x39c0 <draw_line+0x6a>
		//Draw vertical line
		unsigned char i;
		for (i = x1; i <= x2; i++){
			set_pixel(i, y1, 1);
    39b6:	81 2f       	mov	r24, r17
    39b8:	6d 2d       	mov	r22, r13
    39ba:	41 e0       	ldi	r20, 0x01	; 1
    39bc:	99 df       	rcall	.-206    	; 0x38f0 <set_pixel>
			set_pixel(x1, i, 1);
		}			
	} else if (y1 == y2){
		//Draw vertical line
		unsigned char i;
		for (i = x1; i <= x2; i++){
    39be:	1f 5f       	subi	r17, 0xFF	; 255
    39c0:	49 85       	ldd	r20, Y+9	; 0x09
    39c2:	41 17       	cp	r20, r17
    39c4:	c0 f7       	brcc	.-16     	; 0x39b6 <draw_line+0x60>
    39c6:	95 c1       	rjmp	.+810    	; 0x3cf2 <draw_line+0x39c>
		}		
	} else {
		//As if I am going to bother with diagonal
		// Figure out octant
		unsigned int oct;
		float g = ((float) y2-y1)/((float) x2-x1);
    39c8:	5a 85       	ldd	r21, Y+10	; 0x0a
    39ca:	65 2f       	mov	r22, r21
    39cc:	70 e0       	ldi	r23, 0x00	; 0
    39ce:	80 e0       	ldi	r24, 0x00	; 0
    39d0:	90 e0       	ldi	r25, 0x00	; 0
    39d2:	d0 de       	rcall	.-608    	; 0x3774 <__floatunsisf>
    39d4:	7b 01       	movw	r14, r22
    39d6:	8c 01       	movw	r16, r24
    39d8:	8d 2d       	mov	r24, r13
    39da:	90 e0       	ldi	r25, 0x00	; 0
    39dc:	9c 87       	std	Y+12, r25	; 0x0c
    39de:	8b 87       	std	Y+11, r24	; 0x0b
    39e0:	fc 01       	movw	r30, r24
    39e2:	bf 01       	movw	r22, r30
    39e4:	88 27       	eor	r24, r24
    39e6:	77 fd       	sbrc	r23, 7
    39e8:	80 95       	com	r24
    39ea:	98 2f       	mov	r25, r24
    39ec:	c5 de       	rcall	.-630    	; 0x3778 <__floatsisf>
    39ee:	9b 01       	movw	r18, r22
    39f0:	ac 01       	movw	r20, r24
    39f2:	c8 01       	movw	r24, r16
    39f4:	b7 01       	movw	r22, r14
    39f6:	24 de       	rcall	.-952    	; 0x3640 <__subsf3>
    39f8:	1b 01       	movw	r2, r22
    39fa:	2c 01       	movw	r4, r24
    39fc:	f9 85       	ldd	r31, Y+9	; 0x09
    39fe:	6f 2f       	mov	r22, r31
    3a00:	70 e0       	ldi	r23, 0x00	; 0
    3a02:	80 e0       	ldi	r24, 0x00	; 0
    3a04:	90 e0       	ldi	r25, 0x00	; 0
    3a06:	b6 de       	rcall	.-660    	; 0x3774 <__floatunsisf>
    3a08:	7b 01       	movw	r14, r22
    3a0a:	8c 01       	movw	r16, r24
    3a0c:	ac 2c       	mov	r10, r12
    3a0e:	bb 24       	eor	r11, r11
    3a10:	b5 01       	movw	r22, r10
    3a12:	88 27       	eor	r24, r24
    3a14:	77 fd       	sbrc	r23, 7
    3a16:	80 95       	com	r24
    3a18:	98 2f       	mov	r25, r24
    3a1a:	ae de       	rcall	.-676    	; 0x3778 <__floatsisf>
    3a1c:	9b 01       	movw	r18, r22
    3a1e:	ac 01       	movw	r20, r24
    3a20:	c8 01       	movw	r24, r16
    3a22:	b7 01       	movw	r22, r14
    3a24:	0d de       	rcall	.-998    	; 0x3640 <__subsf3>
    3a26:	3b 01       	movw	r6, r22
    3a28:	4c 01       	movw	r8, r24
    3a2a:	c2 01       	movw	r24, r4
    3a2c:	b1 01       	movw	r22, r2
    3a2e:	a4 01       	movw	r20, r8
    3a30:	93 01       	movw	r18, r6
    3a32:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <__divsf3>
    3a36:	7b 01       	movw	r14, r22
    3a38:	8c 01       	movw	r16, r24
		if (x2 > x1) {
    3a3a:	29 85       	ldd	r18, Y+9	; 0x09
    3a3c:	c2 16       	cp	r12, r18
    3a3e:	08 f0       	brcs	.+2      	; 0x3a42 <draw_line+0xec>
    3a40:	38 c0       	rjmp	.+112    	; 0x3ab2 <draw_line+0x15c>
			if (g > 1) {
    3a42:	20 e0       	ldi	r18, 0x00	; 0
    3a44:	30 e0       	ldi	r19, 0x00	; 0
    3a46:	40 e8       	ldi	r20, 0x80	; 128
    3a48:	5f e3       	ldi	r21, 0x3F	; 63
    3a4a:	46 df       	rcall	.-372    	; 0x38d8 <__gesf2>
    3a4c:	18 16       	cp	r1, r24
    3a4e:	24 f4       	brge	.+8      	; 0x3a58 <draw_line+0x102>
    3a50:	71 e0       	ldi	r23, 0x01	; 1
    3a52:	c7 2e       	mov	r12, r23
    3a54:	d1 2c       	mov	r13, r1
    3a56:	37 c1       	rjmp	.+622    	; 0x3cc6 <draw_line+0x370>
				oct = 1;
			} else if (g <= 1 && g > 0) {
    3a58:	c8 01       	movw	r24, r16
    3a5a:	b7 01       	movw	r22, r14
    3a5c:	20 e0       	ldi	r18, 0x00	; 0
    3a5e:	30 e0       	ldi	r19, 0x00	; 0
    3a60:	40 e8       	ldi	r20, 0x80	; 128
    3a62:	5f e3       	ldi	r21, 0x3F	; 63
    3a64:	52 de       	rcall	.-860    	; 0x370a <__cmpsf2>
    3a66:	18 16       	cp	r1, r24
    3a68:	64 f0       	brlt	.+24     	; 0x3a82 <draw_line+0x12c>
    3a6a:	c8 01       	movw	r24, r16
    3a6c:	b7 01       	movw	r22, r14
    3a6e:	20 e0       	ldi	r18, 0x00	; 0
    3a70:	30 e0       	ldi	r19, 0x00	; 0
    3a72:	40 e0       	ldi	r20, 0x00	; 0
    3a74:	50 e0       	ldi	r21, 0x00	; 0
    3a76:	30 df       	rcall	.-416    	; 0x38d8 <__gesf2>
    3a78:	18 16       	cp	r1, r24
    3a7a:	1c f4       	brge	.+6      	; 0x3a82 <draw_line+0x12c>
    3a7c:	cc 24       	eor	r12, r12
    3a7e:	dd 24       	eor	r13, r13
    3a80:	50 c0       	rjmp	.+160    	; 0x3b22 <draw_line+0x1cc>
				oct = 0;
			} else if (g <= 0 && g > -1) {
    3a82:	c8 01       	movw	r24, r16
    3a84:	b7 01       	movw	r22, r14
    3a86:	20 e0       	ldi	r18, 0x00	; 0
    3a88:	30 e0       	ldi	r19, 0x00	; 0
    3a8a:	40 e0       	ldi	r20, 0x00	; 0
    3a8c:	50 e0       	ldi	r21, 0x00	; 0
    3a8e:	3d de       	rcall	.-902    	; 0x370a <__cmpsf2>
    3a90:	18 16       	cp	r1, r24
    3a92:	0c f4       	brge	.+2      	; 0x3a96 <draw_line+0x140>
    3a94:	11 c1       	rjmp	.+546    	; 0x3cb8 <draw_line+0x362>
    3a96:	c8 01       	movw	r24, r16
    3a98:	b7 01       	movw	r22, r14
    3a9a:	20 e0       	ldi	r18, 0x00	; 0
    3a9c:	30 e0       	ldi	r19, 0x00	; 0
    3a9e:	40 e8       	ldi	r20, 0x80	; 128
    3aa0:	5f eb       	ldi	r21, 0xBF	; 191
    3aa2:	1a df       	rcall	.-460    	; 0x38d8 <__gesf2>
    3aa4:	18 16       	cp	r1, r24
    3aa6:	0c f0       	brlt	.+2      	; 0x3aaa <draw_line+0x154>
    3aa8:	07 c1       	rjmp	.+526    	; 0x3cb8 <draw_line+0x362>
    3aaa:	67 e0       	ldi	r22, 0x07	; 7
    3aac:	c6 2e       	mov	r12, r22
    3aae:	d1 2c       	mov	r13, r1
    3ab0:	38 c0       	rjmp	.+112    	; 0x3b22 <draw_line+0x1cc>
				oct = 7;
			} else {
				oct = 6;
			}
		} else {
			if (g > 1) {
    3ab2:	20 e0       	ldi	r18, 0x00	; 0
    3ab4:	30 e0       	ldi	r19, 0x00	; 0
    3ab6:	40 e8       	ldi	r20, 0x80	; 128
    3ab8:	5f e3       	ldi	r21, 0x3F	; 63
    3aba:	0e df       	rcall	.-484    	; 0x38d8 <__gesf2>
    3abc:	18 16       	cp	r1, r24
    3abe:	24 f4       	brge	.+8      	; 0x3ac8 <draw_line+0x172>
    3ac0:	55 e0       	ldi	r21, 0x05	; 5
    3ac2:	c5 2e       	mov	r12, r21
    3ac4:	d1 2c       	mov	r13, r1
    3ac6:	ff c0       	rjmp	.+510    	; 0x3cc6 <draw_line+0x370>
				oct = 5;
			} else if (g <= 1 && g > 0) {
    3ac8:	c8 01       	movw	r24, r16
    3aca:	b7 01       	movw	r22, r14
    3acc:	20 e0       	ldi	r18, 0x00	; 0
    3ace:	30 e0       	ldi	r19, 0x00	; 0
    3ad0:	40 e8       	ldi	r20, 0x80	; 128
    3ad2:	5f e3       	ldi	r21, 0x3F	; 63
    3ad4:	1a de       	rcall	.-972    	; 0x370a <__cmpsf2>
    3ad6:	18 16       	cp	r1, r24
    3ad8:	6c f0       	brlt	.+26     	; 0x3af4 <draw_line+0x19e>
    3ada:	c8 01       	movw	r24, r16
    3adc:	b7 01       	movw	r22, r14
    3ade:	20 e0       	ldi	r18, 0x00	; 0
    3ae0:	30 e0       	ldi	r19, 0x00	; 0
    3ae2:	40 e0       	ldi	r20, 0x00	; 0
    3ae4:	50 e0       	ldi	r21, 0x00	; 0
    3ae6:	f8 de       	rcall	.-528    	; 0x38d8 <__gesf2>
    3ae8:	18 16       	cp	r1, r24
    3aea:	24 f4       	brge	.+8      	; 0x3af4 <draw_line+0x19e>
    3aec:	44 e0       	ldi	r20, 0x04	; 4
    3aee:	c4 2e       	mov	r12, r20
    3af0:	d1 2c       	mov	r13, r1
    3af2:	17 c0       	rjmp	.+46     	; 0x3b22 <draw_line+0x1cc>
				oct = 4;
			} else if (g <= 0 && g > -1) {
    3af4:	c8 01       	movw	r24, r16
    3af6:	b7 01       	movw	r22, r14
    3af8:	20 e0       	ldi	r18, 0x00	; 0
    3afa:	30 e0       	ldi	r19, 0x00	; 0
    3afc:	40 e0       	ldi	r20, 0x00	; 0
    3afe:	50 e0       	ldi	r21, 0x00	; 0
    3b00:	04 de       	rcall	.-1016   	; 0x370a <__cmpsf2>
    3b02:	18 16       	cp	r1, r24
    3b04:	0c f4       	brge	.+2      	; 0x3b08 <draw_line+0x1b2>
    3b06:	dc c0       	rjmp	.+440    	; 0x3cc0 <draw_line+0x36a>
    3b08:	c8 01       	movw	r24, r16
    3b0a:	b7 01       	movw	r22, r14
    3b0c:	20 e0       	ldi	r18, 0x00	; 0
    3b0e:	30 e0       	ldi	r19, 0x00	; 0
    3b10:	40 e8       	ldi	r20, 0x80	; 128
    3b12:	5f eb       	ldi	r21, 0xBF	; 191
    3b14:	e1 de       	rcall	.-574    	; 0x38d8 <__gesf2>
    3b16:	18 16       	cp	r1, r24
    3b18:	0c f0       	brlt	.+2      	; 0x3b1c <draw_line+0x1c6>
    3b1a:	d2 c0       	rjmp	.+420    	; 0x3cc0 <draw_line+0x36a>
    3b1c:	33 e0       	ldi	r19, 0x03	; 3
    3b1e:	c3 2e       	mov	r12, r19
    3b20:	d1 2c       	mov	r13, r1
		}
		unsigned int i1, i, i2, c;
		float dx = (float) x2-x1, dy = (float) y2-y1, m;
		if (useX) {
			m = dy/dx;
			c = y1; i1 = x1; i2 = x2;
    3b22:	4b 85       	ldd	r20, Y+11	; 0x0b
    3b24:	5c 85       	ldd	r21, Y+12	; 0x0c
    3b26:	5a 83       	std	Y+2, r21	; 0x02
    3b28:	49 83       	std	Y+1, r20	; 0x01
    3b2a:	be 82       	std	Y+6, r11	; 0x06
    3b2c:	ad 82       	std	Y+5, r10	; 0x05
    3b2e:	99 85       	ldd	r25, Y+9	; 0x09
    3b30:	89 2f       	mov	r24, r25
    3b32:	90 e0       	ldi	r25, 0x00	; 0
    3b34:	9c 83       	std	Y+4, r25	; 0x04
    3b36:	8b 83       	std	Y+3, r24	; 0x03
    3b38:	17 01       	movw	r2, r14
    3b3a:	28 01       	movw	r4, r16
    3b3c:	e1 e0       	ldi	r30, 0x01	; 1
    3b3e:	f0 e0       	ldi	r31, 0x00	; 0
    3b40:	f8 87       	std	Y+8, r31	; 0x08
    3b42:	ef 83       	std	Y+7, r30	; 0x07
			m = dx/dy;
			c = x1; i1 = y1; i2 = y2;
		}

		int flipM;
		switch(oct) {
    3b44:	f7 e0       	ldi	r31, 0x07	; 7
    3b46:	cf 16       	cp	r12, r31
    3b48:	d1 04       	cpc	r13, r1
    3b4a:	28 f4       	brcc	.+10     	; 0x3b56 <draw_line+0x200>
    3b4c:	23 e0       	ldi	r18, 0x03	; 3
    3b4e:	c2 16       	cp	r12, r18
    3b50:	d1 04       	cpc	r13, r1
    3b52:	40 f4       	brcc	.+16     	; 0x3b64 <draw_line+0x20e>
    3b54:	04 c0       	rjmp	.+8      	; 0x3b5e <draw_line+0x208>
    3b56:	37 e0       	ldi	r19, 0x07	; 7
    3b58:	c3 16       	cp	r12, r19
    3b5a:	d1 04       	cpc	r13, r1
    3b5c:	29 f4       	brne	.+10     	; 0x3b68 <draw_line+0x212>
    3b5e:	81 e0       	ldi	r24, 0x01	; 1
    3b60:	90 e0       	ldi	r25, 0x00	; 0
    3b62:	02 c0       	rjmp	.+4      	; 0x3b68 <draw_line+0x212>
    3b64:	8f ef       	ldi	r24, 0xFF	; 255
    3b66:	9f ef       	ldi	r25, 0xFF	; 255
    3b68:	ad 80       	ldd	r10, Y+5	; 0x05
    3b6a:	be 80       	ldd	r11, Y+6	; 0x06
    3b6c:	0f 2e       	mov	r0, r31
    3b6e:	f0 e0       	ldi	r31, 0x00	; 0
    3b70:	6f 2e       	mov	r6, r31
    3b72:	f0 e0       	ldi	r31, 0x00	; 0
    3b74:	7f 2e       	mov	r7, r31
    3b76:	f0 e0       	ldi	r31, 0x00	; 0
    3b78:	8f 2e       	mov	r8, r31
    3b7a:	f0 e0       	ldi	r31, 0x00	; 0
    3b7c:	9f 2e       	mov	r9, r31
    3b7e:	f0 2d       	mov	r31, r0

		// Perform the actual loop
		float err = 0.0;
		for (i = i1; (i2>i1) ? i <= i2 : i >= i2; (i2>i1) ? i++ : i--) {
			(useX) ? set_pixel(i, c, 1) : set_pixel(c, i, 1);
			err += ABS(m);
    3b80:	a2 01       	movw	r20, r4
    3b82:	91 01       	movw	r18, r2
    3b84:	50 58       	subi	r21, 0x80	; 128
    3b86:	2d 87       	std	Y+13, r18	; 0x0d
    3b88:	3e 87       	std	Y+14, r19	; 0x0e
    3b8a:	4f 87       	std	Y+15, r20	; 0x0f
    3b8c:	58 8b       	std	Y+16, r21	; 0x10
			if (err > 0.5f) {
				(SIGN(m*flipM) > 0) ? c++ : c--;
    3b8e:	9c 01       	movw	r18, r24
    3b90:	44 27       	eor	r20, r20
    3b92:	37 fd       	sbrc	r19, 7
    3b94:	40 95       	com	r20
    3b96:	54 2f       	mov	r21, r20
    3b98:	29 8b       	std	Y+17, r18	; 0x11
    3b9a:	3a 8b       	std	Y+18, r19	; 0x12
    3b9c:	4b 8b       	std	Y+19, r20	; 0x13
    3b9e:	5c 8b       	std	Y+20, r21	; 0x14
    3ba0:	7a c0       	rjmp	.+244    	; 0x3c96 <draw_line+0x340>
		}

		// Perform the actual loop
		float err = 0.0;
		for (i = i1; (i2>i1) ? i <= i2 : i >= i2; (i2>i1) ? i++ : i--) {
			(useX) ? set_pixel(i, c, 1) : set_pixel(c, i, 1);
    3ba2:	4f 81       	ldd	r20, Y+7	; 0x07
    3ba4:	58 85       	ldd	r21, Y+8	; 0x08
    3ba6:	45 2b       	or	r20, r21
    3ba8:	19 f0       	breq	.+6      	; 0x3bb0 <draw_line+0x25a>
    3baa:	8a 2d       	mov	r24, r10
    3bac:	69 81       	ldd	r22, Y+1	; 0x01
    3bae:	02 c0       	rjmp	.+4      	; 0x3bb4 <draw_line+0x25e>
    3bb0:	89 81       	ldd	r24, Y+1	; 0x01
    3bb2:	6a 2d       	mov	r22, r10
    3bb4:	41 e0       	ldi	r20, 0x01	; 1
    3bb6:	9c de       	rcall	.-712    	; 0x38f0 <set_pixel>
			err += ABS(m);
    3bb8:	c2 01       	movw	r24, r4
    3bba:	b1 01       	movw	r22, r2
    3bbc:	20 e0       	ldi	r18, 0x00	; 0
    3bbe:	30 e0       	ldi	r19, 0x00	; 0
    3bc0:	40 e0       	ldi	r20, 0x00	; 0
    3bc2:	50 e0       	ldi	r21, 0x00	; 0
    3bc4:	89 de       	rcall	.-750    	; 0x38d8 <__gesf2>
    3bc6:	88 23       	and	r24, r24
    3bc8:	1c f0       	brlt	.+6      	; 0x3bd0 <draw_line+0x27a>
    3bca:	a2 01       	movw	r20, r4
    3bcc:	91 01       	movw	r18, r2
    3bce:	04 c0       	rjmp	.+8      	; 0x3bd8 <draw_line+0x282>
    3bd0:	2d 85       	ldd	r18, Y+13	; 0x0d
    3bd2:	3e 85       	ldd	r19, Y+14	; 0x0e
    3bd4:	4f 85       	ldd	r20, Y+15	; 0x0f
    3bd6:	58 89       	ldd	r21, Y+16	; 0x10
    3bd8:	c4 01       	movw	r24, r8
    3bda:	b3 01       	movw	r22, r6
    3bdc:	32 dd       	rcall	.-1436   	; 0x3642 <__addsf3>
    3bde:	3b 01       	movw	r6, r22
    3be0:	4c 01       	movw	r8, r24
			if (err > 0.5f) {
    3be2:	20 e0       	ldi	r18, 0x00	; 0
    3be4:	30 e0       	ldi	r19, 0x00	; 0
    3be6:	40 e0       	ldi	r20, 0x00	; 0
    3be8:	5f e3       	ldi	r21, 0x3F	; 63
    3bea:	76 de       	rcall	.-788    	; 0x38d8 <__gesf2>
    3bec:	18 16       	cp	r1, r24
    3bee:	0c f0       	brlt	.+2      	; 0x3bf2 <draw_line+0x29c>
    3bf0:	44 c0       	rjmp	.+136    	; 0x3c7a <draw_line+0x324>
				(SIGN(m*flipM) > 0) ? c++ : c--;
    3bf2:	69 89       	ldd	r22, Y+17	; 0x11
    3bf4:	7a 89       	ldd	r23, Y+18	; 0x12
    3bf6:	8b 89       	ldd	r24, Y+19	; 0x13
    3bf8:	9c 89       	ldd	r25, Y+20	; 0x14
    3bfa:	be dd       	rcall	.-1156   	; 0x3778 <__floatsisf>
    3bfc:	9b 01       	movw	r18, r22
    3bfe:	ac 01       	movw	r20, r24
    3c00:	c2 01       	movw	r24, r4
    3c02:	b1 01       	movw	r22, r2
    3c04:	0e 94 64 01 	call	0x2c8	; 0x2c8 <__mulsf3>
    3c08:	7b 01       	movw	r14, r22
    3c0a:	8c 01       	movw	r16, r24
    3c0c:	1e 8a       	std	Y+22, r1	; 0x16
    3c0e:	1d 8a       	std	Y+21, r1	; 0x15
    3c10:	20 e0       	ldi	r18, 0x00	; 0
    3c12:	30 e0       	ldi	r19, 0x00	; 0
    3c14:	40 e0       	ldi	r20, 0x00	; 0
    3c16:	50 e0       	ldi	r21, 0x00	; 0
    3c18:	5f de       	rcall	.-834    	; 0x38d8 <__gesf2>
    3c1a:	18 16       	cp	r1, r24
    3c1c:	24 f4       	brge	.+8      	; 0x3c26 <draw_line+0x2d0>
    3c1e:	81 e0       	ldi	r24, 0x01	; 1
    3c20:	90 e0       	ldi	r25, 0x00	; 0
    3c22:	9e 8b       	std	Y+22, r25	; 0x16
    3c24:	8d 8b       	std	Y+21, r24	; 0x15
    3c26:	cc 24       	eor	r12, r12
    3c28:	dd 24       	eor	r13, r13
    3c2a:	c8 01       	movw	r24, r16
    3c2c:	b7 01       	movw	r22, r14
    3c2e:	20 e0       	ldi	r18, 0x00	; 0
    3c30:	30 e0       	ldi	r19, 0x00	; 0
    3c32:	40 e0       	ldi	r20, 0x00	; 0
    3c34:	50 e0       	ldi	r21, 0x00	; 0
    3c36:	69 dd       	rcall	.-1326   	; 0x370a <__cmpsf2>
    3c38:	88 23       	and	r24, r24
    3c3a:	1c f4       	brge	.+6      	; 0x3c42 <draw_line+0x2ec>
    3c3c:	21 e0       	ldi	r18, 0x01	; 1
    3c3e:	c2 2e       	mov	r12, r18
    3c40:	d1 2c       	mov	r13, r1
    3c42:	ed 89       	ldd	r30, Y+21	; 0x15
    3c44:	fe 89       	ldd	r31, Y+22	; 0x16
    3c46:	ec 19       	sub	r30, r12
    3c48:	fd 09       	sbc	r31, r13
    3c4a:	31 97       	sbiw	r30, 0x01	; 1
    3c4c:	39 f4       	brne	.+14     	; 0x3c5c <draw_line+0x306>
    3c4e:	29 81       	ldd	r18, Y+1	; 0x01
    3c50:	3a 81       	ldd	r19, Y+2	; 0x02
    3c52:	2f 5f       	subi	r18, 0xFF	; 255
    3c54:	3f 4f       	sbci	r19, 0xFF	; 255
    3c56:	3a 83       	std	Y+2, r19	; 0x02
    3c58:	29 83       	std	Y+1, r18	; 0x01
    3c5a:	06 c0       	rjmp	.+12     	; 0x3c68 <draw_line+0x312>
    3c5c:	49 81       	ldd	r20, Y+1	; 0x01
    3c5e:	5a 81       	ldd	r21, Y+2	; 0x02
    3c60:	41 50       	subi	r20, 0x01	; 1
    3c62:	50 40       	sbci	r21, 0x00	; 0
    3c64:	5a 83       	std	Y+2, r21	; 0x02
    3c66:	49 83       	std	Y+1, r20	; 0x01
				err -= 1.0f;
    3c68:	c4 01       	movw	r24, r8
    3c6a:	b3 01       	movw	r22, r6
    3c6c:	20 e0       	ldi	r18, 0x00	; 0
    3c6e:	30 e0       	ldi	r19, 0x00	; 0
    3c70:	40 e8       	ldi	r20, 0x80	; 128
    3c72:	5f e3       	ldi	r21, 0x3F	; 63
    3c74:	e5 dc       	rcall	.-1590   	; 0x3640 <__subsf3>
    3c76:	3b 01       	movw	r6, r22
    3c78:	4c 01       	movw	r8, r24
				break;
		}

		// Perform the actual loop
		float err = 0.0;
		for (i = i1; (i2>i1) ? i <= i2 : i >= i2; (i2>i1) ? i++ : i--) {
    3c7a:	8b 81       	ldd	r24, Y+3	; 0x03
    3c7c:	9c 81       	ldd	r25, Y+4	; 0x04
    3c7e:	ed 81       	ldd	r30, Y+5	; 0x05
    3c80:	fe 81       	ldd	r31, Y+6	; 0x06
    3c82:	e8 17       	cp	r30, r24
    3c84:	f9 07       	cpc	r31, r25
    3c86:	20 f4       	brcc	.+8      	; 0x3c90 <draw_line+0x33a>
    3c88:	08 94       	sec
    3c8a:	a1 1c       	adc	r10, r1
    3c8c:	b1 1c       	adc	r11, r1
    3c8e:	03 c0       	rjmp	.+6      	; 0x3c96 <draw_line+0x340>
    3c90:	08 94       	sec
    3c92:	a1 08       	sbc	r10, r1
    3c94:	b1 08       	sbc	r11, r1
    3c96:	2b 81       	ldd	r18, Y+3	; 0x03
    3c98:	3c 81       	ldd	r19, Y+4	; 0x04
    3c9a:	4d 81       	ldd	r20, Y+5	; 0x05
    3c9c:	5e 81       	ldd	r21, Y+6	; 0x06
    3c9e:	42 17       	cp	r20, r18
    3ca0:	53 07       	cpc	r21, r19
    3ca2:	20 f4       	brcc	.+8      	; 0x3cac <draw_line+0x356>
    3ca4:	2a 15       	cp	r18, r10
    3ca6:	3b 05       	cpc	r19, r11
    3ca8:	20 f1       	brcs	.+72     	; 0x3cf2 <draw_line+0x39c>
    3caa:	7b cf       	rjmp	.-266    	; 0x3ba2 <draw_line+0x24c>
    3cac:	8b 81       	ldd	r24, Y+3	; 0x03
    3cae:	9c 81       	ldd	r25, Y+4	; 0x04
    3cb0:	a8 16       	cp	r10, r24
    3cb2:	b9 06       	cpc	r11, r25
    3cb4:	f0 f0       	brcs	.+60     	; 0x3cf2 <draw_line+0x39c>
    3cb6:	75 cf       	rjmp	.-278    	; 0x3ba2 <draw_line+0x24c>
				(SIGN(m*flipM) > 0) ? c++ : c--;
				err -= 1.0f;
			}
		}
	}
}
    3cb8:	96 e0       	ldi	r25, 0x06	; 6
    3cba:	c9 2e       	mov	r12, r25
    3cbc:	d1 2c       	mov	r13, r1
    3cbe:	03 c0       	rjmp	.+6      	; 0x3cc6 <draw_line+0x370>
    3cc0:	82 e0       	ldi	r24, 0x02	; 2
    3cc2:	c8 2e       	mov	r12, r24
    3cc4:	d1 2c       	mov	r13, r1
		float dx = (float) x2-x1, dy = (float) y2-y1, m;
		if (useX) {
			m = dy/dx;
			c = y1; i1 = x1; i2 = x2;
		} else {
			m = dx/dy;
    3cc6:	c4 01       	movw	r24, r8
    3cc8:	b3 01       	movw	r22, r6
    3cca:	a2 01       	movw	r20, r4
    3ccc:	91 01       	movw	r18, r2
    3cce:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <__divsf3>
    3cd2:	1b 01       	movw	r2, r22
    3cd4:	2c 01       	movw	r4, r24
			c = x1; i1 = y1; i2 = y2;
    3cd6:	ba 82       	std	Y+2, r11	; 0x02
    3cd8:	a9 82       	std	Y+1, r10	; 0x01
    3cda:	eb 85       	ldd	r30, Y+11	; 0x0b
    3cdc:	fc 85       	ldd	r31, Y+12	; 0x0c
    3cde:	fe 83       	std	Y+6, r31	; 0x06
    3ce0:	ed 83       	std	Y+5, r30	; 0x05
    3ce2:	3a 85       	ldd	r19, Y+10	; 0x0a
    3ce4:	23 2f       	mov	r18, r19
    3ce6:	30 e0       	ldi	r19, 0x00	; 0
    3ce8:	3c 83       	std	Y+4, r19	; 0x04
    3cea:	2b 83       	std	Y+3, r18	; 0x03
    3cec:	18 86       	std	Y+8, r1	; 0x08
    3cee:	1f 82       	std	Y+7, r1	; 0x07
    3cf0:	29 cf       	rjmp	.-430    	; 0x3b44 <draw_line+0x1ee>
				(SIGN(m*flipM) > 0) ? c++ : c--;
				err -= 1.0f;
			}
		}
	}
}
    3cf2:	66 96       	adiw	r28, 0x16	; 22
    3cf4:	0f b6       	in	r0, 0x3f	; 63
    3cf6:	f8 94       	cli
    3cf8:	de bf       	out	0x3e, r29	; 62
    3cfa:	0f be       	out	0x3f, r0	; 63
    3cfc:	cd bf       	out	0x3d, r28	; 61
    3cfe:	cf 91       	pop	r28
    3d00:	df 91       	pop	r29
    3d02:	1f 91       	pop	r17
    3d04:	0f 91       	pop	r16
    3d06:	ff 90       	pop	r15
    3d08:	ef 90       	pop	r14
    3d0a:	df 90       	pop	r13
    3d0c:	cf 90       	pop	r12
    3d0e:	bf 90       	pop	r11
    3d10:	af 90       	pop	r10
    3d12:	9f 90       	pop	r9
    3d14:	8f 90       	pop	r8
    3d16:	7f 90       	pop	r7
    3d18:	6f 90       	pop	r6
    3d1a:	5f 90       	pop	r5
    3d1c:	4f 90       	pop	r4
    3d1e:	3f 90       	pop	r3
    3d20:	2f 90       	pop	r2
    3d22:	08 95       	ret

00003d24 <draw_character>:

void draw_character(unsigned char character, unsigned char top_left_x, unsigned char top_left_y) {
    3d24:	8f 92       	push	r8
    3d26:	9f 92       	push	r9
    3d28:	af 92       	push	r10
    3d2a:	bf 92       	push	r11
    3d2c:	cf 92       	push	r12
    3d2e:	df 92       	push	r13
    3d30:	ef 92       	push	r14
    3d32:	ff 92       	push	r15
    3d34:	0f 93       	push	r16
    3d36:	1f 93       	push	r17
    3d38:	cf 93       	push	r28
    3d3a:	df 93       	push	r29
    3d3c:	d6 2e       	mov	r13, r22
    3d3e:	c4 2e       	mov	r12, r20
	int char_height = 8;
	
	// loop through each pixel in the character array and plot each one individually
	for (i = 0; i<char_width; i++) {
		for (j = 0; j<char_height; j++) {
			set_pixel(top_left_x+i, top_left_y+j, (pgm_read_byte(&(ASCII[character - 0x20][i])) & (1 << j)) >> j);
    3d40:	95 e0       	ldi	r25, 0x05	; 5
    3d42:	89 9f       	mul	r24, r25
    3d44:	c0 01       	movw	r24, r0
    3d46:	11 24       	eor	r1, r1
    3d48:	8c 01       	movw	r16, r24
    3d4a:	04 5f       	subi	r16, 0xF4	; 244
    3d4c:	1f 4f       	sbci	r17, 0xFF	; 255
    3d4e:	f1 e0       	ldi	r31, 0x01	; 1
    3d50:	8f 2e       	mov	r8, r31
    3d52:	91 2c       	mov	r9, r1
	int i, j;
	int char_width = 5;
	int char_height = 8;
	
	// loop through each pixel in the character array and plot each one individually
	for (i = 0; i<char_width; i++) {
    3d54:	e1 e1       	ldi	r30, 0x11	; 17
    3d56:	ae 2e       	mov	r10, r30
    3d58:	e0 e0       	ldi	r30, 0x00	; 0
    3d5a:	be 2e       	mov	r11, r30
    3d5c:	a8 0e       	add	r10, r24
    3d5e:	b9 1e       	adc	r11, r25
    3d60:	1d c0       	rjmp	.+58     	; 0x3d9c <draw_character+0x78>
		for (j = 0; j<char_height; j++) {
			set_pixel(top_left_x+i, top_left_y+j, (pgm_read_byte(&(ASCII[character - 0x20][i])) & (1 << j)) >> j);
    3d62:	6c 2d       	mov	r22, r12
    3d64:	6c 0f       	add	r22, r28
    3d66:	a4 01       	movw	r20, r8
    3d68:	0c 2e       	mov	r0, r28
    3d6a:	02 c0       	rjmp	.+4      	; 0x3d70 <draw_character+0x4c>
    3d6c:	44 0f       	add	r20, r20
    3d6e:	55 1f       	adc	r21, r21
    3d70:	0a 94       	dec	r0
    3d72:	e2 f7       	brpl	.-8      	; 0x3d6c <draw_character+0x48>
    3d74:	4e 21       	and	r20, r14
    3d76:	5f 21       	and	r21, r15
    3d78:	0c 2e       	mov	r0, r28
    3d7a:	02 c0       	rjmp	.+4      	; 0x3d80 <draw_character+0x5c>
    3d7c:	55 95       	asr	r21
    3d7e:	47 95       	ror	r20
    3d80:	0a 94       	dec	r0
    3d82:	e2 f7       	brpl	.-8      	; 0x3d7c <draw_character+0x58>
    3d84:	8d 2d       	mov	r24, r13
    3d86:	b4 dd       	rcall	.-1176   	; 0x38f0 <set_pixel>
	int char_width = 5;
	int char_height = 8;
	
	// loop through each pixel in the character array and plot each one individually
	for (i = 0; i<char_width; i++) {
		for (j = 0; j<char_height; j++) {
    3d88:	21 96       	adiw	r28, 0x01	; 1
    3d8a:	c8 30       	cpi	r28, 0x08	; 8
    3d8c:	d1 05       	cpc	r29, r1
    3d8e:	49 f7       	brne	.-46     	; 0x3d62 <draw_character+0x3e>
    3d90:	0f 5f       	subi	r16, 0xFF	; 255
    3d92:	1f 4f       	sbci	r17, 0xFF	; 255
    3d94:	d3 94       	inc	r13
	int i, j;
	int char_width = 5;
	int char_height = 8;
	
	// loop through each pixel in the character array and plot each one individually
	for (i = 0; i<char_width; i++) {
    3d96:	0a 15       	cp	r16, r10
    3d98:	1b 05       	cpc	r17, r11
    3d9a:	39 f0       	breq	.+14     	; 0x3daa <draw_character+0x86>
    3d9c:	c0 e0       	ldi	r28, 0x00	; 0
    3d9e:	d0 e0       	ldi	r29, 0x00	; 0
		for (j = 0; j<char_height; j++) {
			set_pixel(top_left_x+i, top_left_y+j, (pgm_read_byte(&(ASCII[character - 0x20][i])) & (1 << j)) >> j);
    3da0:	f8 01       	movw	r30, r16
    3da2:	84 91       	lpm	r24, Z+
    3da4:	e8 2e       	mov	r14, r24
    3da6:	ff 24       	eor	r15, r15
    3da8:	dc cf       	rjmp	.-72     	; 0x3d62 <draw_character+0x3e>
		}
	}
}
    3daa:	df 91       	pop	r29
    3dac:	cf 91       	pop	r28
    3dae:	1f 91       	pop	r17
    3db0:	0f 91       	pop	r16
    3db2:	ff 90       	pop	r15
    3db4:	ef 90       	pop	r14
    3db6:	df 90       	pop	r13
    3db8:	cf 90       	pop	r12
    3dba:	bf 90       	pop	r11
    3dbc:	af 90       	pop	r10
    3dbe:	9f 90       	pop	r9
    3dc0:	8f 90       	pop	r8
    3dc2:	08 95       	ret

00003dc4 <draw_string>:

void draw_string( char *characters, unsigned char top_left_x, unsigned char top_left_y ) {
    3dc4:	0f 93       	push	r16
    3dc6:	1f 93       	push	r17
    3dc8:	cf 93       	push	r28
    3dca:	df 93       	push	r29
    3dcc:	ec 01       	movw	r28, r24
    3dce:	16 2f       	mov	r17, r22
    3dd0:	04 2f       	mov	r16, r20
    3dd2:	05 c0       	rjmp	.+10     	; 0x3dde <draw_string+0x1a>
	int i = 0;
	while (*characters != 0) {
		draw_character(*(characters), top_left_x+i*5, top_left_y);
    3dd4:	61 2f       	mov	r22, r17
    3dd6:	40 2f       	mov	r20, r16
    3dd8:	a5 df       	rcall	.-182    	; 0x3d24 <draw_character>
		// Add a column of spaces here if you want to space out the lettering.
	    // See lcd.c for a hint on how to do this.
		characters++;
    3dda:	21 96       	adiw	r28, 0x01	; 1
    3ddc:	1b 5f       	subi	r17, 0xFB	; 251
	}
}

void draw_string( char *characters, unsigned char top_left_x, unsigned char top_left_y ) {
	int i = 0;
	while (*characters != 0) {
    3dde:	88 81       	ld	r24, Y
    3de0:	88 23       	and	r24, r24
    3de2:	c1 f7       	brne	.-16     	; 0x3dd4 <draw_string+0x10>
		// Add a column of spaces here if you want to space out the lettering.
	    // See lcd.c for a hint on how to do this.
		characters++;
		i++;
	}
}
    3de4:	df 91       	pop	r29
    3de6:	cf 91       	pop	r28
    3de8:	1f 91       	pop	r17
    3dea:	0f 91       	pop	r16
    3dec:	08 95       	ret

00003dee <refresh>:
#include "graphics.h"
#include "lcd.h"

unsigned char screenBuffer[LCD_BUFFER_SIZE]; // Our screen buffer array

void refresh(void) {
    3dee:	cf 93       	push	r28
    3df0:	df 93       	push	r29
	// Reset our position in the LCD RAM
	LCDPosition(0,0);
    3df2:	80 e0       	ldi	r24, 0x00	; 0
    3df4:	60 e0       	ldi	r22, 0x00	; 0
    3df6:	55 d0       	rcall	.+170    	; 0x3ea2 <LCDPosition>
    3df8:	c5 e2       	ldi	r28, 0x25	; 37
    3dfa:	d3 e0       	ldi	r29, 0x03	; 3
	// Iterate through our buffer and write each byte to the LCD.
	unsigned int i;
	for(i = 0; i < LCD_BUFFER_SIZE; i++){
		LCDWrite(LCD_D, screenBuffer[i]);
    3dfc:	81 e0       	ldi	r24, 0x01	; 1
    3dfe:	69 91       	ld	r22, Y+
    3e00:	07 d0       	rcall	.+14     	; 0x3e10 <LCDWrite>
void refresh(void) {
	// Reset our position in the LCD RAM
	LCDPosition(0,0);
	// Iterate through our buffer and write each byte to the LCD.
	unsigned int i;
	for(i = 0; i < LCD_BUFFER_SIZE; i++){
    3e02:	85 e0       	ldi	r24, 0x05	; 5
    3e04:	cd 31       	cpi	r28, 0x1D	; 29
    3e06:	d8 07       	cpc	r29, r24
    3e08:	c9 f7       	brne	.-14     	; 0x3dfc <refresh+0xe>
		LCDWrite(LCD_D, screenBuffer[i]);
	}
	
}
    3e0a:	df 91       	pop	r29
    3e0c:	cf 91       	pop	r28
    3e0e:	08 95       	ret

00003e10 <LCDWrite>:
// Include our font pixel data
#include "ascii_font.h"

void LCDWrite(unsigned char dc, unsigned char data) {
	// Set the DC pin based on the parameter 'dc' (Hint: use the OUTPUT_WRITE macro)
	OUTPUT_WRITE(PORTB,DCPIN,dc);
    3e10:	95 b1       	in	r25, 0x05	; 5
    3e12:	82 95       	swap	r24
    3e14:	88 0f       	add	r24, r24
    3e16:	80 7e       	andi	r24, 0xE0	; 224
    3e18:	9f 7d       	andi	r25, 0xDF	; 223
    3e1a:	98 2b       	or	r25, r24
    3e1c:	95 b9       	out	0x05, r25	; 5
	
	// Pull the SCE/SS pin low to signal the LCD we have data
	OUTPUT_LOW(PORTD,SCEPIN);
    3e1e:	5f 98       	cbi	0x0b, 7	; 11
    3e20:	27 e0       	ldi	r18, 0x07	; 7
    3e22:	30 e0       	ldi	r19, 0x00	; 0
	
	// Write the byte of data using "bit bashing"
	int i;
	for(i = 7; i >= 0; i--) {
		OUTPUT_LOW(PORTF, SCKPIN) ;
		if((data>>i) & (1 == 1)) {
    3e24:	70 e0       	ldi	r23, 0x00	; 0
	OUTPUT_LOW(PORTD,SCEPIN);
	
	// Write the byte of data using "bit bashing"
	int i;
	for(i = 7; i >= 0; i--) {
		OUTPUT_LOW(PORTF, SCKPIN) ;
    3e26:	8f 98       	cbi	0x11, 7	; 17
		if((data>>i) & (1 == 1)) {
    3e28:	cb 01       	movw	r24, r22
    3e2a:	02 2e       	mov	r0, r18
    3e2c:	02 c0       	rjmp	.+4      	; 0x3e32 <LCDWrite+0x22>
    3e2e:	95 95       	asr	r25
    3e30:	87 95       	ror	r24
    3e32:	0a 94       	dec	r0
    3e34:	e2 f7       	brpl	.-8      	; 0x3e2e <LCDWrite+0x1e>
    3e36:	80 ff       	sbrs	r24, 0
    3e38:	02 c0       	rjmp	.+4      	; 0x3e3e <LCDWrite+0x2e>
			OUTPUT_HIGH(PORTB, DINPIN);
    3e3a:	2e 9a       	sbi	0x05, 6	; 5
    3e3c:	01 c0       	rjmp	.+2      	; 0x3e40 <LCDWrite+0x30>
		} else {
			OUTPUT_LOW(PORTB, DINPIN);
    3e3e:	2e 98       	cbi	0x05, 6	; 5
		}
		OUTPUT_HIGH(PORTF, SCKPIN);
    3e40:	8f 9a       	sbi	0x11, 7	; 17
	// Pull the SCE/SS pin low to signal the LCD we have data
	OUTPUT_LOW(PORTD,SCEPIN);
	
	// Write the byte of data using "bit bashing"
	int i;
	for(i = 7; i >= 0; i--) {
    3e42:	21 50       	subi	r18, 0x01	; 1
    3e44:	30 40       	sbci	r19, 0x00	; 0
    3e46:	8f ef       	ldi	r24, 0xFF	; 255
    3e48:	2f 3f       	cpi	r18, 0xFF	; 255
    3e4a:	38 07       	cpc	r19, r24
    3e4c:	61 f7       	brne	.-40     	; 0x3e26 <LCDWrite+0x16>
		}
		OUTPUT_HIGH(PORTF, SCKPIN);
	}
	
	// Pull SCE/SS high to signal the LCD we are done
	OUTPUT_HIGH(PORTD,SCEPIN);
    3e4e:	5f 9a       	sbi	0x0b, 7	; 11
}
    3e50:	08 95       	ret

00003e52 <LCDInitialise>:

// Initialise the LCD with our desired settings
void LCDInitialise(unsigned char contrast) {
    3e52:	1f 93       	push	r17
    3e54:	18 2f       	mov	r17, r24
	SET_OUTPUT(DDRD, SCEPIN);
    3e56:	57 9a       	sbi	0x0a, 7	; 10
	SET_OUTPUT(DDRB, RSTPIN);
    3e58:	24 9a       	sbi	0x04, 4	; 4
	SET_OUTPUT(DDRB, DCPIN);
    3e5a:	25 9a       	sbi	0x04, 5	; 4
	SET_OUTPUT(DDRB, DINPIN);
    3e5c:	26 9a       	sbi	0x04, 6	; 4
	SET_OUTPUT(DDRF, SCKPIN);
    3e5e:	87 9a       	sbi	0x10, 7	; 16
		
	OUTPUT_LOW(PORTB, RSTPIN);
    3e60:	2c 98       	cbi	0x05, 4	; 5
	OUTPUT_HIGH(PORTD, SCEPIN);
    3e62:	5f 9a       	sbi	0x0b, 7	; 11
	OUTPUT_HIGH(PORTB, RSTPIN);
    3e64:	2c 9a       	sbi	0x05, 4	; 5
  
	LCDWrite(LCD_C, 0x21); // Enable LCD extended command set
    3e66:	80 e0       	ldi	r24, 0x00	; 0
    3e68:	61 e2       	ldi	r22, 0x21	; 33
    3e6a:	d2 df       	rcall	.-92     	; 0x3e10 <LCDWrite>
	LCDWrite(LCD_C, 0x80 | contrast ); // Set LCD Vop (Contrast)
    3e6c:	10 68       	ori	r17, 0x80	; 128
    3e6e:	80 e0       	ldi	r24, 0x00	; 0
    3e70:	61 2f       	mov	r22, r17
    3e72:	ce df       	rcall	.-100    	; 0x3e10 <LCDWrite>
	LCDWrite(LCD_C, 0x04);
    3e74:	80 e0       	ldi	r24, 0x00	; 0
    3e76:	64 e0       	ldi	r22, 0x04	; 4
    3e78:	cb df       	rcall	.-106    	; 0x3e10 <LCDWrite>
	LCDWrite(LCD_C, 0x13); // LCD bias mode 1:48
    3e7a:	80 e0       	ldi	r24, 0x00	; 0
    3e7c:	63 e1       	ldi	r22, 0x13	; 19
    3e7e:	c8 df       	rcall	.-112    	; 0x3e10 <LCDWrite>
  
	LCDWrite(LCD_C, 0x0C); // LCD in normal mode.
    3e80:	80 e0       	ldi	r24, 0x00	; 0
    3e82:	6c e0       	ldi	r22, 0x0C	; 12
    3e84:	c5 df       	rcall	.-118    	; 0x3e10 <LCDWrite>
  	LCDWrite(LCD_C, 0x20); // Enable LCD basic command set
    3e86:	80 e0       	ldi	r24, 0x00	; 0
    3e88:	60 e2       	ldi	r22, 0x20	; 32
    3e8a:	c2 df       	rcall	.-124    	; 0x3e10 <LCDWrite>
	LCDWrite(LCD_C, 0x0C);
    3e8c:	80 e0       	ldi	r24, 0x00	; 0
    3e8e:	6c e0       	ldi	r22, 0x0C	; 12
    3e90:	bf df       	rcall	.-130    	; 0x3e10 <LCDWrite>

	LCDWrite(LCD_C, 0x40); // Reset row to 0
    3e92:	80 e0       	ldi	r24, 0x00	; 0
    3e94:	60 e4       	ldi	r22, 0x40	; 64
    3e96:	bc df       	rcall	.-136    	; 0x3e10 <LCDWrite>
	LCDWrite(LCD_C, 0x80); // Reset column to 0
    3e98:	80 e0       	ldi	r24, 0x00	; 0
    3e9a:	60 e8       	ldi	r22, 0x80	; 128
    3e9c:	b9 df       	rcall	.-142    	; 0x3e10 <LCDWrite>
}
    3e9e:	1f 91       	pop	r17
    3ea0:	08 95       	ret

00003ea2 <LCDPosition>:
		characters++;
	}
}

// Set the position in the LCD's memory that we want to begin writing from
void LCDPosition(unsigned char x, unsigned char y) {
    3ea2:	1f 93       	push	r17
    3ea4:	18 2f       	mov	r17, r24
	LCDWrite(LCD_C, (0x40 | y )); // Reset row to 0
    3ea6:	60 64       	ori	r22, 0x40	; 64
    3ea8:	80 e0       	ldi	r24, 0x00	; 0
    3eaa:	b2 df       	rcall	.-156    	; 0x3e10 <LCDWrite>
	LCDWrite(LCD_C, (0x80 | x )); // Reset column to 0
    3eac:	10 68       	ori	r17, 0x80	; 128
    3eae:	80 e0       	ldi	r24, 0x00	; 0
    3eb0:	61 2f       	mov	r22, r17
    3eb2:	ae df       	rcall	.-164    	; 0x3e10 <LCDWrite>
    3eb4:	1f 91       	pop	r17
    3eb6:	08 95       	ret

00003eb8 <init_sprite>:
	byte x,
	byte y,
	byte width,
	byte height,
	byte * bitmap
	) {
    3eb8:	8f 92       	push	r8
    3eba:	9f 92       	push	r9
    3ebc:	af 92       	push	r10
    3ebe:	bf 92       	push	r11
    3ec0:	cf 92       	push	r12
    3ec2:	df 92       	push	r13
    3ec4:	ef 92       	push	r14
    3ec6:	ff 92       	push	r15
    3ec8:	0f 93       	push	r16
    3eca:	1f 93       	push	r17
    3ecc:	4c 01       	movw	r8, r24
    3ece:	a4 2e       	mov	r10, r20
    3ed0:	12 2f       	mov	r17, r18
	sprite->x = x;
    3ed2:	70 e0       	ldi	r23, 0x00	; 0
    3ed4:	80 e0       	ldi	r24, 0x00	; 0
    3ed6:	90 e0       	ldi	r25, 0x00	; 0
    3ed8:	4d dc       	rcall	.-1894   	; 0x3774 <__floatunsisf>
    3eda:	f4 01       	movw	r30, r8
    3edc:	60 83       	st	Z, r22
    3ede:	71 83       	std	Z+1, r23	; 0x01
    3ee0:	82 83       	std	Z+2, r24	; 0x02
    3ee2:	93 83       	std	Z+3, r25	; 0x03
	sprite->y = y;
    3ee4:	bb 24       	eor	r11, r11
    3ee6:	cc 24       	eor	r12, r12
    3ee8:	dd 24       	eor	r13, r13
    3eea:	c6 01       	movw	r24, r12
    3eec:	b5 01       	movw	r22, r10
    3eee:	42 dc       	rcall	.-1916   	; 0x3774 <__floatunsisf>
    3ef0:	f4 01       	movw	r30, r8
    3ef2:	64 83       	std	Z+4, r22	; 0x04
    3ef4:	75 83       	std	Z+5, r23	; 0x05
    3ef6:	86 83       	std	Z+6, r24	; 0x06
    3ef8:	97 83       	std	Z+7, r25	; 0x07
	sprite->width = width;
    3efa:	10 87       	std	Z+8, r17	; 0x08
	sprite->height = height;
    3efc:	01 87       	std	Z+9, r16	; 0x09
	sprite->bitmap = bitmap;
    3efe:	f4 86       	std	Z+12, r15	; 0x0c
    3f00:	e3 86       	std	Z+11, r14	; 0x0b
}
    3f02:	1f 91       	pop	r17
    3f04:	0f 91       	pop	r16
    3f06:	ff 90       	pop	r15
    3f08:	ef 90       	pop	r14
    3f0a:	df 90       	pop	r13
    3f0c:	cf 90       	pop	r12
    3f0e:	bf 90       	pop	r11
    3f10:	af 90       	pop	r10
    3f12:	9f 90       	pop	r9
    3f14:	8f 90       	pop	r8
    3f16:	08 95       	ret

00003f18 <draw_sprite>:

void draw_sprite( Sprite * sprite ) {
    3f18:	2f 92       	push	r2
    3f1a:	3f 92       	push	r3
    3f1c:	4f 92       	push	r4
    3f1e:	5f 92       	push	r5
    3f20:	7f 92       	push	r7
    3f22:	8f 92       	push	r8
    3f24:	9f 92       	push	r9
    3f26:	af 92       	push	r10
    3f28:	bf 92       	push	r11
    3f2a:	cf 92       	push	r12
    3f2c:	df 92       	push	r13
    3f2e:	ef 92       	push	r14
    3f30:	ff 92       	push	r15
    3f32:	0f 93       	push	r16
    3f34:	1f 93       	push	r17
    3f36:	df 93       	push	r29
    3f38:	cf 93       	push	r28
    3f3a:	00 d0       	rcall	.+0      	; 0x3f3c <draw_sprite+0x24>
    3f3c:	00 d0       	rcall	.+0      	; 0x3f3e <draw_sprite+0x26>
    3f3e:	cd b7       	in	r28, 0x3d	; 61
    3f40:	de b7       	in	r29, 0x3e	; 62
    3f42:	2c 01       	movw	r4, r24
	if ( !sprite->is_visible ) return;
    3f44:	dc 01       	movw	r26, r24
    3f46:	1a 96       	adiw	r26, 0x0a	; 10
    3f48:	8c 91       	ld	r24, X
    3f4a:	88 23       	and	r24, r24
    3f4c:	09 f4       	brne	.+2      	; 0x3f50 <draw_sprite+0x38>
    3f4e:	96 c0       	rjmp	.+300    	; 0x407c <draw_sprite+0x164>
    3f50:	22 24       	eor	r2, r2
    3f52:	33 24       	eor	r3, r3
    3f54:	1a 82       	std	Y+2, r1	; 0x02
    3f56:	19 82       	std	Y+1, r1	; 0x01
    3f58:	87 c0       	rjmp	.+270    	; 0x4068 <draw_sprite+0x150>
	// Index into the bitmap. This is updated as we traverse the 
	// pixels of the image.
	int idx = 0;

	for ( int row = 0; row < sprite->height; row++ ) {
		float screen_y = sprite->y + row;
    3f5a:	e9 81       	ldd	r30, Y+1	; 0x01
    3f5c:	fa 81       	ldd	r31, Y+2	; 0x02
    3f5e:	bf 01       	movw	r22, r30
    3f60:	88 27       	eor	r24, r24
    3f62:	77 fd       	sbrc	r23, 7
    3f64:	80 95       	com	r24
    3f66:	98 2f       	mov	r25, r24
    3f68:	07 dc       	rcall	.-2034   	; 0x3778 <__floatsisf>
    3f6a:	d2 01       	movw	r26, r4
    3f6c:	14 96       	adiw	r26, 0x04	; 4
    3f6e:	2d 91       	ld	r18, X+
    3f70:	3d 91       	ld	r19, X+
    3f72:	4d 91       	ld	r20, X+
    3f74:	5c 91       	ld	r21, X
    3f76:	17 97       	sbiw	r26, 0x07	; 7
    3f78:	64 db       	rcall	.-2360   	; 0x3642 <__addsf3>
    3f7a:	5b 01       	movw	r10, r22
    3f7c:	6c 01       	movw	r12, r24

		if ( screen_y < 0 ) continue;
    3f7e:	20 e0       	ldi	r18, 0x00	; 0
    3f80:	30 e0       	ldi	r19, 0x00	; 0
    3f82:	40 e0       	ldi	r20, 0x00	; 0
    3f84:	50 e0       	ldi	r21, 0x00	; 0
    3f86:	c1 db       	rcall	.-2174   	; 0x370a <__cmpsf2>
    3f88:	87 fd       	sbrc	r24, 7
    3f8a:	68 c0       	rjmp	.+208    	; 0x405c <draw_sprite+0x144>

		if ( screen_y >= LCD_Y ) break;
    3f8c:	c6 01       	movw	r24, r12
    3f8e:	b5 01       	movw	r22, r10
    3f90:	20 e0       	ldi	r18, 0x00	; 0
    3f92:	30 e0       	ldi	r19, 0x00	; 0
    3f94:	40 e4       	ldi	r20, 0x40	; 64
    3f96:	52 e4       	ldi	r21, 0x42	; 66
    3f98:	9f dc       	rcall	.-1730   	; 0x38d8 <__gesf2>
    3f9a:	87 ff       	sbrs	r24, 7
    3f9c:	6f c0       	rjmp	.+222    	; 0x407c <draw_sprite+0x164>
    3f9e:	1c 82       	std	Y+4, r1	; 0x04
    3fa0:	1b 82       	std	Y+3, r1	; 0x03
    3fa2:	45 c0       	rjmp	.+138    	; 0x402e <draw_sprite+0x116>

		int col = 0;
		int bitmask = 1 << 7;

		while ( col < sprite->width ) {
			byte pixel = sprite->bitmap[idx] & bitmask;
    3fa4:	d2 01       	movw	r26, r4
    3fa6:	1b 96       	adiw	r26, 0x0b	; 11
    3fa8:	ed 91       	ld	r30, X+
    3faa:	fc 91       	ld	r31, X
    3fac:	1c 97       	sbiw	r26, 0x0c	; 12
    3fae:	e2 0d       	add	r30, r2
    3fb0:	f3 1d       	adc	r31, r3
    3fb2:	70 80       	ld	r7, Z
			float screen_x = sprite->x + col;
    3fb4:	eb 81       	ldd	r30, Y+3	; 0x03
    3fb6:	fc 81       	ldd	r31, Y+4	; 0x04
    3fb8:	bf 01       	movw	r22, r30
    3fba:	88 27       	eor	r24, r24
    3fbc:	77 fd       	sbrc	r23, 7
    3fbe:	80 95       	com	r24
    3fc0:	98 2f       	mov	r25, r24
    3fc2:	da db       	rcall	.-2124   	; 0x3778 <__floatsisf>
    3fc4:	d2 01       	movw	r26, r4
    3fc6:	2d 91       	ld	r18, X+
    3fc8:	3d 91       	ld	r19, X+
    3fca:	4d 91       	ld	r20, X+
    3fcc:	5c 91       	ld	r21, X
    3fce:	39 db       	rcall	.-2446   	; 0x3642 <__addsf3>
    3fd0:	7b 01       	movw	r14, r22
    3fd2:	8c 01       	movw	r16, r24

			if ( (screen_x >= 0) && ( screen_x < LCD_X ) && pixel ) {
    3fd4:	20 e0       	ldi	r18, 0x00	; 0
    3fd6:	30 e0       	ldi	r19, 0x00	; 0
    3fd8:	40 e0       	ldi	r20, 0x00	; 0
    3fda:	50 e0       	ldi	r21, 0x00	; 0
    3fdc:	7d dc       	rcall	.-1798   	; 0x38d8 <__gesf2>
    3fde:	88 23       	and	r24, r24
    3fe0:	cc f0       	brlt	.+50     	; 0x4014 <draw_sprite+0xfc>
    3fe2:	c8 01       	movw	r24, r16
    3fe4:	b7 01       	movw	r22, r14
    3fe6:	20 e0       	ldi	r18, 0x00	; 0
    3fe8:	30 e0       	ldi	r19, 0x00	; 0
    3fea:	48 ea       	ldi	r20, 0xA8	; 168
    3fec:	52 e4       	ldi	r21, 0x42	; 66
    3fee:	8d db       	rcall	.-2278   	; 0x370a <__cmpsf2>
    3ff0:	88 23       	and	r24, r24
    3ff2:	84 f4       	brge	.+32     	; 0x4014 <draw_sprite+0xfc>
    3ff4:	78 20       	and	r7, r8
    3ff6:	71 f0       	breq	.+28     	; 0x4014 <draw_sprite+0xfc>
				// Set pixel only if the bit is set. 0 is transparent.
				set_pixel( screen_x, screen_y, 1 );
    3ff8:	c8 01       	movw	r24, r16
    3ffa:	b7 01       	movw	r22, r14
    3ffc:	8f db       	rcall	.-2274   	; 0x371c <__fixunssfsi>
    3ffe:	7b 01       	movw	r14, r22
    4000:	8c 01       	movw	r16, r24
    4002:	c6 01       	movw	r24, r12
    4004:	b5 01       	movw	r22, r10
    4006:	8a db       	rcall	.-2284   	; 0x371c <__fixunssfsi>
    4008:	9b 01       	movw	r18, r22
    400a:	ac 01       	movw	r20, r24
    400c:	8e 2d       	mov	r24, r14
    400e:	62 2f       	mov	r22, r18
    4010:	41 e0       	ldi	r20, 0x01	; 1
    4012:	6e dc       	rcall	.-1828   	; 0x38f0 <set_pixel>
			}

			col++;
    4014:	eb 81       	ldd	r30, Y+3	; 0x03
    4016:	fc 81       	ldd	r31, Y+4	; 0x04
    4018:	31 96       	adiw	r30, 0x01	; 1
    401a:	fc 83       	std	Y+4, r31	; 0x04
    401c:	eb 83       	std	Y+3, r30	; 0x03

			if ( col % 8 == 0 ) {
    401e:	cf 01       	movw	r24, r30
    4020:	87 70       	andi	r24, 0x07	; 7
    4022:	90 70       	andi	r25, 0x00	; 0
    4024:	89 2b       	or	r24, r25
    4026:	39 f4       	brne	.+14     	; 0x4036 <draw_sprite+0x11e>
				idx++;
    4028:	08 94       	sec
    402a:	21 1c       	adc	r2, r1
    402c:	31 1c       	adc	r3, r1
    402e:	90 e8       	ldi	r25, 0x80	; 128
    4030:	89 2e       	mov	r8, r25
    4032:	91 2c       	mov	r9, r1
    4034:	02 c0       	rjmp	.+4      	; 0x403a <draw_sprite+0x122>
				bitmask = 1 << 7;
			}
			else {
				bitmask >>= 1;
    4036:	95 94       	asr	r9
    4038:	87 94       	ror	r8
		if ( screen_y >= LCD_Y ) break;

		int col = 0;
		int bitmask = 1 << 7;

		while ( col < sprite->width ) {
    403a:	d2 01       	movw	r26, r4
    403c:	18 96       	adiw	r26, 0x08	; 8
    403e:	8c 91       	ld	r24, X
    4040:	90 e0       	ldi	r25, 0x00	; 0
    4042:	eb 81       	ldd	r30, Y+3	; 0x03
    4044:	fc 81       	ldd	r31, Y+4	; 0x04
    4046:	e8 17       	cp	r30, r24
    4048:	f9 07       	cpc	r31, r25
    404a:	0c f4       	brge	.+2      	; 0x404e <draw_sprite+0x136>
    404c:	ab cf       	rjmp	.-170    	; 0x3fa4 <draw_sprite+0x8c>
			else {
				bitmask >>= 1;
			}
		}

		if ( sprite->width % 8 != 0 ) {
    404e:	87 70       	andi	r24, 0x07	; 7
    4050:	90 70       	andi	r25, 0x00	; 0
    4052:	89 2b       	or	r24, r25
    4054:	19 f0       	breq	.+6      	; 0x405c <draw_sprite+0x144>
			idx++;
    4056:	08 94       	sec
    4058:	21 1c       	adc	r2, r1
    405a:	31 1c       	adc	r3, r1

	// Index into the bitmap. This is updated as we traverse the 
	// pixels of the image.
	int idx = 0;

	for ( int row = 0; row < sprite->height; row++ ) {
    405c:	29 81       	ldd	r18, Y+1	; 0x01
    405e:	3a 81       	ldd	r19, Y+2	; 0x02
    4060:	2f 5f       	subi	r18, 0xFF	; 255
    4062:	3f 4f       	sbci	r19, 0xFF	; 255
    4064:	3a 83       	std	Y+2, r19	; 0x02
    4066:	29 83       	std	Y+1, r18	; 0x01
    4068:	d2 01       	movw	r26, r4
    406a:	19 96       	adiw	r26, 0x09	; 9
    406c:	8c 91       	ld	r24, X
    406e:	90 e0       	ldi	r25, 0x00	; 0
    4070:	e9 81       	ldd	r30, Y+1	; 0x01
    4072:	fa 81       	ldd	r31, Y+2	; 0x02
    4074:	e8 17       	cp	r30, r24
    4076:	f9 07       	cpc	r31, r25
    4078:	0c f4       	brge	.+2      	; 0x407c <draw_sprite+0x164>
    407a:	6f cf       	rjmp	.-290    	; 0x3f5a <draw_sprite+0x42>

		if ( sprite->width % 8 != 0 ) {
			idx++;
		}
	}
}
    407c:	0f 90       	pop	r0
    407e:	0f 90       	pop	r0
    4080:	0f 90       	pop	r0
    4082:	0f 90       	pop	r0
    4084:	cf 91       	pop	r28
    4086:	df 91       	pop	r29
    4088:	1f 91       	pop	r17
    408a:	0f 91       	pop	r16
    408c:	ff 90       	pop	r15
    408e:	ef 90       	pop	r14
    4090:	df 90       	pop	r13
    4092:	cf 90       	pop	r12
    4094:	bf 90       	pop	r11
    4096:	af 90       	pop	r10
    4098:	9f 90       	pop	r9
    409a:	8f 90       	pop	r8
    409c:	7f 90       	pop	r7
    409e:	5f 90       	pop	r5
    40a0:	4f 90       	pop	r4
    40a2:	3f 90       	pop	r3
    40a4:	2f 90       	pop	r2
    40a6:	08 95       	ret

000040a8 <__divmodhi4>:
    40a8:	97 fb       	bst	r25, 7
    40aa:	09 2e       	mov	r0, r25
    40ac:	07 26       	eor	r0, r23
    40ae:	0a d0       	rcall	.+20     	; 0x40c4 <__divmodhi4_neg1>
    40b0:	77 fd       	sbrc	r23, 7
    40b2:	04 d0       	rcall	.+8      	; 0x40bc <__divmodhi4_neg2>
    40b4:	0c d0       	rcall	.+24     	; 0x40ce <__udivmodhi4>
    40b6:	06 d0       	rcall	.+12     	; 0x40c4 <__divmodhi4_neg1>
    40b8:	00 20       	and	r0, r0
    40ba:	1a f4       	brpl	.+6      	; 0x40c2 <__divmodhi4_exit>

000040bc <__divmodhi4_neg2>:
    40bc:	70 95       	com	r23
    40be:	61 95       	neg	r22
    40c0:	7f 4f       	sbci	r23, 0xFF	; 255

000040c2 <__divmodhi4_exit>:
    40c2:	08 95       	ret

000040c4 <__divmodhi4_neg1>:
    40c4:	f6 f7       	brtc	.-4      	; 0x40c2 <__divmodhi4_exit>
    40c6:	90 95       	com	r25
    40c8:	81 95       	neg	r24
    40ca:	9f 4f       	sbci	r25, 0xFF	; 255
    40cc:	08 95       	ret

000040ce <__udivmodhi4>:
    40ce:	aa 1b       	sub	r26, r26
    40d0:	bb 1b       	sub	r27, r27
    40d2:	51 e1       	ldi	r21, 0x11	; 17
    40d4:	07 c0       	rjmp	.+14     	; 0x40e4 <__udivmodhi4_ep>

000040d6 <__udivmodhi4_loop>:
    40d6:	aa 1f       	adc	r26, r26
    40d8:	bb 1f       	adc	r27, r27
    40da:	a6 17       	cp	r26, r22
    40dc:	b7 07       	cpc	r27, r23
    40de:	10 f0       	brcs	.+4      	; 0x40e4 <__udivmodhi4_ep>
    40e0:	a6 1b       	sub	r26, r22
    40e2:	b7 0b       	sbc	r27, r23

000040e4 <__udivmodhi4_ep>:
    40e4:	88 1f       	adc	r24, r24
    40e6:	99 1f       	adc	r25, r25
    40e8:	5a 95       	dec	r21
    40ea:	a9 f7       	brne	.-22     	; 0x40d6 <__udivmodhi4_loop>
    40ec:	80 95       	com	r24
    40ee:	90 95       	com	r25
    40f0:	bc 01       	movw	r22, r24
    40f2:	cd 01       	movw	r24, r26
    40f4:	08 95       	ret

000040f6 <__prologue_saves__>:
    40f6:	2f 92       	push	r2
    40f8:	3f 92       	push	r3
    40fa:	4f 92       	push	r4
    40fc:	5f 92       	push	r5
    40fe:	6f 92       	push	r6
    4100:	7f 92       	push	r7
    4102:	8f 92       	push	r8
    4104:	9f 92       	push	r9
    4106:	af 92       	push	r10
    4108:	bf 92       	push	r11
    410a:	cf 92       	push	r12
    410c:	df 92       	push	r13
    410e:	ef 92       	push	r14
    4110:	ff 92       	push	r15
    4112:	0f 93       	push	r16
    4114:	1f 93       	push	r17
    4116:	cf 93       	push	r28
    4118:	df 93       	push	r29
    411a:	cd b7       	in	r28, 0x3d	; 61
    411c:	de b7       	in	r29, 0x3e	; 62
    411e:	ca 1b       	sub	r28, r26
    4120:	db 0b       	sbc	r29, r27
    4122:	0f b6       	in	r0, 0x3f	; 63
    4124:	f8 94       	cli
    4126:	de bf       	out	0x3e, r29	; 62
    4128:	0f be       	out	0x3f, r0	; 63
    412a:	cd bf       	out	0x3d, r28	; 61
    412c:	09 94       	ijmp

0000412e <__epilogue_restores__>:
    412e:	2a 88       	ldd	r2, Y+18	; 0x12
    4130:	39 88       	ldd	r3, Y+17	; 0x11
    4132:	48 88       	ldd	r4, Y+16	; 0x10
    4134:	5f 84       	ldd	r5, Y+15	; 0x0f
    4136:	6e 84       	ldd	r6, Y+14	; 0x0e
    4138:	7d 84       	ldd	r7, Y+13	; 0x0d
    413a:	8c 84       	ldd	r8, Y+12	; 0x0c
    413c:	9b 84       	ldd	r9, Y+11	; 0x0b
    413e:	aa 84       	ldd	r10, Y+10	; 0x0a
    4140:	b9 84       	ldd	r11, Y+9	; 0x09
    4142:	c8 84       	ldd	r12, Y+8	; 0x08
    4144:	df 80       	ldd	r13, Y+7	; 0x07
    4146:	ee 80       	ldd	r14, Y+6	; 0x06
    4148:	fd 80       	ldd	r15, Y+5	; 0x05
    414a:	0c 81       	ldd	r16, Y+4	; 0x04
    414c:	1b 81       	ldd	r17, Y+3	; 0x03
    414e:	aa 81       	ldd	r26, Y+2	; 0x02
    4150:	b9 81       	ldd	r27, Y+1	; 0x01
    4152:	ce 0f       	add	r28, r30
    4154:	d1 1d       	adc	r29, r1
    4156:	0f b6       	in	r0, 0x3f	; 63
    4158:	f8 94       	cli
    415a:	de bf       	out	0x3e, r29	; 62
    415c:	0f be       	out	0x3f, r0	; 63
    415e:	cd bf       	out	0x3d, r28	; 61
    4160:	ed 01       	movw	r28, r26
    4162:	08 95       	ret

00004164 <do_rand>:
    4164:	a0 e0       	ldi	r26, 0x00	; 0
    4166:	b0 e0       	ldi	r27, 0x00	; 0
    4168:	e7 eb       	ldi	r30, 0xB7	; 183
    416a:	f0 e2       	ldi	r31, 0x20	; 32
    416c:	cc cf       	rjmp	.-104    	; 0x4106 <__prologue_saves__+0x10>
    416e:	ec 01       	movw	r28, r24
    4170:	a8 80       	ld	r10, Y
    4172:	b9 80       	ldd	r11, Y+1	; 0x01
    4174:	ca 80       	ldd	r12, Y+2	; 0x02
    4176:	db 80       	ldd	r13, Y+3	; 0x03
    4178:	a1 14       	cp	r10, r1
    417a:	b1 04       	cpc	r11, r1
    417c:	c1 04       	cpc	r12, r1
    417e:	d1 04       	cpc	r13, r1
    4180:	41 f4       	brne	.+16     	; 0x4192 <do_rand+0x2e>
    4182:	84 e2       	ldi	r24, 0x24	; 36
    4184:	a8 2e       	mov	r10, r24
    4186:	89 ed       	ldi	r24, 0xD9	; 217
    4188:	b8 2e       	mov	r11, r24
    418a:	8b e5       	ldi	r24, 0x5B	; 91
    418c:	c8 2e       	mov	r12, r24
    418e:	87 e0       	ldi	r24, 0x07	; 7
    4190:	d8 2e       	mov	r13, r24
    4192:	c6 01       	movw	r24, r12
    4194:	b5 01       	movw	r22, r10
    4196:	2d e1       	ldi	r18, 0x1D	; 29
    4198:	33 ef       	ldi	r19, 0xF3	; 243
    419a:	41 e0       	ldi	r20, 0x01	; 1
    419c:	50 e0       	ldi	r21, 0x00	; 0
    419e:	e7 d2       	rcall	.+1486   	; 0x476e <__divmodsi4>
    41a0:	27 ea       	ldi	r18, 0xA7	; 167
    41a2:	31 e4       	ldi	r19, 0x41	; 65
    41a4:	40 e0       	ldi	r20, 0x00	; 0
    41a6:	50 e0       	ldi	r21, 0x00	; 0
    41a8:	c3 d2       	rcall	.+1414   	; 0x4730 <__mulsi3>
    41aa:	7b 01       	movw	r14, r22
    41ac:	8c 01       	movw	r16, r24
    41ae:	c6 01       	movw	r24, r12
    41b0:	b5 01       	movw	r22, r10
    41b2:	2d e1       	ldi	r18, 0x1D	; 29
    41b4:	33 ef       	ldi	r19, 0xF3	; 243
    41b6:	41 e0       	ldi	r20, 0x01	; 1
    41b8:	50 e0       	ldi	r21, 0x00	; 0
    41ba:	d9 d2       	rcall	.+1458   	; 0x476e <__divmodsi4>
    41bc:	ca 01       	movw	r24, r20
    41be:	b9 01       	movw	r22, r18
    41c0:	2c ee       	ldi	r18, 0xEC	; 236
    41c2:	34 ef       	ldi	r19, 0xF4	; 244
    41c4:	4f ef       	ldi	r20, 0xFF	; 255
    41c6:	5f ef       	ldi	r21, 0xFF	; 255
    41c8:	b3 d2       	rcall	.+1382   	; 0x4730 <__mulsi3>
    41ca:	6e 0d       	add	r22, r14
    41cc:	7f 1d       	adc	r23, r15
    41ce:	80 1f       	adc	r24, r16
    41d0:	91 1f       	adc	r25, r17
    41d2:	97 ff       	sbrs	r25, 7
    41d4:	04 c0       	rjmp	.+8      	; 0x41de <do_rand+0x7a>
    41d6:	61 50       	subi	r22, 0x01	; 1
    41d8:	70 40       	sbci	r23, 0x00	; 0
    41da:	80 40       	sbci	r24, 0x00	; 0
    41dc:	90 48       	sbci	r25, 0x80	; 128
    41de:	68 83       	st	Y, r22
    41e0:	79 83       	std	Y+1, r23	; 0x01
    41e2:	8a 83       	std	Y+2, r24	; 0x02
    41e4:	9b 83       	std	Y+3, r25	; 0x03
    41e6:	9b 01       	movw	r18, r22
    41e8:	3f 77       	andi	r19, 0x7F	; 127
    41ea:	c9 01       	movw	r24, r18
    41ec:	cd b7       	in	r28, 0x3d	; 61
    41ee:	de b7       	in	r29, 0x3e	; 62
    41f0:	ea e0       	ldi	r30, 0x0A	; 10
    41f2:	a5 cf       	rjmp	.-182    	; 0x413e <__epilogue_restores__+0x10>

000041f4 <rand_r>:
    41f4:	b7 cf       	rjmp	.-146    	; 0x4164 <do_rand>

000041f6 <rand>:
    41f6:	80 e1       	ldi	r24, 0x10	; 16
    41f8:	92 e0       	ldi	r25, 0x02	; 2
    41fa:	b4 cf       	rjmp	.-152    	; 0x4164 <do_rand>

000041fc <srand>:
    41fc:	a0 e0       	ldi	r26, 0x00	; 0
    41fe:	b0 e0       	ldi	r27, 0x00	; 0
    4200:	80 93 10 02 	sts	0x0210, r24
    4204:	90 93 11 02 	sts	0x0211, r25
    4208:	a0 93 12 02 	sts	0x0212, r26
    420c:	b0 93 13 02 	sts	0x0213, r27
    4210:	08 95       	ret

00004212 <sprintf>:
    4212:	ae e0       	ldi	r26, 0x0E	; 14
    4214:	b0 e0       	ldi	r27, 0x00	; 0
    4216:	ee e0       	ldi	r30, 0x0E	; 14
    4218:	f1 e2       	ldi	r31, 0x21	; 33
    421a:	7b cf       	rjmp	.-266    	; 0x4112 <__prologue_saves__+0x1c>
    421c:	0d 89       	ldd	r16, Y+21	; 0x15
    421e:	1e 89       	ldd	r17, Y+22	; 0x16
    4220:	86 e0       	ldi	r24, 0x06	; 6
    4222:	8c 83       	std	Y+4, r24	; 0x04
    4224:	1a 83       	std	Y+2, r17	; 0x02
    4226:	09 83       	std	Y+1, r16	; 0x01
    4228:	8f ef       	ldi	r24, 0xFF	; 255
    422a:	9f e7       	ldi	r25, 0x7F	; 127
    422c:	9e 83       	std	Y+6, r25	; 0x06
    422e:	8d 83       	std	Y+5, r24	; 0x05
    4230:	9e 01       	movw	r18, r28
    4232:	27 5e       	subi	r18, 0xE7	; 231
    4234:	3f 4f       	sbci	r19, 0xFF	; 255
    4236:	ce 01       	movw	r24, r28
    4238:	01 96       	adiw	r24, 0x01	; 1
    423a:	6f 89       	ldd	r22, Y+23	; 0x17
    423c:	78 8d       	ldd	r23, Y+24	; 0x18
    423e:	a9 01       	movw	r20, r18
    4240:	09 d0       	rcall	.+18     	; 0x4254 <vfprintf>
    4242:	2f 81       	ldd	r18, Y+7	; 0x07
    4244:	38 85       	ldd	r19, Y+8	; 0x08
    4246:	02 0f       	add	r16, r18
    4248:	13 1f       	adc	r17, r19
    424a:	f8 01       	movw	r30, r16
    424c:	10 82       	st	Z, r1
    424e:	2e 96       	adiw	r28, 0x0e	; 14
    4250:	e4 e0       	ldi	r30, 0x04	; 4
    4252:	7b cf       	rjmp	.-266    	; 0x414a <__epilogue_restores__+0x1c>

00004254 <vfprintf>:
    4254:	ab e0       	ldi	r26, 0x0B	; 11
    4256:	b0 e0       	ldi	r27, 0x00	; 0
    4258:	ef e2       	ldi	r30, 0x2F	; 47
    425a:	f1 e2       	ldi	r31, 0x21	; 33
    425c:	4c cf       	rjmp	.-360    	; 0x40f6 <__prologue_saves__>
    425e:	3c 01       	movw	r6, r24
    4260:	2b 01       	movw	r4, r22
    4262:	5a 01       	movw	r10, r20
    4264:	fc 01       	movw	r30, r24
    4266:	17 82       	std	Z+7, r1	; 0x07
    4268:	16 82       	std	Z+6, r1	; 0x06
    426a:	83 81       	ldd	r24, Z+3	; 0x03
    426c:	81 fd       	sbrc	r24, 1
    426e:	03 c0       	rjmp	.+6      	; 0x4276 <vfprintf+0x22>
    4270:	6f ef       	ldi	r22, 0xFF	; 255
    4272:	7f ef       	ldi	r23, 0xFF	; 255
    4274:	b9 c1       	rjmp	.+882    	; 0x45e8 <vfprintf+0x394>
    4276:	9a e0       	ldi	r25, 0x0A	; 10
    4278:	89 2e       	mov	r8, r25
    427a:	1e 01       	movw	r2, r28
    427c:	08 94       	sec
    427e:	21 1c       	adc	r2, r1
    4280:	31 1c       	adc	r3, r1
    4282:	f3 01       	movw	r30, r6
    4284:	23 81       	ldd	r18, Z+3	; 0x03
    4286:	f2 01       	movw	r30, r4
    4288:	23 fd       	sbrc	r18, 3
    428a:	85 91       	lpm	r24, Z+
    428c:	23 ff       	sbrs	r18, 3
    428e:	81 91       	ld	r24, Z+
    4290:	2f 01       	movw	r4, r30
    4292:	88 23       	and	r24, r24
    4294:	09 f4       	brne	.+2      	; 0x4298 <vfprintf+0x44>
    4296:	a5 c1       	rjmp	.+842    	; 0x45e2 <vfprintf+0x38e>
    4298:	85 32       	cpi	r24, 0x25	; 37
    429a:	39 f4       	brne	.+14     	; 0x42aa <vfprintf+0x56>
    429c:	23 fd       	sbrc	r18, 3
    429e:	85 91       	lpm	r24, Z+
    42a0:	23 ff       	sbrs	r18, 3
    42a2:	81 91       	ld	r24, Z+
    42a4:	2f 01       	movw	r4, r30
    42a6:	85 32       	cpi	r24, 0x25	; 37
    42a8:	21 f4       	brne	.+8      	; 0x42b2 <vfprintf+0x5e>
    42aa:	90 e0       	ldi	r25, 0x00	; 0
    42ac:	b3 01       	movw	r22, r6
    42ae:	b6 d1       	rcall	.+876    	; 0x461c <fputc>
    42b0:	e8 cf       	rjmp	.-48     	; 0x4282 <vfprintf+0x2e>
    42b2:	98 2f       	mov	r25, r24
    42b4:	ff 24       	eor	r15, r15
    42b6:	ee 24       	eor	r14, r14
    42b8:	99 24       	eor	r9, r9
    42ba:	ff e1       	ldi	r31, 0x1F	; 31
    42bc:	ff 15       	cp	r31, r15
    42be:	d0 f0       	brcs	.+52     	; 0x42f4 <vfprintf+0xa0>
    42c0:	9b 32       	cpi	r25, 0x2B	; 43
    42c2:	69 f0       	breq	.+26     	; 0x42de <vfprintf+0x8a>
    42c4:	9c 32       	cpi	r25, 0x2C	; 44
    42c6:	28 f4       	brcc	.+10     	; 0x42d2 <vfprintf+0x7e>
    42c8:	90 32       	cpi	r25, 0x20	; 32
    42ca:	59 f0       	breq	.+22     	; 0x42e2 <vfprintf+0x8e>
    42cc:	93 32       	cpi	r25, 0x23	; 35
    42ce:	91 f4       	brne	.+36     	; 0x42f4 <vfprintf+0xa0>
    42d0:	0e c0       	rjmp	.+28     	; 0x42ee <vfprintf+0x9a>
    42d2:	9d 32       	cpi	r25, 0x2D	; 45
    42d4:	49 f0       	breq	.+18     	; 0x42e8 <vfprintf+0x94>
    42d6:	90 33       	cpi	r25, 0x30	; 48
    42d8:	69 f4       	brne	.+26     	; 0x42f4 <vfprintf+0xa0>
    42da:	41 e0       	ldi	r20, 0x01	; 1
    42dc:	24 c0       	rjmp	.+72     	; 0x4326 <vfprintf+0xd2>
    42de:	52 e0       	ldi	r21, 0x02	; 2
    42e0:	f5 2a       	or	r15, r21
    42e2:	84 e0       	ldi	r24, 0x04	; 4
    42e4:	f8 2a       	or	r15, r24
    42e6:	28 c0       	rjmp	.+80     	; 0x4338 <vfprintf+0xe4>
    42e8:	98 e0       	ldi	r25, 0x08	; 8
    42ea:	f9 2a       	or	r15, r25
    42ec:	25 c0       	rjmp	.+74     	; 0x4338 <vfprintf+0xe4>
    42ee:	e0 e1       	ldi	r30, 0x10	; 16
    42f0:	fe 2a       	or	r15, r30
    42f2:	22 c0       	rjmp	.+68     	; 0x4338 <vfprintf+0xe4>
    42f4:	f7 fc       	sbrc	r15, 7
    42f6:	29 c0       	rjmp	.+82     	; 0x434a <vfprintf+0xf6>
    42f8:	89 2f       	mov	r24, r25
    42fa:	80 53       	subi	r24, 0x30	; 48
    42fc:	8a 30       	cpi	r24, 0x0A	; 10
    42fe:	70 f4       	brcc	.+28     	; 0x431c <vfprintf+0xc8>
    4300:	f6 fe       	sbrs	r15, 6
    4302:	05 c0       	rjmp	.+10     	; 0x430e <vfprintf+0xba>
    4304:	98 9c       	mul	r9, r8
    4306:	90 2c       	mov	r9, r0
    4308:	11 24       	eor	r1, r1
    430a:	98 0e       	add	r9, r24
    430c:	15 c0       	rjmp	.+42     	; 0x4338 <vfprintf+0xe4>
    430e:	e8 9c       	mul	r14, r8
    4310:	e0 2c       	mov	r14, r0
    4312:	11 24       	eor	r1, r1
    4314:	e8 0e       	add	r14, r24
    4316:	f0 e2       	ldi	r31, 0x20	; 32
    4318:	ff 2a       	or	r15, r31
    431a:	0e c0       	rjmp	.+28     	; 0x4338 <vfprintf+0xe4>
    431c:	9e 32       	cpi	r25, 0x2E	; 46
    431e:	29 f4       	brne	.+10     	; 0x432a <vfprintf+0xd6>
    4320:	f6 fc       	sbrc	r15, 6
    4322:	5f c1       	rjmp	.+702    	; 0x45e2 <vfprintf+0x38e>
    4324:	40 e4       	ldi	r20, 0x40	; 64
    4326:	f4 2a       	or	r15, r20
    4328:	07 c0       	rjmp	.+14     	; 0x4338 <vfprintf+0xe4>
    432a:	9c 36       	cpi	r25, 0x6C	; 108
    432c:	19 f4       	brne	.+6      	; 0x4334 <vfprintf+0xe0>
    432e:	50 e8       	ldi	r21, 0x80	; 128
    4330:	f5 2a       	or	r15, r21
    4332:	02 c0       	rjmp	.+4      	; 0x4338 <vfprintf+0xe4>
    4334:	98 36       	cpi	r25, 0x68	; 104
    4336:	49 f4       	brne	.+18     	; 0x434a <vfprintf+0xf6>
    4338:	f2 01       	movw	r30, r4
    433a:	23 fd       	sbrc	r18, 3
    433c:	95 91       	lpm	r25, Z+
    433e:	23 ff       	sbrs	r18, 3
    4340:	91 91       	ld	r25, Z+
    4342:	2f 01       	movw	r4, r30
    4344:	99 23       	and	r25, r25
    4346:	09 f0       	breq	.+2      	; 0x434a <vfprintf+0xf6>
    4348:	b8 cf       	rjmp	.-144    	; 0x42ba <vfprintf+0x66>
    434a:	89 2f       	mov	r24, r25
    434c:	85 54       	subi	r24, 0x45	; 69
    434e:	83 30       	cpi	r24, 0x03	; 3
    4350:	18 f0       	brcs	.+6      	; 0x4358 <vfprintf+0x104>
    4352:	80 52       	subi	r24, 0x20	; 32
    4354:	83 30       	cpi	r24, 0x03	; 3
    4356:	38 f4       	brcc	.+14     	; 0x4366 <vfprintf+0x112>
    4358:	44 e0       	ldi	r20, 0x04	; 4
    435a:	50 e0       	ldi	r21, 0x00	; 0
    435c:	a4 0e       	add	r10, r20
    435e:	b5 1e       	adc	r11, r21
    4360:	5f e3       	ldi	r21, 0x3F	; 63
    4362:	59 83       	std	Y+1, r21	; 0x01
    4364:	0f c0       	rjmp	.+30     	; 0x4384 <vfprintf+0x130>
    4366:	93 36       	cpi	r25, 0x63	; 99
    4368:	31 f0       	breq	.+12     	; 0x4376 <vfprintf+0x122>
    436a:	93 37       	cpi	r25, 0x73	; 115
    436c:	79 f0       	breq	.+30     	; 0x438c <vfprintf+0x138>
    436e:	93 35       	cpi	r25, 0x53	; 83
    4370:	09 f0       	breq	.+2      	; 0x4374 <vfprintf+0x120>
    4372:	52 c0       	rjmp	.+164    	; 0x4418 <vfprintf+0x1c4>
    4374:	1f c0       	rjmp	.+62     	; 0x43b4 <vfprintf+0x160>
    4376:	f5 01       	movw	r30, r10
    4378:	80 81       	ld	r24, Z
    437a:	89 83       	std	Y+1, r24	; 0x01
    437c:	42 e0       	ldi	r20, 0x02	; 2
    437e:	50 e0       	ldi	r21, 0x00	; 0
    4380:	a4 0e       	add	r10, r20
    4382:	b5 1e       	adc	r11, r21
    4384:	61 01       	movw	r12, r2
    4386:	01 e0       	ldi	r16, 0x01	; 1
    4388:	10 e0       	ldi	r17, 0x00	; 0
    438a:	11 c0       	rjmp	.+34     	; 0x43ae <vfprintf+0x15a>
    438c:	f5 01       	movw	r30, r10
    438e:	c0 80       	ld	r12, Z
    4390:	d1 80       	ldd	r13, Z+1	; 0x01
    4392:	f6 fc       	sbrc	r15, 6
    4394:	03 c0       	rjmp	.+6      	; 0x439c <vfprintf+0x148>
    4396:	6f ef       	ldi	r22, 0xFF	; 255
    4398:	7f ef       	ldi	r23, 0xFF	; 255
    439a:	02 c0       	rjmp	.+4      	; 0x43a0 <vfprintf+0x14c>
    439c:	69 2d       	mov	r22, r9
    439e:	70 e0       	ldi	r23, 0x00	; 0
    43a0:	42 e0       	ldi	r20, 0x02	; 2
    43a2:	50 e0       	ldi	r21, 0x00	; 0
    43a4:	a4 0e       	add	r10, r20
    43a6:	b5 1e       	adc	r11, r21
    43a8:	c6 01       	movw	r24, r12
    43aa:	2d d1       	rcall	.+602    	; 0x4606 <strnlen>
    43ac:	8c 01       	movw	r16, r24
    43ae:	5f e7       	ldi	r21, 0x7F	; 127
    43b0:	f5 22       	and	r15, r21
    43b2:	13 c0       	rjmp	.+38     	; 0x43da <vfprintf+0x186>
    43b4:	f5 01       	movw	r30, r10
    43b6:	c0 80       	ld	r12, Z
    43b8:	d1 80       	ldd	r13, Z+1	; 0x01
    43ba:	f6 fc       	sbrc	r15, 6
    43bc:	03 c0       	rjmp	.+6      	; 0x43c4 <vfprintf+0x170>
    43be:	6f ef       	ldi	r22, 0xFF	; 255
    43c0:	7f ef       	ldi	r23, 0xFF	; 255
    43c2:	02 c0       	rjmp	.+4      	; 0x43c8 <vfprintf+0x174>
    43c4:	69 2d       	mov	r22, r9
    43c6:	70 e0       	ldi	r23, 0x00	; 0
    43c8:	42 e0       	ldi	r20, 0x02	; 2
    43ca:	50 e0       	ldi	r21, 0x00	; 0
    43cc:	a4 0e       	add	r10, r20
    43ce:	b5 1e       	adc	r11, r21
    43d0:	c6 01       	movw	r24, r12
    43d2:	0e d1       	rcall	.+540    	; 0x45f0 <strnlen_P>
    43d4:	8c 01       	movw	r16, r24
    43d6:	50 e8       	ldi	r21, 0x80	; 128
    43d8:	f5 2a       	or	r15, r21
    43da:	f3 fe       	sbrs	r15, 3
    43dc:	06 c0       	rjmp	.+12     	; 0x43ea <vfprintf+0x196>
    43de:	18 c0       	rjmp	.+48     	; 0x4410 <vfprintf+0x1bc>
    43e0:	80 e2       	ldi	r24, 0x20	; 32
    43e2:	90 e0       	ldi	r25, 0x00	; 0
    43e4:	b3 01       	movw	r22, r6
    43e6:	1a d1       	rcall	.+564    	; 0x461c <fputc>
    43e8:	ea 94       	dec	r14
    43ea:	8e 2d       	mov	r24, r14
    43ec:	90 e0       	ldi	r25, 0x00	; 0
    43ee:	08 17       	cp	r16, r24
    43f0:	19 07       	cpc	r17, r25
    43f2:	b0 f3       	brcs	.-20     	; 0x43e0 <vfprintf+0x18c>
    43f4:	0d c0       	rjmp	.+26     	; 0x4410 <vfprintf+0x1bc>
    43f6:	f6 01       	movw	r30, r12
    43f8:	f7 fc       	sbrc	r15, 7
    43fa:	85 91       	lpm	r24, Z+
    43fc:	f7 fe       	sbrs	r15, 7
    43fe:	81 91       	ld	r24, Z+
    4400:	6f 01       	movw	r12, r30
    4402:	90 e0       	ldi	r25, 0x00	; 0
    4404:	b3 01       	movw	r22, r6
    4406:	0a d1       	rcall	.+532    	; 0x461c <fputc>
    4408:	e1 10       	cpse	r14, r1
    440a:	ea 94       	dec	r14
    440c:	01 50       	subi	r16, 0x01	; 1
    440e:	10 40       	sbci	r17, 0x00	; 0
    4410:	01 15       	cp	r16, r1
    4412:	11 05       	cpc	r17, r1
    4414:	81 f7       	brne	.-32     	; 0x43f6 <vfprintf+0x1a2>
    4416:	e2 c0       	rjmp	.+452    	; 0x45dc <vfprintf+0x388>
    4418:	94 36       	cpi	r25, 0x64	; 100
    441a:	11 f0       	breq	.+4      	; 0x4420 <vfprintf+0x1cc>
    441c:	99 36       	cpi	r25, 0x69	; 105
    441e:	61 f5       	brne	.+88     	; 0x4478 <vfprintf+0x224>
    4420:	f7 fe       	sbrs	r15, 7
    4422:	08 c0       	rjmp	.+16     	; 0x4434 <vfprintf+0x1e0>
    4424:	f5 01       	movw	r30, r10
    4426:	20 81       	ld	r18, Z
    4428:	31 81       	ldd	r19, Z+1	; 0x01
    442a:	42 81       	ldd	r20, Z+2	; 0x02
    442c:	53 81       	ldd	r21, Z+3	; 0x03
    442e:	84 e0       	ldi	r24, 0x04	; 4
    4430:	90 e0       	ldi	r25, 0x00	; 0
    4432:	0a c0       	rjmp	.+20     	; 0x4448 <vfprintf+0x1f4>
    4434:	f5 01       	movw	r30, r10
    4436:	80 81       	ld	r24, Z
    4438:	91 81       	ldd	r25, Z+1	; 0x01
    443a:	9c 01       	movw	r18, r24
    443c:	44 27       	eor	r20, r20
    443e:	37 fd       	sbrc	r19, 7
    4440:	40 95       	com	r20
    4442:	54 2f       	mov	r21, r20
    4444:	82 e0       	ldi	r24, 0x02	; 2
    4446:	90 e0       	ldi	r25, 0x00	; 0
    4448:	a8 0e       	add	r10, r24
    444a:	b9 1e       	adc	r11, r25
    444c:	9f e6       	ldi	r25, 0x6F	; 111
    444e:	f9 22       	and	r15, r25
    4450:	57 ff       	sbrs	r21, 7
    4452:	09 c0       	rjmp	.+18     	; 0x4466 <vfprintf+0x212>
    4454:	50 95       	com	r21
    4456:	40 95       	com	r20
    4458:	30 95       	com	r19
    445a:	21 95       	neg	r18
    445c:	3f 4f       	sbci	r19, 0xFF	; 255
    445e:	4f 4f       	sbci	r20, 0xFF	; 255
    4460:	5f 4f       	sbci	r21, 0xFF	; 255
    4462:	e0 e8       	ldi	r30, 0x80	; 128
    4464:	fe 2a       	or	r15, r30
    4466:	ca 01       	movw	r24, r20
    4468:	b9 01       	movw	r22, r18
    446a:	a1 01       	movw	r20, r2
    446c:	2a e0       	ldi	r18, 0x0A	; 10
    446e:	30 e0       	ldi	r19, 0x00	; 0
    4470:	01 d1       	rcall	.+514    	; 0x4674 <__ultoa_invert>
    4472:	d8 2e       	mov	r13, r24
    4474:	d2 18       	sub	r13, r2
    4476:	3f c0       	rjmp	.+126    	; 0x44f6 <vfprintf+0x2a2>
    4478:	95 37       	cpi	r25, 0x75	; 117
    447a:	29 f4       	brne	.+10     	; 0x4486 <vfprintf+0x232>
    447c:	1f 2d       	mov	r17, r15
    447e:	1f 7e       	andi	r17, 0xEF	; 239
    4480:	2a e0       	ldi	r18, 0x0A	; 10
    4482:	30 e0       	ldi	r19, 0x00	; 0
    4484:	1d c0       	rjmp	.+58     	; 0x44c0 <vfprintf+0x26c>
    4486:	1f 2d       	mov	r17, r15
    4488:	19 7f       	andi	r17, 0xF9	; 249
    448a:	9f 36       	cpi	r25, 0x6F	; 111
    448c:	61 f0       	breq	.+24     	; 0x44a6 <vfprintf+0x252>
    448e:	90 37       	cpi	r25, 0x70	; 112
    4490:	20 f4       	brcc	.+8      	; 0x449a <vfprintf+0x246>
    4492:	98 35       	cpi	r25, 0x58	; 88
    4494:	09 f0       	breq	.+2      	; 0x4498 <vfprintf+0x244>
    4496:	a5 c0       	rjmp	.+330    	; 0x45e2 <vfprintf+0x38e>
    4498:	0f c0       	rjmp	.+30     	; 0x44b8 <vfprintf+0x264>
    449a:	90 37       	cpi	r25, 0x70	; 112
    449c:	39 f0       	breq	.+14     	; 0x44ac <vfprintf+0x258>
    449e:	98 37       	cpi	r25, 0x78	; 120
    44a0:	09 f0       	breq	.+2      	; 0x44a4 <vfprintf+0x250>
    44a2:	9f c0       	rjmp	.+318    	; 0x45e2 <vfprintf+0x38e>
    44a4:	04 c0       	rjmp	.+8      	; 0x44ae <vfprintf+0x25a>
    44a6:	28 e0       	ldi	r18, 0x08	; 8
    44a8:	30 e0       	ldi	r19, 0x00	; 0
    44aa:	0a c0       	rjmp	.+20     	; 0x44c0 <vfprintf+0x26c>
    44ac:	10 61       	ori	r17, 0x10	; 16
    44ae:	14 fd       	sbrc	r17, 4
    44b0:	14 60       	ori	r17, 0x04	; 4
    44b2:	20 e1       	ldi	r18, 0x10	; 16
    44b4:	30 e0       	ldi	r19, 0x00	; 0
    44b6:	04 c0       	rjmp	.+8      	; 0x44c0 <vfprintf+0x26c>
    44b8:	14 fd       	sbrc	r17, 4
    44ba:	16 60       	ori	r17, 0x06	; 6
    44bc:	20 e1       	ldi	r18, 0x10	; 16
    44be:	32 e0       	ldi	r19, 0x02	; 2
    44c0:	17 ff       	sbrs	r17, 7
    44c2:	08 c0       	rjmp	.+16     	; 0x44d4 <vfprintf+0x280>
    44c4:	f5 01       	movw	r30, r10
    44c6:	60 81       	ld	r22, Z
    44c8:	71 81       	ldd	r23, Z+1	; 0x01
    44ca:	82 81       	ldd	r24, Z+2	; 0x02
    44cc:	93 81       	ldd	r25, Z+3	; 0x03
    44ce:	44 e0       	ldi	r20, 0x04	; 4
    44d0:	50 e0       	ldi	r21, 0x00	; 0
    44d2:	08 c0       	rjmp	.+16     	; 0x44e4 <vfprintf+0x290>
    44d4:	f5 01       	movw	r30, r10
    44d6:	80 81       	ld	r24, Z
    44d8:	91 81       	ldd	r25, Z+1	; 0x01
    44da:	bc 01       	movw	r22, r24
    44dc:	80 e0       	ldi	r24, 0x00	; 0
    44de:	90 e0       	ldi	r25, 0x00	; 0
    44e0:	42 e0       	ldi	r20, 0x02	; 2
    44e2:	50 e0       	ldi	r21, 0x00	; 0
    44e4:	a4 0e       	add	r10, r20
    44e6:	b5 1e       	adc	r11, r21
    44e8:	a1 01       	movw	r20, r2
    44ea:	c4 d0       	rcall	.+392    	; 0x4674 <__ultoa_invert>
    44ec:	d8 2e       	mov	r13, r24
    44ee:	d2 18       	sub	r13, r2
    44f0:	8f e7       	ldi	r24, 0x7F	; 127
    44f2:	f8 2e       	mov	r15, r24
    44f4:	f1 22       	and	r15, r17
    44f6:	f6 fe       	sbrs	r15, 6
    44f8:	0b c0       	rjmp	.+22     	; 0x4510 <vfprintf+0x2bc>
    44fa:	5e ef       	ldi	r21, 0xFE	; 254
    44fc:	f5 22       	and	r15, r21
    44fe:	d9 14       	cp	r13, r9
    4500:	38 f4       	brcc	.+14     	; 0x4510 <vfprintf+0x2bc>
    4502:	f4 fe       	sbrs	r15, 4
    4504:	07 c0       	rjmp	.+14     	; 0x4514 <vfprintf+0x2c0>
    4506:	f2 fc       	sbrc	r15, 2
    4508:	05 c0       	rjmp	.+10     	; 0x4514 <vfprintf+0x2c0>
    450a:	8f ee       	ldi	r24, 0xEF	; 239
    450c:	f8 22       	and	r15, r24
    450e:	02 c0       	rjmp	.+4      	; 0x4514 <vfprintf+0x2c0>
    4510:	1d 2d       	mov	r17, r13
    4512:	01 c0       	rjmp	.+2      	; 0x4516 <vfprintf+0x2c2>
    4514:	19 2d       	mov	r17, r9
    4516:	f4 fe       	sbrs	r15, 4
    4518:	0d c0       	rjmp	.+26     	; 0x4534 <vfprintf+0x2e0>
    451a:	fe 01       	movw	r30, r28
    451c:	ed 0d       	add	r30, r13
    451e:	f1 1d       	adc	r31, r1
    4520:	80 81       	ld	r24, Z
    4522:	80 33       	cpi	r24, 0x30	; 48
    4524:	19 f4       	brne	.+6      	; 0x452c <vfprintf+0x2d8>
    4526:	99 ee       	ldi	r25, 0xE9	; 233
    4528:	f9 22       	and	r15, r25
    452a:	08 c0       	rjmp	.+16     	; 0x453c <vfprintf+0x2e8>
    452c:	1f 5f       	subi	r17, 0xFF	; 255
    452e:	f2 fe       	sbrs	r15, 2
    4530:	05 c0       	rjmp	.+10     	; 0x453c <vfprintf+0x2e8>
    4532:	03 c0       	rjmp	.+6      	; 0x453a <vfprintf+0x2e6>
    4534:	8f 2d       	mov	r24, r15
    4536:	86 78       	andi	r24, 0x86	; 134
    4538:	09 f0       	breq	.+2      	; 0x453c <vfprintf+0x2e8>
    453a:	1f 5f       	subi	r17, 0xFF	; 255
    453c:	0f 2d       	mov	r16, r15
    453e:	f3 fc       	sbrc	r15, 3
    4540:	13 c0       	rjmp	.+38     	; 0x4568 <vfprintf+0x314>
    4542:	f0 fe       	sbrs	r15, 0
    4544:	0e c0       	rjmp	.+28     	; 0x4562 <vfprintf+0x30e>
    4546:	1e 15       	cp	r17, r14
    4548:	10 f0       	brcs	.+4      	; 0x454e <vfprintf+0x2fa>
    454a:	9d 2c       	mov	r9, r13
    454c:	0a c0       	rjmp	.+20     	; 0x4562 <vfprintf+0x30e>
    454e:	9d 2c       	mov	r9, r13
    4550:	9e 0c       	add	r9, r14
    4552:	91 1a       	sub	r9, r17
    4554:	1e 2d       	mov	r17, r14
    4556:	05 c0       	rjmp	.+10     	; 0x4562 <vfprintf+0x30e>
    4558:	80 e2       	ldi	r24, 0x20	; 32
    455a:	90 e0       	ldi	r25, 0x00	; 0
    455c:	b3 01       	movw	r22, r6
    455e:	5e d0       	rcall	.+188    	; 0x461c <fputc>
    4560:	1f 5f       	subi	r17, 0xFF	; 255
    4562:	1e 15       	cp	r17, r14
    4564:	c8 f3       	brcs	.-14     	; 0x4558 <vfprintf+0x304>
    4566:	04 c0       	rjmp	.+8      	; 0x4570 <vfprintf+0x31c>
    4568:	1e 15       	cp	r17, r14
    456a:	10 f4       	brcc	.+4      	; 0x4570 <vfprintf+0x31c>
    456c:	e1 1a       	sub	r14, r17
    456e:	01 c0       	rjmp	.+2      	; 0x4572 <vfprintf+0x31e>
    4570:	ee 24       	eor	r14, r14
    4572:	04 ff       	sbrs	r16, 4
    4574:	0e c0       	rjmp	.+28     	; 0x4592 <vfprintf+0x33e>
    4576:	80 e3       	ldi	r24, 0x30	; 48
    4578:	90 e0       	ldi	r25, 0x00	; 0
    457a:	b3 01       	movw	r22, r6
    457c:	4f d0       	rcall	.+158    	; 0x461c <fputc>
    457e:	02 ff       	sbrs	r16, 2
    4580:	1b c0       	rjmp	.+54     	; 0x45b8 <vfprintf+0x364>
    4582:	01 fd       	sbrc	r16, 1
    4584:	03 c0       	rjmp	.+6      	; 0x458c <vfprintf+0x338>
    4586:	88 e7       	ldi	r24, 0x78	; 120
    4588:	90 e0       	ldi	r25, 0x00	; 0
    458a:	0e c0       	rjmp	.+28     	; 0x45a8 <vfprintf+0x354>
    458c:	88 e5       	ldi	r24, 0x58	; 88
    458e:	90 e0       	ldi	r25, 0x00	; 0
    4590:	0b c0       	rjmp	.+22     	; 0x45a8 <vfprintf+0x354>
    4592:	80 2f       	mov	r24, r16
    4594:	86 78       	andi	r24, 0x86	; 134
    4596:	81 f0       	breq	.+32     	; 0x45b8 <vfprintf+0x364>
    4598:	01 ff       	sbrs	r16, 1
    459a:	02 c0       	rjmp	.+4      	; 0x45a0 <vfprintf+0x34c>
    459c:	8b e2       	ldi	r24, 0x2B	; 43
    459e:	01 c0       	rjmp	.+2      	; 0x45a2 <vfprintf+0x34e>
    45a0:	80 e2       	ldi	r24, 0x20	; 32
    45a2:	f7 fc       	sbrc	r15, 7
    45a4:	8d e2       	ldi	r24, 0x2D	; 45
    45a6:	90 e0       	ldi	r25, 0x00	; 0
    45a8:	b3 01       	movw	r22, r6
    45aa:	38 d0       	rcall	.+112    	; 0x461c <fputc>
    45ac:	05 c0       	rjmp	.+10     	; 0x45b8 <vfprintf+0x364>
    45ae:	80 e3       	ldi	r24, 0x30	; 48
    45b0:	90 e0       	ldi	r25, 0x00	; 0
    45b2:	b3 01       	movw	r22, r6
    45b4:	33 d0       	rcall	.+102    	; 0x461c <fputc>
    45b6:	9a 94       	dec	r9
    45b8:	d9 14       	cp	r13, r9
    45ba:	c8 f3       	brcs	.-14     	; 0x45ae <vfprintf+0x35a>
    45bc:	da 94       	dec	r13
    45be:	f1 01       	movw	r30, r2
    45c0:	ed 0d       	add	r30, r13
    45c2:	f1 1d       	adc	r31, r1
    45c4:	80 81       	ld	r24, Z
    45c6:	90 e0       	ldi	r25, 0x00	; 0
    45c8:	b3 01       	movw	r22, r6
    45ca:	28 d0       	rcall	.+80     	; 0x461c <fputc>
    45cc:	dd 20       	and	r13, r13
    45ce:	b1 f7       	brne	.-20     	; 0x45bc <vfprintf+0x368>
    45d0:	05 c0       	rjmp	.+10     	; 0x45dc <vfprintf+0x388>
    45d2:	80 e2       	ldi	r24, 0x20	; 32
    45d4:	90 e0       	ldi	r25, 0x00	; 0
    45d6:	b3 01       	movw	r22, r6
    45d8:	21 d0       	rcall	.+66     	; 0x461c <fputc>
    45da:	ea 94       	dec	r14
    45dc:	ee 20       	and	r14, r14
    45de:	c9 f7       	brne	.-14     	; 0x45d2 <vfprintf+0x37e>
    45e0:	50 ce       	rjmp	.-864    	; 0x4282 <vfprintf+0x2e>
    45e2:	f3 01       	movw	r30, r6
    45e4:	66 81       	ldd	r22, Z+6	; 0x06
    45e6:	77 81       	ldd	r23, Z+7	; 0x07
    45e8:	cb 01       	movw	r24, r22
    45ea:	2b 96       	adiw	r28, 0x0b	; 11
    45ec:	e2 e1       	ldi	r30, 0x12	; 18
    45ee:	9f cd       	rjmp	.-1218   	; 0x412e <__epilogue_restores__>

000045f0 <strnlen_P>:
    45f0:	fc 01       	movw	r30, r24
    45f2:	05 90       	lpm	r0, Z+
    45f4:	61 50       	subi	r22, 0x01	; 1
    45f6:	70 40       	sbci	r23, 0x00	; 0
    45f8:	01 10       	cpse	r0, r1
    45fa:	d8 f7       	brcc	.-10     	; 0x45f2 <strnlen_P+0x2>
    45fc:	80 95       	com	r24
    45fe:	90 95       	com	r25
    4600:	8e 0f       	add	r24, r30
    4602:	9f 1f       	adc	r25, r31
    4604:	08 95       	ret

00004606 <strnlen>:
    4606:	fc 01       	movw	r30, r24
    4608:	61 50       	subi	r22, 0x01	; 1
    460a:	70 40       	sbci	r23, 0x00	; 0
    460c:	01 90       	ld	r0, Z+
    460e:	01 10       	cpse	r0, r1
    4610:	d8 f7       	brcc	.-10     	; 0x4608 <strnlen+0x2>
    4612:	80 95       	com	r24
    4614:	90 95       	com	r25
    4616:	8e 0f       	add	r24, r30
    4618:	9f 1f       	adc	r25, r31
    461a:	08 95       	ret

0000461c <fputc>:
    461c:	0f 93       	push	r16
    461e:	1f 93       	push	r17
    4620:	cf 93       	push	r28
    4622:	df 93       	push	r29
    4624:	8c 01       	movw	r16, r24
    4626:	eb 01       	movw	r28, r22
    4628:	8b 81       	ldd	r24, Y+3	; 0x03
    462a:	81 ff       	sbrs	r24, 1
    462c:	1b c0       	rjmp	.+54     	; 0x4664 <fputc+0x48>
    462e:	82 ff       	sbrs	r24, 2
    4630:	0d c0       	rjmp	.+26     	; 0x464c <fputc+0x30>
    4632:	2e 81       	ldd	r18, Y+6	; 0x06
    4634:	3f 81       	ldd	r19, Y+7	; 0x07
    4636:	8c 81       	ldd	r24, Y+4	; 0x04
    4638:	9d 81       	ldd	r25, Y+5	; 0x05
    463a:	28 17       	cp	r18, r24
    463c:	39 07       	cpc	r19, r25
    463e:	64 f4       	brge	.+24     	; 0x4658 <fputc+0x3c>
    4640:	e8 81       	ld	r30, Y
    4642:	f9 81       	ldd	r31, Y+1	; 0x01
    4644:	01 93       	st	Z+, r16
    4646:	f9 83       	std	Y+1, r31	; 0x01
    4648:	e8 83       	st	Y, r30
    464a:	06 c0       	rjmp	.+12     	; 0x4658 <fputc+0x3c>
    464c:	e8 85       	ldd	r30, Y+8	; 0x08
    464e:	f9 85       	ldd	r31, Y+9	; 0x09
    4650:	80 2f       	mov	r24, r16
    4652:	09 95       	icall
    4654:	89 2b       	or	r24, r25
    4656:	31 f4       	brne	.+12     	; 0x4664 <fputc+0x48>
    4658:	8e 81       	ldd	r24, Y+6	; 0x06
    465a:	9f 81       	ldd	r25, Y+7	; 0x07
    465c:	01 96       	adiw	r24, 0x01	; 1
    465e:	9f 83       	std	Y+7, r25	; 0x07
    4660:	8e 83       	std	Y+6, r24	; 0x06
    4662:	02 c0       	rjmp	.+4      	; 0x4668 <fputc+0x4c>
    4664:	0f ef       	ldi	r16, 0xFF	; 255
    4666:	1f ef       	ldi	r17, 0xFF	; 255
    4668:	c8 01       	movw	r24, r16
    466a:	df 91       	pop	r29
    466c:	cf 91       	pop	r28
    466e:	1f 91       	pop	r17
    4670:	0f 91       	pop	r16
    4672:	08 95       	ret

00004674 <__ultoa_invert>:
    4674:	fa 01       	movw	r30, r20
    4676:	aa 27       	eor	r26, r26
    4678:	28 30       	cpi	r18, 0x08	; 8
    467a:	51 f1       	breq	.+84     	; 0x46d0 <__ultoa_invert+0x5c>
    467c:	20 31       	cpi	r18, 0x10	; 16
    467e:	81 f1       	breq	.+96     	; 0x46e0 <__ultoa_invert+0x6c>
    4680:	e8 94       	clt
    4682:	6f 93       	push	r22
    4684:	6e 7f       	andi	r22, 0xFE	; 254
    4686:	6e 5f       	subi	r22, 0xFE	; 254
    4688:	7f 4f       	sbci	r23, 0xFF	; 255
    468a:	8f 4f       	sbci	r24, 0xFF	; 255
    468c:	9f 4f       	sbci	r25, 0xFF	; 255
    468e:	af 4f       	sbci	r26, 0xFF	; 255
    4690:	b1 e0       	ldi	r27, 0x01	; 1
    4692:	3e d0       	rcall	.+124    	; 0x4710 <__ultoa_invert+0x9c>
    4694:	b4 e0       	ldi	r27, 0x04	; 4
    4696:	3c d0       	rcall	.+120    	; 0x4710 <__ultoa_invert+0x9c>
    4698:	67 0f       	add	r22, r23
    469a:	78 1f       	adc	r23, r24
    469c:	89 1f       	adc	r24, r25
    469e:	9a 1f       	adc	r25, r26
    46a0:	a1 1d       	adc	r26, r1
    46a2:	68 0f       	add	r22, r24
    46a4:	79 1f       	adc	r23, r25
    46a6:	8a 1f       	adc	r24, r26
    46a8:	91 1d       	adc	r25, r1
    46aa:	a1 1d       	adc	r26, r1
    46ac:	6a 0f       	add	r22, r26
    46ae:	71 1d       	adc	r23, r1
    46b0:	81 1d       	adc	r24, r1
    46b2:	91 1d       	adc	r25, r1
    46b4:	a1 1d       	adc	r26, r1
    46b6:	20 d0       	rcall	.+64     	; 0x46f8 <__ultoa_invert+0x84>
    46b8:	09 f4       	brne	.+2      	; 0x46bc <__ultoa_invert+0x48>
    46ba:	68 94       	set
    46bc:	3f 91       	pop	r19
    46be:	2a e0       	ldi	r18, 0x0A	; 10
    46c0:	26 9f       	mul	r18, r22
    46c2:	11 24       	eor	r1, r1
    46c4:	30 19       	sub	r19, r0
    46c6:	30 5d       	subi	r19, 0xD0	; 208
    46c8:	31 93       	st	Z+, r19
    46ca:	de f6       	brtc	.-74     	; 0x4682 <__ultoa_invert+0xe>
    46cc:	cf 01       	movw	r24, r30
    46ce:	08 95       	ret
    46d0:	46 2f       	mov	r20, r22
    46d2:	47 70       	andi	r20, 0x07	; 7
    46d4:	40 5d       	subi	r20, 0xD0	; 208
    46d6:	41 93       	st	Z+, r20
    46d8:	b3 e0       	ldi	r27, 0x03	; 3
    46da:	0f d0       	rcall	.+30     	; 0x46fa <__ultoa_invert+0x86>
    46dc:	c9 f7       	brne	.-14     	; 0x46d0 <__ultoa_invert+0x5c>
    46de:	f6 cf       	rjmp	.-20     	; 0x46cc <__ultoa_invert+0x58>
    46e0:	46 2f       	mov	r20, r22
    46e2:	4f 70       	andi	r20, 0x0F	; 15
    46e4:	40 5d       	subi	r20, 0xD0	; 208
    46e6:	4a 33       	cpi	r20, 0x3A	; 58
    46e8:	18 f0       	brcs	.+6      	; 0x46f0 <__ultoa_invert+0x7c>
    46ea:	49 5d       	subi	r20, 0xD9	; 217
    46ec:	31 fd       	sbrc	r19, 1
    46ee:	40 52       	subi	r20, 0x20	; 32
    46f0:	41 93       	st	Z+, r20
    46f2:	02 d0       	rcall	.+4      	; 0x46f8 <__ultoa_invert+0x84>
    46f4:	a9 f7       	brne	.-22     	; 0x46e0 <__ultoa_invert+0x6c>
    46f6:	ea cf       	rjmp	.-44     	; 0x46cc <__ultoa_invert+0x58>
    46f8:	b4 e0       	ldi	r27, 0x04	; 4
    46fa:	a6 95       	lsr	r26
    46fc:	97 95       	ror	r25
    46fe:	87 95       	ror	r24
    4700:	77 95       	ror	r23
    4702:	67 95       	ror	r22
    4704:	ba 95       	dec	r27
    4706:	c9 f7       	brne	.-14     	; 0x46fa <__ultoa_invert+0x86>
    4708:	00 97       	sbiw	r24, 0x00	; 0
    470a:	61 05       	cpc	r22, r1
    470c:	71 05       	cpc	r23, r1
    470e:	08 95       	ret
    4710:	9b 01       	movw	r18, r22
    4712:	ac 01       	movw	r20, r24
    4714:	0a 2e       	mov	r0, r26
    4716:	06 94       	lsr	r0
    4718:	57 95       	ror	r21
    471a:	47 95       	ror	r20
    471c:	37 95       	ror	r19
    471e:	27 95       	ror	r18
    4720:	ba 95       	dec	r27
    4722:	c9 f7       	brne	.-14     	; 0x4716 <__ultoa_invert+0xa2>
    4724:	62 0f       	add	r22, r18
    4726:	73 1f       	adc	r23, r19
    4728:	84 1f       	adc	r24, r20
    472a:	95 1f       	adc	r25, r21
    472c:	a0 1d       	adc	r26, r0
    472e:	08 95       	ret

00004730 <__mulsi3>:
    4730:	62 9f       	mul	r22, r18
    4732:	d0 01       	movw	r26, r0
    4734:	73 9f       	mul	r23, r19
    4736:	f0 01       	movw	r30, r0
    4738:	82 9f       	mul	r24, r18
    473a:	e0 0d       	add	r30, r0
    473c:	f1 1d       	adc	r31, r1
    473e:	64 9f       	mul	r22, r20
    4740:	e0 0d       	add	r30, r0
    4742:	f1 1d       	adc	r31, r1
    4744:	92 9f       	mul	r25, r18
    4746:	f0 0d       	add	r31, r0
    4748:	83 9f       	mul	r24, r19
    474a:	f0 0d       	add	r31, r0
    474c:	74 9f       	mul	r23, r20
    474e:	f0 0d       	add	r31, r0
    4750:	65 9f       	mul	r22, r21
    4752:	f0 0d       	add	r31, r0
    4754:	99 27       	eor	r25, r25
    4756:	72 9f       	mul	r23, r18
    4758:	b0 0d       	add	r27, r0
    475a:	e1 1d       	adc	r30, r1
    475c:	f9 1f       	adc	r31, r25
    475e:	63 9f       	mul	r22, r19
    4760:	b0 0d       	add	r27, r0
    4762:	e1 1d       	adc	r30, r1
    4764:	f9 1f       	adc	r31, r25
    4766:	bd 01       	movw	r22, r26
    4768:	cf 01       	movw	r24, r30
    476a:	11 24       	eor	r1, r1
    476c:	08 95       	ret

0000476e <__divmodsi4>:
    476e:	97 fb       	bst	r25, 7
    4770:	09 2e       	mov	r0, r25
    4772:	05 26       	eor	r0, r21
    4774:	0e d0       	rcall	.+28     	; 0x4792 <__divmodsi4_neg1>
    4776:	57 fd       	sbrc	r21, 7
    4778:	04 d0       	rcall	.+8      	; 0x4782 <__divmodsi4_neg2>
    477a:	14 d0       	rcall	.+40     	; 0x47a4 <__udivmodsi4>
    477c:	0a d0       	rcall	.+20     	; 0x4792 <__divmodsi4_neg1>
    477e:	00 1c       	adc	r0, r0
    4780:	38 f4       	brcc	.+14     	; 0x4790 <__divmodsi4_exit>

00004782 <__divmodsi4_neg2>:
    4782:	50 95       	com	r21
    4784:	40 95       	com	r20
    4786:	30 95       	com	r19
    4788:	21 95       	neg	r18
    478a:	3f 4f       	sbci	r19, 0xFF	; 255
    478c:	4f 4f       	sbci	r20, 0xFF	; 255
    478e:	5f 4f       	sbci	r21, 0xFF	; 255

00004790 <__divmodsi4_exit>:
    4790:	08 95       	ret

00004792 <__divmodsi4_neg1>:
    4792:	f6 f7       	brtc	.-4      	; 0x4790 <__divmodsi4_exit>
    4794:	90 95       	com	r25
    4796:	80 95       	com	r24
    4798:	70 95       	com	r23
    479a:	61 95       	neg	r22
    479c:	7f 4f       	sbci	r23, 0xFF	; 255
    479e:	8f 4f       	sbci	r24, 0xFF	; 255
    47a0:	9f 4f       	sbci	r25, 0xFF	; 255
    47a2:	08 95       	ret

000047a4 <__udivmodsi4>:
    47a4:	a1 e2       	ldi	r26, 0x21	; 33
    47a6:	1a 2e       	mov	r1, r26
    47a8:	aa 1b       	sub	r26, r26
    47aa:	bb 1b       	sub	r27, r27
    47ac:	fd 01       	movw	r30, r26
    47ae:	0d c0       	rjmp	.+26     	; 0x47ca <__udivmodsi4_ep>

000047b0 <__udivmodsi4_loop>:
    47b0:	aa 1f       	adc	r26, r26
    47b2:	bb 1f       	adc	r27, r27
    47b4:	ee 1f       	adc	r30, r30
    47b6:	ff 1f       	adc	r31, r31
    47b8:	a2 17       	cp	r26, r18
    47ba:	b3 07       	cpc	r27, r19
    47bc:	e4 07       	cpc	r30, r20
    47be:	f5 07       	cpc	r31, r21
    47c0:	20 f0       	brcs	.+8      	; 0x47ca <__udivmodsi4_ep>
    47c2:	a2 1b       	sub	r26, r18
    47c4:	b3 0b       	sbc	r27, r19
    47c6:	e4 0b       	sbc	r30, r20
    47c8:	f5 0b       	sbc	r31, r21

000047ca <__udivmodsi4_ep>:
    47ca:	66 1f       	adc	r22, r22
    47cc:	77 1f       	adc	r23, r23
    47ce:	88 1f       	adc	r24, r24
    47d0:	99 1f       	adc	r25, r25
    47d2:	1a 94       	dec	r1
    47d4:	69 f7       	brne	.-38     	; 0x47b0 <__udivmodsi4_loop>
    47d6:	60 95       	com	r22
    47d8:	70 95       	com	r23
    47da:	80 95       	com	r24
    47dc:	90 95       	com	r25
    47de:	9b 01       	movw	r18, r22
    47e0:	ac 01       	movw	r20, r24
    47e2:	bd 01       	movw	r22, r26
    47e4:	cf 01       	movw	r24, r30
    47e6:	08 95       	ret

000047e8 <_exit>:
    47e8:	f8 94       	cli

000047ea <__stop_program>:
    47ea:	ff cf       	rjmp	.-2      	; 0x47ea <__stop_program>
